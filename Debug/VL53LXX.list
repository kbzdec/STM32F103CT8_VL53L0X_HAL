
VL53LXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000043c  20000000  08005674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001dc  2000043c  08005ab0  0002043c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000618  08005ab0  00020618  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f7d4  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003699  00000000  00000000  0003fc39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001282f  00000000  00000000  000432d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001068  00000000  00000000  00055b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017a0  00000000  00000000  00056b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000096a7  00000000  00000000  00058310  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007392  00000000  00000000  000619b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00068d49  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003370  00000000  00000000  00068dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000043c 	.word	0x2000043c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005604 	.word	0x08005604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000440 	.word	0x20000440
 8000148:	08005604 	.word	0x08005604

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a0 	bl	80002a8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000438 	.word	0x20000438
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f004 ffc2 	bl	8005134 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000045c 	.word	0x2000045c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000045c 	.word	0x2000045c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
 800028e:	db08      	blt.n	80002a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x18>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002d4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002d8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d003      	beq.n	80002e6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002de:	2304      	movs	r3, #4
 80002e0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002e6:	6803      	ldr	r3, [r0, #0]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	f022 020e 	bic.w	r2, r2, #14
 80002ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	f022 0201 	bic.w	r2, r2, #1
 80002f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002f8:	4a18      	ldr	r2, [pc, #96]	; (800035c <HAL_DMA_Abort_IT+0x88>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d01f      	beq.n	800033e <HAL_DMA_Abort_IT+0x6a>
 80002fe:	3214      	adds	r2, #20
 8000300:	4293      	cmp	r3, r2
 8000302:	d01e      	beq.n	8000342 <HAL_DMA_Abort_IT+0x6e>
 8000304:	3214      	adds	r2, #20
 8000306:	4293      	cmp	r3, r2
 8000308:	d01d      	beq.n	8000346 <HAL_DMA_Abort_IT+0x72>
 800030a:	3214      	adds	r2, #20
 800030c:	4293      	cmp	r3, r2
 800030e:	d01d      	beq.n	800034c <HAL_DMA_Abort_IT+0x78>
 8000310:	3214      	adds	r2, #20
 8000312:	4293      	cmp	r3, r2
 8000314:	d01d      	beq.n	8000352 <HAL_DMA_Abort_IT+0x7e>
 8000316:	3214      	adds	r2, #20
 8000318:	4293      	cmp	r3, r2
 800031a:	bf0c      	ite	eq
 800031c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000320:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000326:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000328:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800032a:	2301      	movs	r3, #1
 800032c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000330:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000332:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000336:	b17b      	cbz	r3, 8000358 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000338:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800033a:	4620      	mov	r0, r4
 800033c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800033e:	2301      	movs	r3, #1
 8000340:	e7f0      	b.n	8000324 <HAL_DMA_Abort_IT+0x50>
 8000342:	2310      	movs	r3, #16
 8000344:	e7ee      	b.n	8000324 <HAL_DMA_Abort_IT+0x50>
 8000346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034a:	e7eb      	b.n	8000324 <HAL_DMA_Abort_IT+0x50>
 800034c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000350:	e7e8      	b.n	8000324 <HAL_DMA_Abort_IT+0x50>
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	e7e5      	b.n	8000324 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000358:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800035a:	bd10      	pop	{r4, pc}
 800035c:	40020008 	.word	0x40020008
 8000360:	40020000 	.word	0x40020000

08000364 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8000364:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8000368:	4770      	bx	lr
	...

0800036c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800036c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000370:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000372:	4626      	mov	r6, r4
 8000374:	4b66      	ldr	r3, [pc, #408]	; (8000510 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000376:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000520 <HAL_GPIO_Init+0x1b4>
 800037a:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000524 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800037e:	680a      	ldr	r2, [r1, #0]
 8000380:	fa32 f506 	lsrs.w	r5, r2, r6
 8000384:	d102      	bne.n	800038c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000386:	b003      	add	sp, #12
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800038c:	f04f 0801 	mov.w	r8, #1
 8000390:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000394:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000398:	4590      	cmp	r8, r2
 800039a:	d17f      	bne.n	800049c <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 800039c:	684d      	ldr	r5, [r1, #4]
 800039e:	2d12      	cmp	r5, #18
 80003a0:	f000 80aa 	beq.w	80004f8 <HAL_GPIO_Init+0x18c>
 80003a4:	f200 8083 	bhi.w	80004ae <HAL_GPIO_Init+0x142>
 80003a8:	2d02      	cmp	r5, #2
 80003aa:	f000 80a2 	beq.w	80004f2 <HAL_GPIO_Init+0x186>
 80003ae:	d877      	bhi.n	80004a0 <HAL_GPIO_Init+0x134>
 80003b0:	2d00      	cmp	r5, #0
 80003b2:	f000 8089 	beq.w	80004c8 <HAL_GPIO_Init+0x15c>
 80003b6:	2d01      	cmp	r5, #1
 80003b8:	f000 8099 	beq.w	80004ee <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003bc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c0:	2aff      	cmp	r2, #255	; 0xff
 80003c2:	bf93      	iteet	ls
 80003c4:	4682      	movls	sl, r0
 80003c6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003ca:	3d08      	subhi	r5, #8
 80003cc:	f8d0 b000 	ldrls.w	fp, [r0]
 80003d0:	bf92      	itee	ls
 80003d2:	00b5      	lslls	r5, r6, #2
 80003d4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003d8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003da:	fa09 f805 	lsl.w	r8, r9, r5
 80003de:	ea2b 0808 	bic.w	r8, fp, r8
 80003e2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e6:	bf88      	it	hi
 80003e8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ec:	ea48 0505 	orr.w	r5, r8, r5
 80003f0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003f8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003fc:	d04e      	beq.n	800049c <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4d45      	ldr	r5, [pc, #276]	; (8000514 <HAL_GPIO_Init+0x1a8>)
 8000400:	4f44      	ldr	r7, [pc, #272]	; (8000514 <HAL_GPIO_Init+0x1a8>)
 8000402:	69ad      	ldr	r5, [r5, #24]
 8000404:	f026 0803 	bic.w	r8, r6, #3
 8000408:	f045 0501 	orr.w	r5, r5, #1
 800040c:	61bd      	str	r5, [r7, #24]
 800040e:	69bd      	ldr	r5, [r7, #24]
 8000410:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000414:	f005 0501 	and.w	r5, r5, #1
 8000418:	9501      	str	r5, [sp, #4]
 800041a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800041e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000424:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000428:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800042c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000430:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000434:	4d38      	ldr	r5, [pc, #224]	; (8000518 <HAL_GPIO_Init+0x1ac>)
 8000436:	42a8      	cmp	r0, r5
 8000438:	d063      	beq.n	8000502 <HAL_GPIO_Init+0x196>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d061      	beq.n	8000506 <HAL_GPIO_Init+0x19a>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d05f      	beq.n	800050a <HAL_GPIO_Init+0x19e>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	bf0c      	ite	eq
 8000452:	2503      	moveq	r5, #3
 8000454:	2504      	movne	r5, #4
 8000456:	fa05 f50b 	lsl.w	r5, r5, fp
 800045a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800045e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000462:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000464:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000468:	bf14      	ite	ne
 800046a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800046c:	4395      	biceq	r5, r2
 800046e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000470:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000472:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000476:	bf14      	ite	ne
 8000478:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800047a:	4395      	biceq	r5, r2
 800047c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800047e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000480:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000484:	bf14      	ite	ne
 8000486:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000488:	4395      	biceq	r5, r2
 800048a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800048c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800048e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000492:	bf14      	ite	ne
 8000494:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000496:	ea25 0202 	biceq.w	r2, r5, r2
 800049a:	60da      	str	r2, [r3, #12]
	position++;
 800049c:	3601      	adds	r6, #1
 800049e:	e76e      	b.n	800037e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80004a0:	2d03      	cmp	r5, #3
 80004a2:	d022      	beq.n	80004ea <HAL_GPIO_Init+0x17e>
 80004a4:	2d11      	cmp	r5, #17
 80004a6:	d189      	bne.n	80003bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004a8:	68cc      	ldr	r4, [r1, #12]
 80004aa:	3404      	adds	r4, #4
          break;
 80004ac:	e786      	b.n	80003bc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80004ae:	4f1b      	ldr	r7, [pc, #108]	; (800051c <HAL_GPIO_Init+0x1b0>)
 80004b0:	42bd      	cmp	r5, r7
 80004b2:	d009      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 80004b4:	d812      	bhi.n	80004dc <HAL_GPIO_Init+0x170>
 80004b6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000528 <HAL_GPIO_Init+0x1bc>
 80004ba:	454d      	cmp	r5, r9
 80004bc:	d004      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 80004be:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004c2:	454d      	cmp	r5, r9
 80004c4:	f47f af7a 	bne.w	80003bc <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004c8:	688c      	ldr	r4, [r1, #8]
 80004ca:	b1c4      	cbz	r4, 80004fe <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004cc:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80004ce:	bf0c      	ite	eq
 80004d0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004d4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004d8:	2408      	movs	r4, #8
 80004da:	e76f      	b.n	80003bc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80004dc:	4575      	cmp	r5, lr
 80004de:	d0f3      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 80004e0:	4565      	cmp	r5, ip
 80004e2:	d0f1      	beq.n	80004c8 <HAL_GPIO_Init+0x15c>
 80004e4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800052c <HAL_GPIO_Init+0x1c0>
 80004e8:	e7eb      	b.n	80004c2 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004ea:	2400      	movs	r4, #0
 80004ec:	e766      	b.n	80003bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004ee:	68cc      	ldr	r4, [r1, #12]
          break;
 80004f0:	e764      	b.n	80003bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004f2:	68cc      	ldr	r4, [r1, #12]
 80004f4:	3408      	adds	r4, #8
          break;
 80004f6:	e761      	b.n	80003bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004f8:	68cc      	ldr	r4, [r1, #12]
 80004fa:	340c      	adds	r4, #12
          break;
 80004fc:	e75e      	b.n	80003bc <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004fe:	2404      	movs	r4, #4
 8000500:	e75c      	b.n	80003bc <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000502:	2500      	movs	r5, #0
 8000504:	e7a7      	b.n	8000456 <HAL_GPIO_Init+0xea>
 8000506:	2501      	movs	r5, #1
 8000508:	e7a5      	b.n	8000456 <HAL_GPIO_Init+0xea>
 800050a:	2502      	movs	r5, #2
 800050c:	e7a3      	b.n	8000456 <HAL_GPIO_Init+0xea>
 800050e:	bf00      	nop
 8000510:	40010400 	.word	0x40010400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800
 800051c:	10210000 	.word	0x10210000
 8000520:	10310000 	.word	0x10310000
 8000524:	10320000 	.word	0x10320000
 8000528:	10110000 	.word	0x10110000
 800052c:	10220000 	.word	0x10220000

08000530 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000530:	b10a      	cbz	r2, 8000536 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000532:	6101      	str	r1, [r0, #16]
 8000534:	4770      	bx	lr
 8000536:	0409      	lsls	r1, r1, #16
 8000538:	e7fb      	b.n	8000532 <HAL_GPIO_WritePin+0x2>

0800053a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800053a:	6801      	ldr	r1, [r0, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	694b      	ldr	r3, [r1, #20]
 8000540:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000544:	d010      	beq.n	8000568 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000546:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800054a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800054c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800054e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000550:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000554:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000558:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800055a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000564:	2001      	movs	r0, #1
 8000566:	4770      	bx	lr
  }
  return HAL_OK;
 8000568:	4618      	mov	r0, r3
}
 800056a:	4770      	bx	lr

0800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800056c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000570:	4604      	mov	r4, r0
 8000572:	4617      	mov	r7, r2
 8000574:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000576:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800057a:	b28e      	uxth	r6, r1
 800057c:	6825      	ldr	r5, [r4, #0]
 800057e:	f1b8 0f01 	cmp.w	r8, #1
 8000582:	bf0c      	ite	eq
 8000584:	696b      	ldreq	r3, [r5, #20]
 8000586:	69ab      	ldrne	r3, [r5, #24]
 8000588:	ea36 0303 	bics.w	r3, r6, r3
 800058c:	bf14      	ite	ne
 800058e:	2001      	movne	r0, #1
 8000590:	2000      	moveq	r0, #0
 8000592:	b908      	cbnz	r0, 8000598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000598:	696b      	ldr	r3, [r5, #20]
 800059a:	055a      	lsls	r2, r3, #21
 800059c:	d516      	bpl.n	80005cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800059e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80005a0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80005a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005a8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80005ac:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80005b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80005ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005bc:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005c0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80005c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80005c6:	2001      	movs	r0, #1
 80005c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80005cc:	1c7b      	adds	r3, r7, #1
 80005ce:	d0d5      	beq.n	800057c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80005d0:	f7ff fdfe 	bl	80001d0 <HAL_GetTick>
 80005d4:	eba0 0009 	sub.w	r0, r0, r9
 80005d8:	4287      	cmp	r7, r0
 80005da:	d301      	bcc.n	80005e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d1cd      	bne.n	800057c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80005e0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80005e2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80005e4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80005e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005f0:	f042 0220 	orr.w	r2, r2, #32
 80005f4:	e7e4      	b.n	80005c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080005f6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80005f6:	b570      	push	{r4, r5, r6, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	460d      	mov	r5, r1
 80005fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80005fe:	6823      	ldr	r3, [r4, #0]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	075b      	lsls	r3, r3, #29
 8000604:	d501      	bpl.n	800060a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000606:	2000      	movs	r0, #0
 8000608:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800060a:	4620      	mov	r0, r4
 800060c:	f7ff ff95 	bl	800053a <I2C_IsAcknowledgeFailed>
 8000610:	b9a8      	cbnz	r0, 800063e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000612:	1c6a      	adds	r2, r5, #1
 8000614:	d0f3      	beq.n	80005fe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000616:	f7ff fddb 	bl	80001d0 <HAL_GetTick>
 800061a:	1b80      	subs	r0, r0, r6
 800061c:	4285      	cmp	r5, r0
 800061e:	d301      	bcc.n	8000624 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000620:	2d00      	cmp	r5, #0
 8000622:	d1ec      	bne.n	80005fe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000624:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000626:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000628:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800062a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800062e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000632:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000634:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000638:	f042 0220 	orr.w	r2, r2, #32
 800063c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800063e:	2001      	movs	r0, #1
}
 8000640:	bd70      	pop	{r4, r5, r6, pc}

08000642 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000642:	b570      	push	{r4, r5, r6, lr}
 8000644:	4604      	mov	r4, r0
 8000646:	460d      	mov	r5, r1
 8000648:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800064a:	6820      	ldr	r0, [r4, #0]
 800064c:	6943      	ldr	r3, [r0, #20]
 800064e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000652:	d001      	beq.n	8000658 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000654:	2000      	movs	r0, #0
}
 8000656:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000658:	6942      	ldr	r2, [r0, #20]
 800065a:	06d2      	lsls	r2, r2, #27
 800065c:	d50e      	bpl.n	800067c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800065e:	f06f 0210 	mvn.w	r2, #16
 8000662:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000664:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000666:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000668:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800066c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000670:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000672:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000678:	2001      	movs	r0, #1
 800067a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800067c:	f7ff fda8 	bl	80001d0 <HAL_GetTick>
 8000680:	1b80      	subs	r0, r0, r6
 8000682:	42a8      	cmp	r0, r5
 8000684:	d801      	bhi.n	800068a <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000686:	2d00      	cmp	r5, #0
 8000688:	d1df      	bne.n	800064a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800068a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800068c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800068e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000690:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000694:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000698:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800069a:	f042 0220 	orr.w	r2, r2, #32
 800069e:	e7e8      	b.n	8000672 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080006a0 <I2C_WaitOnFlagUntilTimeout>:
{
 80006a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a4:	4604      	mov	r4, r0
 80006a6:	4690      	mov	r8, r2
 80006a8:	461f      	mov	r7, r3
 80006aa:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80006ac:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80006b0:	b28d      	uxth	r5, r1
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	f1b9 0f01 	cmp.w	r9, #1
 80006b8:	bf0c      	ite	eq
 80006ba:	695b      	ldreq	r3, [r3, #20]
 80006bc:	699b      	ldrne	r3, [r3, #24]
 80006be:	ea35 0303 	bics.w	r3, r5, r3
 80006c2:	bf0c      	ite	eq
 80006c4:	2301      	moveq	r3, #1
 80006c6:	2300      	movne	r3, #0
 80006c8:	4543      	cmp	r3, r8
 80006ca:	d002      	beq.n	80006d2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80006cc:	2000      	movs	r0, #0
}
 80006ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80006d2:	1c7b      	adds	r3, r7, #1
 80006d4:	d0ed      	beq.n	80006b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006d6:	f7ff fd7b 	bl	80001d0 <HAL_GetTick>
 80006da:	1b80      	subs	r0, r0, r6
 80006dc:	4287      	cmp	r7, r0
 80006de:	d301      	bcc.n	80006e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80006e0:	2f00      	cmp	r7, #0
 80006e2:	d1e6      	bne.n	80006b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006e4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80006e6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006e8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80006ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80006ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006f8:	f042 0220 	orr.w	r2, r2, #32
 80006fc:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006fe:	2001      	movs	r0, #1
 8000700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000704 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4604      	mov	r4, r0
 8000708:	460d      	mov	r5, r1
 800070a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	061b      	lsls	r3, r3, #24
 8000712:	d501      	bpl.n	8000718 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000714:	2000      	movs	r0, #0
 8000716:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ff0e 	bl	800053a <I2C_IsAcknowledgeFailed>
 800071e:	b9a8      	cbnz	r0, 800074c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000720:	1c6a      	adds	r2, r5, #1
 8000722:	d0f3      	beq.n	800070c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000724:	f7ff fd54 	bl	80001d0 <HAL_GetTick>
 8000728:	1b80      	subs	r0, r0, r6
 800072a:	4285      	cmp	r5, r0
 800072c:	d301      	bcc.n	8000732 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800072e:	2d00      	cmp	r5, #0
 8000730:	d1ec      	bne.n	800070c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000732:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000734:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000736:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000738:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800073c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000740:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000746:	f042 0220 	orr.w	r2, r2, #32
 800074a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800074c:	2001      	movs	r0, #1
}
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <HAL_I2C_Init>:
{
 8000750:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000752:	4604      	mov	r4, r0
 8000754:	b908      	cbnz	r0, 800075a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000756:	2001      	movs	r0, #1
 8000758:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800075a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800075e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000762:	b91b      	cbnz	r3, 800076c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000764:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000768:	f004 fb7a 	bl	8004e60 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800076c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800076e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000770:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800077c:	f001 faf8 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000780:	6865      	ldr	r5, [r4, #4]
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <HAL_I2C_Init+0x138>)
 8000784:	429d      	cmp	r5, r3
 8000786:	d84d      	bhi.n	8000824 <HAL_I2C_Init+0xd4>
 8000788:	4b40      	ldr	r3, [pc, #256]	; (800088c <HAL_I2C_Init+0x13c>)
 800078a:	4298      	cmp	r0, r3
 800078c:	d9e3      	bls.n	8000756 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800078e:	4940      	ldr	r1, [pc, #256]	; (8000890 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000790:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000792:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000796:	6853      	ldr	r3, [r2, #4]
 8000798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800079c:	430b      	orrs	r3, r1
 800079e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007a0:	6a13      	ldr	r3, [r2, #32]
 80007a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007a6:	3101      	adds	r1, #1
 80007a8:	4319      	orrs	r1, r3
 80007aa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007ac:	69d1      	ldr	r1, [r2, #28]
 80007ae:	4b36      	ldr	r3, [pc, #216]	; (8000888 <HAL_I2C_Init+0x138>)
 80007b0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80007b4:	429d      	cmp	r5, r3
 80007b6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80007ba:	f100 30ff 	add.w	r0, r0, #4294967295
 80007be:	d848      	bhi.n	8000852 <HAL_I2C_Init+0x102>
 80007c0:	006d      	lsls	r5, r5, #1
 80007c2:	fbb0 f0f5 	udiv	r0, r0, r5
 80007c6:	3001      	adds	r0, #1
 80007c8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	bf38      	it	cc
 80007d0:	2304      	movcc	r3, #4
 80007d2:	430b      	orrs	r3, r1
 80007d4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80007d6:	6811      	ldr	r1, [r2, #0]
 80007d8:	6a20      	ldr	r0, [r4, #32]
 80007da:	69e3      	ldr	r3, [r4, #28]
 80007dc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80007e0:	4303      	orrs	r3, r0
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80007e6:	6891      	ldr	r1, [r2, #8]
 80007e8:	68e0      	ldr	r0, [r4, #12]
 80007ea:	6923      	ldr	r3, [r4, #16]
 80007ec:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80007f0:	4303      	orrs	r3, r0
 80007f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80007fa:	68d1      	ldr	r1, [r2, #12]
 80007fc:	69a0      	ldr	r0, [r4, #24]
 80007fe:	6963      	ldr	r3, [r4, #20]
 8000800:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000804:	4303      	orrs	r3, r0
 8000806:	430b      	orrs	r3, r1
 8000808:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800080a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800080c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000814:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000816:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800081c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800081e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000822:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_I2C_Init+0x144>)
 8000826:	4298      	cmp	r0, r3
 8000828:	d995      	bls.n	8000756 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800082a:	4e19      	ldr	r6, [pc, #100]	; (8000890 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800082c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000830:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000834:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000836:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000838:	6853      	ldr	r3, [r2, #4]
 800083a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800083e:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000840:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000844:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000846:	6a13      	ldr	r3, [r2, #32]
 8000848:	fbb1 f1f6 	udiv	r1, r1, r6
 800084c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000850:	e7a9      	b.n	80007a6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000852:	68a3      	ldr	r3, [r4, #8]
 8000854:	b953      	cbnz	r3, 800086c <HAL_I2C_Init+0x11c>
 8000856:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800085a:	fbb0 f0f3 	udiv	r0, r0, r3
 800085e:	1c43      	adds	r3, r0, #1
 8000860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000864:	b16b      	cbz	r3, 8000882 <HAL_I2C_Init+0x132>
 8000866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086a:	e7b2      	b.n	80007d2 <HAL_I2C_Init+0x82>
 800086c:	2319      	movs	r3, #25
 800086e:	436b      	muls	r3, r5
 8000870:	fbb0 f0f3 	udiv	r0, r0, r3
 8000874:	1c43      	adds	r3, r0, #1
 8000876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087a:	b113      	cbz	r3, 8000882 <HAL_I2C_Init+0x132>
 800087c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000880:	e7a7      	b.n	80007d2 <HAL_I2C_Init+0x82>
 8000882:	2301      	movs	r3, #1
 8000884:	e7a5      	b.n	80007d2 <HAL_I2C_Init+0x82>
 8000886:	bf00      	nop
 8000888:	000186a0 	.word	0x000186a0
 800088c:	001e847f 	.word	0x001e847f
 8000890:	000f4240 	.word	0x000f4240
 8000894:	003d08ff 	.word	0x003d08ff

08000898 <HAL_I2C_Master_Transmit>:
{
 8000898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	461f      	mov	r7, r3
 80008a0:	460d      	mov	r5, r1
 80008a2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff fc94 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80008ac:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008ae:	2b20      	cmp	r3, #32
 80008b0:	d004      	beq.n	80008bc <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80008b2:	2502      	movs	r5, #2
}
 80008b4:	4628      	mov	r0, r5
 80008b6:	b004      	add	sp, #16
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80008bc:	9000      	str	r0, [sp, #0]
 80008be:	2319      	movs	r3, #25
 80008c0:	2201      	movs	r2, #1
 80008c2:	4958      	ldr	r1, [pc, #352]	; (8000a24 <HAL_I2C_Master_Transmit+0x18c>)
 80008c4:	4620      	mov	r0, r4
 80008c6:	f7ff feeb 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d1f1      	bne.n	80008b2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80008ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d0ed      	beq.n	80008b2 <HAL_I2C_Master_Transmit+0x1a>
 80008d6:	2301      	movs	r3, #1
 80008d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80008e2:	bf5e      	ittt	pl
 80008e4:	681a      	ldrpl	r2, [r3, #0]
 80008e6:	f042 0201 	orrpl.w	r2, r2, #1
 80008ea:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008f2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80008f4:	2221      	movs	r2, #33	; 0x21
 80008f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80008fa:	2210      	movs	r2, #16
 80008fc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000900:	2200      	movs	r2, #0
 8000902:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000904:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000906:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000908:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800090c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_I2C_Master_Transmit+0x190>)
 8000910:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000914:	2a08      	cmp	r2, #8
 8000916:	d004      	beq.n	8000922 <HAL_I2C_Master_Transmit+0x8a>
 8000918:	2a01      	cmp	r2, #1
 800091a:	d002      	beq.n	8000922 <HAL_I2C_Master_Transmit+0x8a>
 800091c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000920:	d104      	bne.n	800092c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e002      	b.n	8000932 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800092c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800092e:	2a12      	cmp	r2, #18
 8000930:	d0f7      	beq.n	8000922 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000932:	9600      	str	r6, [sp, #0]
 8000934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800093c:	4620      	mov	r0, r4
 800093e:	f7ff feaf 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000942:	b108      	cbz	r0, 8000948 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000944:	2501      	movs	r5, #1
 8000946:	e7b5      	b.n	80008b4 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000950:	d113      	bne.n	800097a <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000952:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000956:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000958:	4633      	mov	r3, r6
 800095a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800095c:	4933      	ldr	r1, [pc, #204]	; (8000a2c <HAL_I2C_Master_Transmit+0x194>)
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fe04 	bl	800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000964:	4605      	mov	r5, r0
 8000966:	2800      	cmp	r0, #0
 8000968:	d1ec      	bne.n	8000944 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	9003      	str	r0, [sp, #12]
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	9203      	str	r2, [sp, #12]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	9303      	str	r3, [sp, #12]
 8000976:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000978:	e044      	b.n	8000a04 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800097a:	11eb      	asrs	r3, r5, #7
 800097c:	f003 0306 	and.w	r3, r3, #6
 8000980:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000984:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000986:	492a      	ldr	r1, [pc, #168]	; (8000a30 <HAL_I2C_Master_Transmit+0x198>)
 8000988:	4633      	mov	r3, r6
 800098a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff fded 	bl	800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000992:	2800      	cmp	r0, #0
 8000994:	d1d6      	bne.n	8000944 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	b2ed      	uxtb	r5, r5
 800099a:	611d      	str	r5, [r3, #16]
 800099c:	e7dc      	b.n	8000958 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800099e:	4632      	mov	r2, r6
 80009a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff feae 	bl	8000704 <I2C_WaitOnTXEFlagUntilTimeout>
 80009a8:	b140      	cbz	r0, 80009bc <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ac:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009ae:	bf01      	itttt	eq
 80009b0:	6822      	ldreq	r2, [r4, #0]
 80009b2:	6813      	ldreq	r3, [r2, #0]
 80009b4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80009b8:	6013      	streq	r3, [r2, #0]
 80009ba:	e7c3      	b.n	8000944 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009be:	6820      	ldr	r0, [r4, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80009c6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80009c8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80009ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009cc:	3a01      	subs	r2, #1
 80009ce:	b292      	uxth	r2, r2
 80009d0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009d4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80009d6:	1e51      	subs	r1, r2, #1
 80009d8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009da:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80009dc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009de:	d50a      	bpl.n	80009f6 <HAL_I2C_Master_Transmit+0x15e>
 80009e0:	b149      	cbz	r1, 80009f6 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009e2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80009e4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009e6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80009e8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80009ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80009ec:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80009ee:	3b01      	subs	r3, #1
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80009f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009f6:	4632      	mov	r2, r6
 80009f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80009fa:	4620      	mov	r0, r4
 80009fc:	f7ff fdfb 	bl	80005f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d1d2      	bne.n	80009aa <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000a04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1c9      	bne.n	800099e <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a0a:	6821      	ldr	r1, [r4, #0]
 8000a0c:	680a      	ldr	r2, [r1, #0]
 8000a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a12:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a14:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000a16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000a1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000a22:	e747      	b.n	80008b4 <HAL_I2C_Master_Transmit+0x1c>
 8000a24:	00100002 	.word	0x00100002
 8000a28:	ffff0000 	.word	0xffff0000
 8000a2c:	00010002 	.word	0x00010002
 8000a30:	00010008 	.word	0x00010008

08000a34 <HAL_I2C_Master_Receive>:
{
 8000a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a38:	4604      	mov	r4, r0
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	4698      	mov	r8, r3
 8000a3e:	460f      	mov	r7, r1
 8000a40:	4691      	mov	r9, r2
 8000a42:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff fbc4 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a48:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a4e:	2b20      	cmp	r3, #32
 8000a50:	d004      	beq.n	8000a5c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000a52:	2702      	movs	r7, #2
}
 8000a54:	4638      	mov	r0, r7
 8000a56:	b009      	add	sp, #36	; 0x24
 8000a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a5c:	9000      	str	r0, [sp, #0]
 8000a5e:	2319      	movs	r3, #25
 8000a60:	2201      	movs	r2, #1
 8000a62:	499c      	ldr	r1, [pc, #624]	; (8000cd4 <HAL_I2C_Master_Receive+0x2a0>)
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff fe1b 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d1f1      	bne.n	8000a52 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8000a6e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d0ed      	beq.n	8000a52 <HAL_I2C_Master_Receive+0x1e>
 8000a76:	2301      	movs	r3, #1
 8000a78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000a82:	bf5e      	ittt	pl
 8000a84:	681a      	ldrpl	r2, [r3, #0]
 8000a86:	f042 0201 	orrpl.w	r2, r2, #1
 8000a8a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a92:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000a94:	2222      	movs	r2, #34	; 0x22
 8000a96:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000aa4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000aa8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000aaa:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000aae:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ab0:	4a89      	ldr	r2, [pc, #548]	; (8000cd8 <HAL_I2C_Master_Receive+0x2a4>)
 8000ab2:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000ab4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ab6:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ab8:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000aba:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000abe:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ac0:	d004      	beq.n	8000acc <HAL_I2C_Master_Receive+0x98>
 8000ac2:	2a01      	cmp	r2, #1
 8000ac4:	d002      	beq.n	8000acc <HAL_I2C_Master_Receive+0x98>
 8000ac6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000aca:	d104      	bne.n	8000ad6 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e002      	b.n	8000adc <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000ad6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ad8:	2a11      	cmp	r2, #17
 8000ada:	d0f7      	beq.n	8000acc <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000adc:	9500      	str	r5, [sp, #0]
 8000ade:	4633      	mov	r3, r6
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f7ff fdda 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000aec:	b108      	cbz	r0, 8000af2 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8000aee:	2701      	movs	r7, #1
 8000af0:	e7b0      	b.n	8000a54 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000af2:	6923      	ldr	r3, [r4, #16]
 8000af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	d143      	bne.n	8000b84 <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000afc:	f047 0701 	orr.w	r7, r7, #1
 8000b00:	b2ff      	uxtb	r7, r7
 8000b02:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b04:	462b      	mov	r3, r5
 8000b06:	4632      	mov	r2, r6
 8000b08:	4974      	ldr	r1, [pc, #464]	; (8000cdc <HAL_I2C_Master_Receive+0x2a8>)
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f7ff fd2e 	bl	800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b10:	4607      	mov	r7, r0
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d1eb      	bne.n	8000aee <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8000b16:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d066      	beq.n	8000bec <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 8000b1e:	2a01      	cmp	r2, #1
 8000b20:	d177      	bne.n	8000c12 <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	9704      	str	r7, [sp, #16]
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	9204      	str	r2, [sp, #16]
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	9204      	str	r2, [sp, #16]
 8000b38:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b42:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b44:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000ce4 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 8000b48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d058      	beq.n	8000c00 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	f200 80ca 	bhi.w	8000ce8 <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d178      	bne.n	8000c4a <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b58:	462a      	mov	r2, r5
 8000b5a:	4631      	mov	r1, r6
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff fd70 	bl	8000642 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d1c3      	bne.n	8000aee <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000b66:	6822      	ldr	r2, [r4, #0]
 8000b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b6a:	6912      	ldr	r2, [r2, #16]
 8000b6c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000b74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000b76:	3b01      	subs	r3, #1
 8000b78:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000b7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000b82:	e7e1      	b.n	8000b48 <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000b84:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8000b88:	f008 0806 	and.w	r8, r8, #6
 8000b8c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000b90:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000b92:	4953      	ldr	r1, [pc, #332]	; (8000ce0 <HAL_I2C_Master_Receive+0x2ac>)
 8000b94:	462b      	mov	r3, r5
 8000b96:	4632      	mov	r2, r6
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff fce7 	bl	800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d1a5      	bne.n	8000aee <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	b2ff      	uxtb	r7, r7
 8000ba6:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ba8:	4632      	mov	r2, r6
 8000baa:	462b      	mov	r3, r5
 8000bac:	494b      	ldr	r1, [pc, #300]	; (8000cdc <HAL_I2C_Master_Receive+0x2a8>)
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f7ff fcdc 	bl	800056c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d199      	bne.n	8000aee <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	9007      	str	r0, [sp, #28]
 8000bbe:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bc0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bc2:	9107      	str	r1, [sp, #28]
 8000bc4:	6999      	ldr	r1, [r3, #24]
 8000bc6:	9107      	str	r1, [sp, #28]
 8000bc8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bca:	6819      	ldr	r1, [r3, #0]
 8000bcc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000bd0:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bd2:	9500      	str	r5, [sp, #0]
 8000bd4:	4633      	mov	r3, r6
 8000bd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000bda:	f7ff fd61 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d185      	bne.n	8000aee <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000be8:	6113      	str	r3, [r2, #16]
 8000bea:	e78b      	b.n	8000b04 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bec:	9703      	str	r7, [sp, #12]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	9203      	str	r2, [sp, #12]
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	9203      	str	r2, [sp, #12]
 8000bf6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bfe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c00:	2320      	movs	r3, #32
 8000c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000c0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000c10:	e720      	b.n	8000a54 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8000c12:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c14:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000c16:	d10e      	bne.n	8000c36 <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	9705      	str	r7, [sp, #20]
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	9205      	str	r2, [sp, #20]
 8000c28:	699a      	ldr	r2, [r3, #24]
 8000c2a:	9205      	str	r2, [sp, #20]
 8000c2c:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c34:	e784      	b.n	8000b40 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c3a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c3c:	9706      	str	r7, [sp, #24]
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	9206      	str	r2, [sp, #24]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	9306      	str	r3, [sp, #24]
 8000c46:	9b06      	ldr	r3, [sp, #24]
 8000c48:	e77c      	b.n	8000b44 <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 8000c4a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c4c:	9500      	str	r5, [sp, #0]
 8000c4e:	4633      	mov	r3, r6
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	4641      	mov	r1, r8
 8000c56:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8000c58:	d119      	bne.n	8000c8e <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c5a:	f7ff fd21 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	f47f af45 	bne.w	8000aee <HAL_I2C_Master_Receive+0xba>
 8000c64:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c6e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c74:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000c7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000c8a:	b662      	cpsie	i
 8000c8c:	e76b      	b.n	8000b66 <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c8e:	f7ff fd07 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000c92:	4602      	mov	r2, r0
 8000c94:	2800      	cmp	r0, #0
 8000c96:	f47f af2a 	bne.w	8000aee <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c9a:	6821      	ldr	r1, [r4, #0]
 8000c9c:	680b      	ldr	r3, [r1, #0]
 8000c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ca2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ca6:	6821      	ldr	r1, [r4, #0]
 8000ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000caa:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cac:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000cae:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8000cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cb2:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000cb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cba:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000cc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cc8:	4633      	mov	r3, r6
 8000cca:	f7ff fce9 	bl	80006a0 <I2C_WaitOnFlagUntilTimeout>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d0c9      	beq.n	8000c66 <HAL_I2C_Master_Receive+0x232>
 8000cd2:	e70c      	b.n	8000aee <HAL_I2C_Master_Receive+0xba>
 8000cd4:	00100002 	.word	0x00100002
 8000cd8:	ffff0000 	.word	0xffff0000
 8000cdc:	00010002 	.word	0x00010002
 8000ce0:	00010008 	.word	0x00010008
 8000ce4:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ce8:	462a      	mov	r2, r5
 8000cea:	4631      	mov	r1, r6
 8000cec:	4620      	mov	r0, r4
 8000cee:	f7ff fca8 	bl	8000642 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	f47f aefb 	bne.w	8000aee <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cfc:	6912      	ldr	r2, [r2, #16]
 8000cfe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8000d00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d02:	1c53      	adds	r3, r2, #1
 8000d04:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8000d06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	6959      	ldr	r1, [r3, #20]
 8000d18:	0749      	lsls	r1, r1, #29
 8000d1a:	f57f af15 	bpl.w	8000b48 <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	7053      	strb	r3, [r2, #1]
 8000d22:	e724      	b.n	8000b6e <HAL_I2C_Master_Receive+0x13a>

08000d24 <HAL_I2C_MasterTxCpltCallback>:
 8000d24:	4770      	bx	lr

08000d26 <HAL_I2C_MasterRxCpltCallback>:
 8000d26:	4770      	bx	lr

08000d28 <HAL_I2C_SlaveTxCpltCallback>:
 8000d28:	4770      	bx	lr

08000d2a <HAL_I2C_SlaveRxCpltCallback>:
 8000d2a:	4770      	bx	lr

08000d2c <HAL_I2C_AddrCallback>:
{
 8000d2c:	4770      	bx	lr

08000d2e <HAL_I2C_ListenCpltCallback>:
 8000d2e:	4770      	bx	lr

08000d30 <HAL_I2C_MemTxCpltCallback>:
 8000d30:	4770      	bx	lr

08000d32 <HAL_I2C_MemRxCpltCallback>:
 8000d32:	4770      	bx	lr

08000d34 <HAL_I2C_ErrorCallback>:
 8000d34:	4770      	bx	lr

08000d36 <HAL_I2C_AbortCpltCallback>:
{
 8000d36:	4770      	bx	lr

08000d38 <I2C_DMAAbort>:
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d38:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8000d3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000d3c:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d3e:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d40:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d44:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d46:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8000d48:	6b85      	ldr	r5, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d4a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d4e:	62b3      	str	r3, [r6, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8000d50:	62ab      	str	r3, [r5, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d52:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8000d54:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8000d56:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8000d58:	6373      	str	r3, [r6, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8000d5a:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8000d5e:	636b      	str	r3, [r5, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8000d60:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000d62:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d66:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000d68:	2c60      	cmp	r4, #96	; 0x60
 8000d6a:	d108      	bne.n	8000d7e <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000d72:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8000d76:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000d78:	f7ff ffdd 	bl	8000d36 <HAL_I2C_AbortCpltCallback>
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d7e:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8000d82:	2928      	cmp	r1, #40	; 0x28
 8000d84:	d10d      	bne.n	8000da2 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8000d86:	6814      	ldr	r4, [r2, #0]
 8000d88:	f044 0401 	orr.w	r4, r4, #1
 8000d8c:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d8e:	6814      	ldr	r4, [r2, #0]
 8000d90:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000d94:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8000d96:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000d98:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8000d9c:	f7ff ffca 	bl	8000d34 <HAL_I2C_ErrorCallback>
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	2220      	movs	r2, #32
 8000da4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8000dac:	e7f6      	b.n	8000d9c <I2C_DMAAbort+0x64>
	...

08000db0 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000db0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000db4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8000db8:	b510      	push	{r4, lr}
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000dba:	2b10      	cmp	r3, #16
{
 8000dbc:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000dc2:	d105      	bne.n	8000dd0 <I2C_ITError+0x20>
 8000dc4:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000dc6:	bf02      	ittt	eq
 8000dc8:	6819      	ldreq	r1, [r3, #0]
 8000dca:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8000dce:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000dd0:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8000dd4:	2928      	cmp	r1, #40	; 0x28
 8000dd6:	d13a      	bne.n	8000e4e <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000ddc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000de6:	d059      	beq.n	8000e9c <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000de8:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000dea:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df0:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000df2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <I2C_ITError+0x13c>)
 8000dfa:	d035      	beq.n	8000e68 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000dfc:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000dfe:	f7ff fa69 	bl	80002d4 <HAL_DMA_Abort_IT>
 8000e02:	b150      	cbz	r0, 8000e1a <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8000e04:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000e06:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8000e08:	6813      	ldr	r3, [r2, #0]
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e10:	2320      	movs	r3, #32
 8000e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e18:	4798      	blx	r3
  CurrentState = hi2c->State;
 8000e1a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8000e20:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000e22:	0752      	lsls	r2, r2, #29
 8000e24:	d512      	bpl.n	8000e4c <I2C_ITError+0x9c>
 8000e26:	2b28      	cmp	r3, #40	; 0x28
 8000e28:	d110      	bne.n	8000e4c <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000e2a:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e2c:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000e2e:	6853      	ldr	r3, [r2, #4]
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <I2C_ITError+0x140>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8000e38:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8000e40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000e44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e48:	f7ff ff71 	bl	8000d2e <HAL_I2C_ListenCpltCallback>
 8000e4c:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	0509      	lsls	r1, r1, #20
 8000e52:	d404      	bmi.n	8000e5e <I2C_ITError+0xae>
 8000e54:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8000e56:	bf1c      	itt	ne
 8000e58:	2220      	movne	r2, #32
 8000e5a:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e5e:	2200      	movs	r2, #0
 8000e60:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e62:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8000e66:	e7bb      	b.n	8000de0 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e6a:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000e6c:	f7ff fa32 	bl	80002d4 <HAL_DMA_Abort_IT>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0d2      	beq.n	8000e1a <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	0652      	lsls	r2, r2, #25
 8000e7a:	d505      	bpl.n	8000e88 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e80:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e84:	3301      	adds	r3, #1
 8000e86:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8000e88:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000e8c:	6813      	ldr	r3, [r2, #0]
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e94:	2320      	movs	r3, #32
 8000e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000e9a:	e7bc      	b.n	8000e16 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000e9c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8000ea0:	2960      	cmp	r1, #96	; 0x60
 8000ea2:	d115      	bne.n	8000ed0 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eaa:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	0650      	lsls	r0, r2, #25
 8000eb0:	d505      	bpl.n	8000ebe <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eb6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eba:	3301      	adds	r3, #1
 8000ebc:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8000ebe:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000ec0:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8000ec2:	6813      	ldr	r3, [r2, #0]
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000eca:	f7ff ff34 	bl	8000d36 <HAL_I2C_AbortCpltCallback>
 8000ece:	e7a4      	b.n	8000e1a <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	0651      	lsls	r1, r2, #25
 8000ed4:	d505      	bpl.n	8000ee2 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eda:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ede:	3301      	adds	r3, #1
 8000ee0:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff26 	bl	8000d34 <HAL_I2C_ErrorCallback>
 8000ee8:	e797      	b.n	8000e1a <I2C_ITError+0x6a>
 8000eea:	bf00      	nop
 8000eec:	08000d39 	.word	0x08000d39
 8000ef0:	ffff0000 	.word	0xffff0000

08000ef4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000ef4:	6803      	ldr	r3, [r0, #0]
{
 8000ef6:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000ef8:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000efa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000efc:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8000f00:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000f02:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000f04:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f08:	2910      	cmp	r1, #16
{
 8000f0a:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000f0c:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f0e:	d002      	beq.n	8000f16 <HAL_I2C_EV_IRQHandler+0x22>
 8000f10:	2940      	cmp	r1, #64	; 0x40
 8000f12:	f040 82be 	bne.w	8001492 <HAL_I2C_EV_IRQHandler+0x59e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000f16:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000f18:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000f1a:	f011 0f01 	tst.w	r1, #1
 8000f1e:	d107      	bne.n	8000f30 <HAL_I2C_EV_IRQHandler+0x3c>
 8000f20:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8000f24:	d002      	beq.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 8000f26:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8000f2a:	d152      	bne.n	8000fd2 <HAL_I2C_EV_IRQHandler+0xde>
}
 8000f2c:	b00d      	add	sp, #52	; 0x34
 8000f2e:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f30:	0595      	lsls	r5, r2, #22
 8000f32:	d54e      	bpl.n	8000fd2 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8000f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f36:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8000f3a:	d10c      	bne.n	8000f56 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8000f3c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000f3e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f40:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8000f44:	2a40      	cmp	r2, #64	; 0x40
 8000f46:	d111      	bne.n	8000f6c <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8000f48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f4a:	b952      	cbnz	r2, 8000f62 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	e7ea      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8000f56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f58:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000f5e:	2208      	movs	r2, #8
 8000f60:	e7ed      	b.n	8000f3e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f64:	f042 0201 	orr.w	r2, r2, #1
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	e7f2      	b.n	8000f52 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f6c:	6922      	ldr	r2, [r4, #16]
 8000f6e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8000f72:	d11b      	bne.n	8000fac <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f74:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8000f78:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f7c:	d112      	bne.n	8000fa4 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f82:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8000f84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f86:	b912      	cbnz	r2, 8000f8e <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8000f88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	d0ce      	beq.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8000f8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f90:	b91a      	cbnz	r2, 8000f9a <HAL_I2C_EV_IRQHandler+0xa6>
 8000f92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d0c8      	beq.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	e7c3      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	e7ea      	b.n	8000f82 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8000fac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000fae:	b932      	cbnz	r2, 8000fbe <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8000fb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fb2:	11d2      	asrs	r2, r2, #7
 8000fb4:	f002 0206 	and.w	r2, r2, #6
 8000fb8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000fbc:	e7c9      	b.n	8000f52 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8000fbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000fc0:	2a01      	cmp	r2, #1
 8000fc2:	d1b3      	bne.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000fc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fc6:	11d2      	asrs	r2, r2, #7
 8000fc8:	f002 0206 	and.w	r2, r2, #6
 8000fcc:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8000fd0:	e7bf      	b.n	8000f52 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fd2:	070d      	lsls	r5, r1, #28
 8000fd4:	d503      	bpl.n	8000fde <HAL_I2C_EV_IRQHandler+0xea>
 8000fd6:	0595      	lsls	r5, r2, #22
 8000fd8:	d501      	bpl.n	8000fde <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8000fda:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fdc:	e7e4      	b.n	8000fa8 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fde:	078d      	lsls	r5, r1, #30
 8000fe0:	f140 80ea 	bpl.w	80011b8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8000fe4:	0595      	lsls	r5, r2, #22
 8000fe6:	f140 80e7 	bpl.w	80011b8 <HAL_I2C_EV_IRQHandler+0x2c4>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8000fea:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8000fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8000ff0:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000ff2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8000ff6:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000ff8:	2822      	cmp	r0, #34	; 0x22
 8000ffa:	f040 80d5 	bne.w	80011a8 <HAL_I2C_EV_IRQHandler+0x2b4>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8000ffe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001000:	b940      	cbnz	r0, 8001014 <HAL_I2C_EV_IRQHandler+0x120>
 8001002:	2940      	cmp	r1, #64	; 0x40
 8001004:	d106      	bne.n	8001014 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001006:	9000      	str	r0, [sp, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	9200      	str	r2, [sp, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	e78b      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001014:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001016:	b981      	cbnz	r1, 800103a <HAL_I2C_EV_IRQHandler+0x146>
 8001018:	6920      	ldr	r0, [r4, #16]
 800101a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800101e:	d10c      	bne.n	800103a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001020:	9101      	str	r1, [sp, #4]
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	699a      	ldr	r2, [r3, #24]
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001032:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001034:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001036:	3301      	adds	r3, #1
 8001038:	e028      	b.n	800108c <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 800103a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800103c:	b289      	uxth	r1, r1
 800103e:	b951      	cbnz	r1, 8001056 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	9202      	str	r2, [sp, #8]
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	9202      	str	r2, [sp, #8]
 800104a:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e019      	b.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001056:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001058:	b289      	uxth	r1, r1
 800105a:	2901      	cmp	r1, #1
 800105c:	d14a      	bne.n	80010f4 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800105e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001062:	d11c      	bne.n	800109e <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800106a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001072:	d00d      	beq.n	8001090 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107c:	2200      	movs	r2, #0
 800107e:	9203      	str	r2, [sp, #12]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	9203      	str	r2, [sp, #12]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	9303      	str	r3, [sp, #12]
 8001088:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	6523      	str	r3, [r4, #80]	; 0x50
 800108e:	e74d      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001090:	9204      	str	r2, [sp, #16]
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	9204      	str	r2, [sp, #16]
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	9204      	str	r2, [sp, #16]
 800109a:	9a04      	ldr	r2, [sp, #16]
 800109c:	e7d6      	b.n	800104c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800109e:	2a08      	cmp	r2, #8
 80010a0:	d01c      	beq.n	80010dc <HAL_I2C_EV_IRQHandler+0x1e8>
 80010a2:	2a20      	cmp	r2, #32
 80010a4:	d01a      	beq.n	80010dc <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80010a6:	2d12      	cmp	r5, #18
 80010a8:	d10d      	bne.n	80010c6 <HAL_I2C_EV_IRQHandler+0x1d2>
 80010aa:	2a01      	cmp	r2, #1
 80010ac:	d116      	bne.n	80010dc <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010b4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b6:	2200      	movs	r2, #0
 80010b8:	9205      	str	r2, [sp, #20]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	9205      	str	r2, [sp, #20]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	9305      	str	r3, [sp, #20]
 80010c2:	9b05      	ldr	r3, [sp, #20]
 80010c4:	e7e1      	b.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80010c6:	2a10      	cmp	r2, #16
 80010c8:	d8f1      	bhi.n	80010ae <HAL_I2C_EV_IRQHandler+0x1ba>
 80010ca:	4992      	ldr	r1, [pc, #584]	; (8001314 <HAL_I2C_EV_IRQHandler+0x420>)
 80010cc:	fa21 f202 	lsr.w	r2, r1, r2
 80010d0:	07d2      	lsls	r2, r2, #31
 80010d2:	d5ec      	bpl.n	80010ae <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010da:	e7eb      	b.n	80010b4 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e2:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e4:	2200      	movs	r2, #0
 80010e6:	9206      	str	r2, [sp, #24]
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	9206      	str	r2, [sp, #24]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	9206      	str	r2, [sp, #24]
 80010f0:	9a06      	ldr	r2, [sp, #24]
 80010f2:	e7ab      	b.n	800104c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 80010f4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80010f6:	b289      	uxth	r1, r1
 80010f8:	2902      	cmp	r1, #2
 80010fa:	d135      	bne.n	8001168 <HAL_I2C_EV_IRQHandler+0x274>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80010fc:	2a10      	cmp	r2, #16
 80010fe:	d805      	bhi.n	800110c <HAL_I2C_EV_IRQHandler+0x218>
 8001100:	4984      	ldr	r1, [pc, #528]	; (8001314 <HAL_I2C_EV_IRQHandler+0x420>)
 8001102:	40d1      	lsrs	r1, r2
 8001104:	43c9      	mvns	r1, r1
 8001106:	f011 0101 	ands.w	r1, r1, #1
 800110a:	d022      	beq.n	8001152 <HAL_I2C_EV_IRQHandler+0x25e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800110c:	6819      	ldr	r1, [r3, #0]
 800110e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001112:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001114:	2100      	movs	r1, #0
 8001116:	9107      	str	r1, [sp, #28]
 8001118:	6959      	ldr	r1, [r3, #20]
 800111a:	9107      	str	r1, [sp, #28]
 800111c:	6999      	ldr	r1, [r3, #24]
 800111e:	9107      	str	r1, [sp, #28]
 8001120:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001128:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	050d      	lsls	r5, r1, #20
 800112e:	d5ac      	bpl.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
 8001130:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001134:	d008      	beq.n	8001148 <HAL_I2C_EV_IRQHandler+0x254>
 8001136:	1e51      	subs	r1, r2, #1
 8001138:	291f      	cmp	r1, #31
 800113a:	bf97      	itett	ls
 800113c:	4a76      	ldrls	r2, [pc, #472]	; (8001318 <HAL_I2C_EV_IRQHandler+0x424>)
 800113e:	2201      	movhi	r2, #1
 8001140:	40ca      	lsrls	r2, r1
 8001142:	43d2      	mvnls	r2, r2
 8001144:	07d0      	lsls	r0, r2, #31
 8001146:	d4a0      	bmi.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	e79b      	b.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001158:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800115a:	9108      	str	r1, [sp, #32]
 800115c:	6959      	ldr	r1, [r3, #20]
 800115e:	9108      	str	r1, [sp, #32]
 8001160:	6999      	ldr	r1, [r3, #24]
 8001162:	9108      	str	r1, [sp, #32]
 8001164:	9908      	ldr	r1, [sp, #32]
 8001166:	e7e0      	b.n	800112a <HAL_I2C_EV_IRQHandler+0x236>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800116e:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001170:	6859      	ldr	r1, [r3, #4]
 8001172:	0509      	lsls	r1, r1, #20
 8001174:	d510      	bpl.n	8001198 <HAL_I2C_EV_IRQHandler+0x2a4>
 8001176:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800117a:	d009      	beq.n	8001190 <HAL_I2C_EV_IRQHandler+0x29c>
 800117c:	3a01      	subs	r2, #1
 800117e:	2a1f      	cmp	r2, #31
 8001180:	bf97      	itett	ls
 8001182:	4965      	ldrls	r1, [pc, #404]	; (8001318 <HAL_I2C_EV_IRQHandler+0x424>)
 8001184:	2201      	movhi	r2, #1
 8001186:	fa21 f202 	lsrls.w	r2, r1, r2
 800118a:	43d2      	mvnls	r2, r2
 800118c:	07d2      	lsls	r2, r2, #31
 800118e:	d403      	bmi.n	8001198 <HAL_I2C_EV_IRQHandler+0x2a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001196:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001198:	2200      	movs	r2, #0
 800119a:	9209      	str	r2, [sp, #36]	; 0x24
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	9209      	str	r2, [sp, #36]	; 0x24
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
 80011a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a6:	e770      	b.n	800108a <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a8:	2200      	movs	r2, #0
 80011aa:	920a      	str	r2, [sp, #40]	; 0x28
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	920a      	str	r2, [sp, #40]	; 0x28
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	930a      	str	r3, [sp, #40]	; 0x28
 80011b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011b6:	e6b9      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011b8:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011bc:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011be:	f000 80ad 	beq.w	800131c <HAL_I2C_EV_IRQHandler+0x428>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011c2:	0505      	lsls	r5, r0, #20
 80011c4:	f53f aeb2 	bmi.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80011cc:	f001 0104 	and.w	r1, r1, #4
 80011d0:	d069      	beq.n	80012a6 <HAL_I2C_EV_IRQHandler+0x3b2>
 80011d2:	0550      	lsls	r0, r2, #21
 80011d4:	d567      	bpl.n	80012a6 <HAL_I2C_EV_IRQHandler+0x3b2>
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d165      	bne.n	80012a6 <HAL_I2C_EV_IRQHandler+0x3b2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80011de:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80011e0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011e4:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80011e6:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80011e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80011ea:	b9c5      	cbnz	r5, 800121e <HAL_I2C_EV_IRQHandler+0x32a>
 80011ec:	2a21      	cmp	r2, #33	; 0x21
 80011ee:	d118      	bne.n	8001222 <HAL_I2C_EV_IRQHandler+0x32e>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80011f0:	2808      	cmp	r0, #8
 80011f2:	d078      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
 80011f4:	2820      	cmp	r0, #32
 80011f6:	d076      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
 80011f8:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80011fc:	d073      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001204:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001206:	2311      	movs	r3, #17
 8001208:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001210:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001212:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8001214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001218:	f7ff fd84 	bl	8000d24 <HAL_I2C_MasterTxCpltCallback>
 800121c:	e686      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800121e:	2a21      	cmp	r2, #33	; 0x21
 8001220:	d005      	beq.n	800122e <HAL_I2C_EV_IRQHandler+0x33a>
 8001222:	2940      	cmp	r1, #64	; 0x40
 8001224:	f47f ae82 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001228:	2a22      	cmp	r2, #34	; 0x22
 800122a:	f47f ae7f 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 800122e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001230:	b292      	uxth	r2, r2
 8001232:	b91a      	cbnz	r2, 800123c <HAL_I2C_EV_IRQHandler+0x348>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800123a:	e6b1      	b.n	8000fa0 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800123c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001240:	2a40      	cmp	r2, #64	; 0x40
 8001242:	d126      	bne.n	8001292 <HAL_I2C_EV_IRQHandler+0x39e>
        if (hi2c->EventCount == 0U)
 8001244:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001246:	b962      	cbnz	r2, 8001262 <HAL_I2C_EV_IRQHandler+0x36e>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001248:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800124a:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800124c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800124e:	d104      	bne.n	800125a <HAL_I2C_EV_IRQHandler+0x366>
 8001250:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001252:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001254:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001256:	3302      	adds	r3, #2
 8001258:	e718      	b.n	800108c <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800125a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	e6e8      	b.n	8001034 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001262:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001264:	2a01      	cmp	r2, #1
 8001266:	d102      	bne.n	800126e <HAL_I2C_EV_IRQHandler+0x37a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001268:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	e7f7      	b.n	800125e <HAL_I2C_EV_IRQHandler+0x36a>
        else if (hi2c->EventCount == 2U)
 800126e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001270:	2a02      	cmp	r2, #2
 8001272:	f47f ae5b 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001276:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800127a:	2a22      	cmp	r2, #34	; 0x22
 800127c:	d104      	bne.n	8001288 <HAL_I2C_EV_IRQHandler+0x394>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e651      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001288:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800128c:	2a21      	cmp	r2, #33	; 0x21
 800128e:	f47f ae4d 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001292:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001294:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001298:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800129a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800129c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80012a4:	e642      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012a6:	2900      	cmp	r1, #0
 80012a8:	f43f ae40 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 80012ac:	0592      	lsls	r2, r2, #22
 80012ae:	f57f ae3d 	bpl.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80012b4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80012b8:	2a21      	cmp	r2, #33	; 0x21
 80012ba:	f47f ae37 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80012be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80012c0:	b292      	uxth	r2, r2
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d1e5      	bne.n	8001292 <HAL_I2C_EV_IRQHandler+0x39e>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80012c6:	2908      	cmp	r1, #8
 80012c8:	d00d      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
 80012ca:	2920      	cmp	r1, #32
 80012cc:	d00b      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
 80012ce:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80012d2:	d008      	beq.n	80012e6 <HAL_I2C_EV_IRQHandler+0x3f2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80012da:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80012dc:	2311      	movs	r3, #17
 80012de:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80012e4:	e794      	b.n	8001210 <HAL_I2C_EV_IRQHandler+0x31c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012e6:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 80012e8:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80012fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001302:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001306:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800130a:	2a40      	cmp	r2, #64	; 0x40
 800130c:	d184      	bne.n	8001218 <HAL_I2C_EV_IRQHandler+0x324>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800130e:	f7ff fd0f 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
 8001312:	e60b      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 8001314:	00010014 	.word	0x00010014
 8001318:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800131c:	0505      	lsls	r5, r0, #20
 800131e:	f53f ae05 	bmi.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001322:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001326:	f001 0104 	and.w	r1, r1, #4
 800132a:	d048      	beq.n	80013be <HAL_I2C_EV_IRQHandler+0x4ca>
 800132c:	0550      	lsls	r0, r2, #21
 800132e:	d546      	bpl.n	80013be <HAL_I2C_EV_IRQHandler+0x4ca>
 8001330:	2900      	cmp	r1, #0
 8001332:	d144      	bne.n	80013be <HAL_I2C_EV_IRQHandler+0x4ca>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001334:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001338:	2a22      	cmp	r2, #34	; 0x22
 800133a:	f47f adf7 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 800133e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001340:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001342:	2a03      	cmp	r2, #3
 8001344:	d914      	bls.n	8001370 <HAL_I2C_EV_IRQHandler+0x47c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800134a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800134c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800134e:	3301      	adds	r3, #1
 8001350:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001354:	3b01      	subs	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800135a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b03      	cmp	r3, #3
 8001360:	f47f ade4 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	6853      	ldr	r3, [r2, #4]
 8001368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136c:	6053      	str	r3, [r2, #4]
 800136e:	e5dd      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001372:	2802      	cmp	r0, #2
 8001374:	f43f adda 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 8001378:	2a01      	cmp	r2, #1
 800137a:	f63f add7 	bhi.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001384:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800138c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001392:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001396:	3301      	adds	r3, #1
 8001398:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800139a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800139c:	3b01      	subs	r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	2320      	movs	r3, #32
 80013a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013b0:	2b40      	cmp	r3, #64	; 0x40
 80013b2:	d168      	bne.n	8001486 <HAL_I2C_EV_IRQHandler+0x592>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013b4:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff fcbb 	bl	8000d32 <HAL_I2C_MemRxCpltCallback>
 80013bc:	e5b6      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013be:	2900      	cmp	r1, #0
 80013c0:	f43f adb4 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 80013c4:	0592      	lsls	r2, r2, #22
 80013c6:	f57f adb1 	bpl.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80013cc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80013ce:	b289      	uxth	r1, r1
 80013d0:	2904      	cmp	r1, #4
 80013d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013d4:	d109      	bne.n	80013ea <HAL_I2C_EV_IRQHandler+0x4f6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013dc:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80013e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	6263      	str	r3, [r4, #36]	; 0x24
 80013e8:	e758      	b.n	800129c <HAL_I2C_EV_IRQHandler+0x3a8>
  else if (hi2c->XferCount == 3U)
 80013ea:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80013ec:	b280      	uxth	r0, r0
 80013ee:	2803      	cmp	r0, #3
 80013f0:	d10c      	bne.n	800140c <HAL_I2C_EV_IRQHandler+0x518>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80013f2:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80013f4:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80013f6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80013fa:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80013fc:	d0ef      	beq.n	80013de <HAL_I2C_EV_IRQHandler+0x4ea>
 80013fe:	2a02      	cmp	r2, #2
 8001400:	d0ed      	beq.n	80013de <HAL_I2C_EV_IRQHandler+0x4ea>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e7e8      	b.n	80013de <HAL_I2C_EV_IRQHandler+0x4ea>
  else if (hi2c->XferCount == 2U)
 800140c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800140e:	b280      	uxth	r0, r0
 8001410:	2802      	cmp	r0, #2
 8001412:	d1e4      	bne.n	80013de <HAL_I2C_EV_IRQHandler+0x4ea>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001414:	2a01      	cmp	r2, #1
 8001416:	d001      	beq.n	800141c <HAL_I2C_EV_IRQHandler+0x528>
 8001418:	2a10      	cmp	r2, #16
 800141a:	d128      	bne.n	800146e <HAL_I2C_EV_IRQHandler+0x57a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001422:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001428:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800142a:	1c53      	adds	r3, r2, #1
 800142c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800142e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001430:	3b01      	subs	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800143c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800143e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8001440:	3301      	adds	r3, #1
 8001442:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001444:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001446:	3b01      	subs	r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800144c:	6853      	ldr	r3, [r2, #4]
 800144e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001452:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001454:	2320      	movs	r3, #32
 8001456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800145a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800145e:	2b40      	cmp	r3, #64	; 0x40
 8001460:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001468:	d10d      	bne.n	8001486 <HAL_I2C_EV_IRQHandler+0x592>
      hi2c->PreviousState = I2C_STATE_NONE;
 800146a:	6323      	str	r3, [r4, #48]	; 0x30
 800146c:	e7a3      	b.n	80013b6 <HAL_I2C_EV_IRQHandler+0x4c2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800146e:	2a04      	cmp	r2, #4
 8001470:	d001      	beq.n	8001476 <HAL_I2C_EV_IRQHandler+0x582>
 8001472:	2a02      	cmp	r2, #2
 8001474:	d103      	bne.n	800147e <HAL_I2C_EV_IRQHandler+0x58a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800147c:	e7d1      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x52e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001484:	e7cd      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x52e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001486:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001488:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800148a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800148c:	f7ff fc4b 	bl	8000d26 <HAL_I2C_MasterRxCpltCallback>
 8001490:	e54c      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001492:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001494:	b321      	cbz	r1, 80014e0 <HAL_I2C_EV_IRQHandler+0x5ec>
  uint32_t sr2itflags               = 0U;
 8001496:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001498:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800149a:	f011 0f02 	tst.w	r1, #2
 800149e:	d029      	beq.n	80014f4 <HAL_I2C_EV_IRQHandler+0x600>
 80014a0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80014a4:	d026      	beq.n	80014f4 <HAL_I2C_EV_IRQHandler+0x600>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014a8:	b102      	cbz	r2, 80014ac <HAL_I2C_EV_IRQHandler+0x5b8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014aa:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80014ac:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80014b0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80014b4:	2a28      	cmp	r2, #40	; 0x28
 80014b6:	d116      	bne.n	80014e6 <HAL_I2C_EV_IRQHandler+0x5f2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80014b8:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80014ba:	f085 0104 	eor.w	r1, r5, #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80014be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80014c4:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80014c6:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80014ca:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80014ce:	bf54      	ite	pl
 80014d0:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80014d2:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80014d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff fc27 	bl	8000d2c <HAL_I2C_AddrCallback>
 80014de:	e525      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014e0:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014e2:	6959      	ldr	r1, [r3, #20]
 80014e4:	e7d9      	b.n	800149a <HAL_I2C_EV_IRQHandler+0x5a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014e6:	f06f 0202 	mvn.w	r2, #2
 80014ea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80014ec:	2300      	movs	r3, #0
 80014ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80014f2:	e51b      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014f4:	06cd      	lsls	r5, r1, #27
 80014f6:	f140 80af 	bpl.w	8001658 <HAL_I2C_EV_IRQHandler+0x764>
 80014fa:	0595      	lsls	r5, r2, #22
 80014fc:	f140 80ac 	bpl.w	8001658 <HAL_I2C_EV_IRQHandler+0x764>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001500:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001504:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001506:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001508:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800150c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800150e:	2200      	movs	r2, #0
 8001510:	920b      	str	r2, [sp, #44]	; 0x2c
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	920b      	str	r2, [sp, #44]	; 0x2c
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001526:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	0511      	lsls	r1, r2, #20
 800152c:	d520      	bpl.n	8001570 <HAL_I2C_EV_IRQHandler+0x67c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800152e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001532:	2a22      	cmp	r2, #34	; 0x22
 8001534:	d148      	bne.n	80015c8 <HAL_I2C_EV_IRQHandler+0x6d4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001536:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001538:	6802      	ldr	r2, [r0, #0]
 800153a:	6852      	ldr	r2, [r2, #4]
 800153c:	b292      	uxth	r2, r2
 800153e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001540:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001542:	b292      	uxth	r2, r2
 8001544:	b11a      	cbz	r2, 800154e <HAL_I2C_EV_IRQHandler+0x65a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001546:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001548:	f042 0204 	orr.w	r2, r2, #4
 800154c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001554:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001556:	f7fe ff05 	bl	8000364 <HAL_DMA_GetState>
 800155a:	2801      	cmp	r0, #1
 800155c:	d008      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x67c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800155e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_I2C_EV_IRQHandler+0x850>)
 8001562:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001564:	f7fe feb6 	bl	80002d4 <HAL_DMA_Abort_IT>
 8001568:	b110      	cbz	r0, 8001570 <HAL_I2C_EV_IRQHandler+0x67c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800156a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800156c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800156e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	b313      	cbz	r3, 80015bc <HAL_I2C_EV_IRQHandler+0x6c8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	0752      	lsls	r2, r2, #29
 800157c:	d509      	bpl.n	8001592 <HAL_I2C_EV_IRQHandler+0x69e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001582:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001586:	3301      	adds	r3, #1
 8001588:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800158a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800158c:	3b01      	subs	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	0650      	lsls	r0, r2, #25
 8001598:	d509      	bpl.n	80015ae <HAL_I2C_EV_IRQHandler+0x6ba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800159e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80015a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80015ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b11b      	cbz	r3, 80015bc <HAL_I2C_EV_IRQHandler+0x6c8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015be:	b303      	cbz	r3, 8001602 <HAL_I2C_EV_IRQHandler+0x70e>
    I2C_ITError(hi2c);
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff fbf5 	bl	8000db0 <I2C_ITError>
 80015c6:	e4b1      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80015c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80015ca:	6802      	ldr	r2, [r0, #0]
 80015cc:	6852      	ldr	r2, [r2, #4]
 80015ce:	b292      	uxth	r2, r2
 80015d0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80015d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015d4:	b292      	uxth	r2, r2
 80015d6:	b11a      	cbz	r2, 80015e0 <HAL_I2C_EV_IRQHandler+0x6ec>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015da:	f042 0204 	orr.w	r2, r2, #4
 80015de:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80015e8:	f7fe febc 	bl	8000364 <HAL_DMA_GetState>
 80015ec:	2801      	cmp	r0, #1
 80015ee:	d0bf      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x67c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80015f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_I2C_EV_IRQHandler+0x850>)
 80015f4:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80015f6:	f7fe fe6d 	bl	80002d4 <HAL_DMA_Abort_IT>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d0b8      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x67c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80015fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001600:	e7b4      	b.n	800156c <HAL_I2C_EV_IRQHandler+0x678>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001602:	2d2a      	cmp	r5, #42	; 0x2a
 8001604:	d106      	bne.n	8001614 <HAL_I2C_EV_IRQHandler+0x720>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001608:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800160a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800160c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001610:	f7ff fb8b 	bl	8000d2a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001614:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001618:	2b28      	cmp	r3, #40	; 0x28
 800161a:	d10c      	bne.n	8001636 <HAL_I2C_EV_IRQHandler+0x742>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800161c:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_I2C_EV_IRQHandler+0x854>)
      hi2c->State = HAL_I2C_STATE_READY;
 800161e:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001620:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8001624:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001628:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001630:	f7ff fb7d 	bl	8000d2e <HAL_I2C_ListenCpltCallback>
 8001634:	e47a      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001636:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001638:	2b22      	cmp	r3, #34	; 0x22
 800163a:	d002      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0x74e>
 800163c:	2d22      	cmp	r5, #34	; 0x22
 800163e:	f47f ac75 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001642:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001644:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001646:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001648:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff fb6a 	bl	8000d2a <HAL_I2C_SlaveRxCpltCallback>
 8001656:	e469      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001658:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 800165c:	2821      	cmp	r0, #33	; 0x21
 800165e:	f001 0504 	and.w	r5, r1, #4
 8001662:	d135      	bne.n	80016d0 <HAL_I2C_EV_IRQHandler+0x7dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001664:	0609      	lsls	r1, r1, #24
 8001666:	d527      	bpl.n	80016b8 <HAL_I2C_EV_IRQHandler+0x7c4>
 8001668:	0551      	lsls	r1, r2, #21
 800166a:	d525      	bpl.n	80016b8 <HAL_I2C_EV_IRQHandler+0x7c4>
 800166c:	bb25      	cbnz	r5, 80016b8 <HAL_I2C_EV_IRQHandler+0x7c4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800166e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001672:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001674:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001676:	b292      	uxth	r2, r2
 8001678:	2a00      	cmp	r2, #0
 800167a:	f43f ac57 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800167e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001680:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001684:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8001686:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001688:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800168a:	3a01      	subs	r2, #1
 800168c:	b292      	uxth	r2, r2
 800168e:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001690:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001692:	b292      	uxth	r2, r2
 8001694:	2a00      	cmp	r2, #0
 8001696:	f47f ac49 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 800169a:	2929      	cmp	r1, #41	; 0x29
 800169c:	f47f ac46 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a6:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016a8:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016aa:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff fb39 	bl	8000d28 <HAL_I2C_SlaveTxCpltCallback>
 80016b6:	e439      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b8:	2d00      	cmp	r5, #0
 80016ba:	f43f ac37 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 80016be:	0595      	lsls	r5, r2, #22
 80016c0:	f57f ac34 	bpl.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80016c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016c6:	b292      	uxth	r2, r2
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	f47f ade2 	bne.w	8001292 <HAL_I2C_EV_IRQHandler+0x39e>
 80016ce:	e42d      	b.n	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d0:	0648      	lsls	r0, r1, #25
 80016d2:	d527      	bpl.n	8001724 <HAL_I2C_EV_IRQHandler+0x830>
 80016d4:	0551      	lsls	r1, r2, #21
 80016d6:	d525      	bpl.n	8001724 <HAL_I2C_EV_IRQHandler+0x830>
 80016d8:	bb25      	cbnz	r5, 8001724 <HAL_I2C_EV_IRQHandler+0x830>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80016de:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016e0:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80016e2:	b289      	uxth	r1, r1
 80016e4:	2900      	cmp	r1, #0
 80016e6:	f43f ac21 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016ee:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80016f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016f2:	3301      	adds	r3, #1
 80016f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80016f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80016fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f ac12 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 8001708:	2a2a      	cmp	r2, #42	; 0x2a
 800170a:	f47f ac0f 	bne.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800170e:	6822      	ldr	r2, [r4, #0]
 8001710:	6853      	ldr	r3, [r2, #4]
 8001712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001716:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001718:	2322      	movs	r3, #34	; 0x22
 800171a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800171c:	2328      	movs	r3, #40	; 0x28
 800171e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001722:	e795      	b.n	8001650 <HAL_I2C_EV_IRQHandler+0x75c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001724:	2d00      	cmp	r5, #0
 8001726:	f43f ac01 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
 800172a:	0592      	lsls	r2, r2, #22
 800172c:	f57f abfe 	bpl.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001730:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001732:	b292      	uxth	r2, r2
 8001734:	2a00      	cmp	r2, #0
 8001736:	f43f abf9 	beq.w	8000f2c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	7013      	strb	r3, [r2, #0]
 8001740:	e64f      	b.n	80013e2 <HAL_I2C_EV_IRQHandler+0x4ee>
 8001742:	bf00      	nop
 8001744:	08000d39 	.word	0x08000d39
 8001748:	ffff0000 	.word	0xffff0000

0800174c <HAL_I2C_ER_IRQHandler>:
{
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800174e:	6803      	ldr	r3, [r0, #0]
{
 8001750:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001752:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001754:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001756:	f417 7580 	ands.w	r5, r7, #256	; 0x100
 800175a:	d00a      	beq.n	8001772 <HAL_I2C_ER_IRQHandler+0x26>
 800175c:	f416 7580 	ands.w	r5, r6, #256	; 0x100
 8001760:	d007      	beq.n	8001772 <HAL_I2C_ER_IRQHandler+0x26>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001762:	f46f 7280 	mvn.w	r2, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8001766:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001768:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001770:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001772:	05b9      	lsls	r1, r7, #22
 8001774:	d506      	bpl.n	8001784 <HAL_I2C_ER_IRQHandler+0x38>
 8001776:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001778:	bf42      	ittt	mi
 800177a:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 800177e:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001782:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001784:	0578      	lsls	r0, r7, #21
 8001786:	d537      	bpl.n	80017f8 <HAL_I2C_ER_IRQHandler+0xac>
 8001788:	05f1      	lsls	r1, r6, #23
 800178a:	d535      	bpl.n	80017f8 <HAL_I2C_ER_IRQHandler+0xac>
    tmp1 = hi2c->Mode;
 800178c:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8001790:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8001792:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001796:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 800179a:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800179c:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 800179e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017a0:	d15a      	bne.n	8001858 <HAL_I2C_ER_IRQHandler+0x10c>
 80017a2:	2900      	cmp	r1, #0
 80017a4:	d158      	bne.n	8001858 <HAL_I2C_ER_IRQHandler+0x10c>
 80017a6:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80017aa:	2921      	cmp	r1, #33	; 0x21
 80017ac:	d003      	beq.n	80017b6 <HAL_I2C_ER_IRQHandler+0x6a>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017ae:	2a28      	cmp	r2, #40	; 0x28
 80017b0:	d152      	bne.n	8001858 <HAL_I2C_ER_IRQHandler+0x10c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017b2:	2821      	cmp	r0, #33	; 0x21
 80017b4:	d150      	bne.n	8001858 <HAL_I2C_ER_IRQHandler+0x10c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017b6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017bc:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80017be:	2908      	cmp	r1, #8
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_ER_IRQHandler+0x7a>
 80017c2:	2920      	cmp	r1, #32
 80017c4:	d12a      	bne.n	800181c <HAL_I2C_ER_IRQHandler+0xd0>
 80017c6:	2a28      	cmp	r2, #40	; 0x28
 80017c8:	d128      	bne.n	800181c <HAL_I2C_ER_IRQHandler+0xd0>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80017cc:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ce:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80017e8:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80017ea:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80017ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80017f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80017f4:	f7ff fa9b 	bl	8000d2e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017f8:	053a      	lsls	r2, r7, #20
 80017fa:	d53b      	bpl.n	8001874 <HAL_I2C_ER_IRQHandler+0x128>
 80017fc:	05f3      	lsls	r3, r6, #23
 80017fe:	d539      	bpl.n	8001874 <HAL_I2C_ER_IRQHandler+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001800:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001804:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8001806:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800180a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800180c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800180e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8001810:	431d      	orrs	r5, r3
 8001812:	6425      	str	r5, [r4, #64]	; 0x40
}
 8001814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8001818:	f7ff baca 	b.w	8000db0 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800181c:	2a21      	cmp	r2, #33	; 0x21
 800181e:	d117      	bne.n	8001850 <HAL_I2C_ER_IRQHandler+0x104>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_I2C_ER_IRQHandler+0x130>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001822:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001824:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001826:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001828:	2220      	movs	r2, #32
 800182a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800182e:	2200      	movs	r2, #0
 8001830:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800183a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800183c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001840:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800184a:	f7ff fa6d 	bl	8000d28 <HAL_I2C_SlaveTxCpltCallback>
 800184e:	e7d3      	b.n	80017f8 <HAL_I2C_ER_IRQHandler+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	e7cf      	b.n	80017f8 <HAL_I2C_ER_IRQHandler+0xac>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800185c:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800185e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
      error |= HAL_I2C_ERROR_AF;
 8001862:	f045 0504 	orr.w	r5, r5, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001866:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	bf02      	ittt	eq
 800186a:	681a      	ldreq	r2, [r3, #0]
 800186c:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8001870:	601a      	streq	r2, [r3, #0]
 8001872:	e7c1      	b.n	80017f8 <HAL_I2C_ER_IRQHandler+0xac>
  if (error != HAL_I2C_ERROR_NONE)
 8001874:	2d00      	cmp	r5, #0
 8001876:	d1c9      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xc0>
 8001878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187a:	bf00      	nop
 800187c:	ffff0000 	.word	0xffff0000

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	4605      	mov	r5, r0
 8001886:	b908      	cbnz	r0, 800188c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001888:	2001      	movs	r0, #1
 800188a:	e03c      	b.n	8001906 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188c:	6803      	ldr	r3, [r0, #0]
 800188e:	07db      	lsls	r3, r3, #31
 8001890:	d410      	bmi.n	80018b4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	079f      	lsls	r7, r3, #30
 8001896:	d45d      	bmi.n	8001954 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	0719      	lsls	r1, r3, #28
 800189c:	f100 8094 	bmi.w	80019c8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	f100 80be 	bmi.w	8001a24 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a8:	69e8      	ldr	r0, [r5, #28]
 80018aa:	2800      	cmp	r0, #0
 80018ac:	f040 812c 	bne.w	8001b08 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80018b0:	2000      	movs	r0, #0
 80018b2:	e028      	b.n	8001906 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4c8f      	ldr	r4, [pc, #572]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d007      	beq.n	80018d0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c0:	6863      	ldr	r3, [r4, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
 80018ca:	6863      	ldr	r3, [r4, #4]
 80018cc:	03de      	lsls	r6, r3, #15
 80018ce:	d506      	bpl.n	80018de <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	039c      	lsls	r4, r3, #14
 80018d4:	d5dd      	bpl.n	8001892 <HAL_RCC_OscConfig+0x12>
 80018d6:	686b      	ldr	r3, [r5, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1da      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
 80018dc:	e7d4      	b.n	8001888 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	686b      	ldr	r3, [r5, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d112      	bne.n	800190c <HAL_RCC_OscConfig+0x8c>
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018ee:	f7fe fc6f 	bl	80001d0 <HAL_GetTick>
 80018f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	0398      	lsls	r0, r3, #14
 80018f8:	d4cb      	bmi.n	8001892 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fa:	f7fe fc69 	bl	80001d0 <HAL_GetTick>
 80018fe:	1b80      	subs	r0, r0, r6
 8001900:	2864      	cmp	r0, #100	; 0x64
 8001902:	d9f7      	bls.n	80018f4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001904:	2003      	movs	r0, #3
}
 8001906:	b002      	add	sp, #8
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190c:	b99b      	cbnz	r3, 8001936 <HAL_RCC_OscConfig+0xb6>
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	6023      	str	r3, [r4, #0]
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800191e:	f7fe fc57 	bl	80001d0 <HAL_GetTick>
 8001922:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	0399      	lsls	r1, r3, #14
 8001928:	d5b3      	bpl.n	8001892 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192a:	f7fe fc51 	bl	80001d0 <HAL_GetTick>
 800192e:	1b80      	subs	r0, r0, r6
 8001930:	2864      	cmp	r0, #100	; 0x64
 8001932:	d9f7      	bls.n	8001924 <HAL_RCC_OscConfig+0xa4>
 8001934:	e7e6      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	d103      	bne.n	8001946 <HAL_RCC_OscConfig+0xc6>
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	6023      	str	r3, [r4, #0]
 8001944:	e7cf      	b.n	80018e6 <HAL_RCC_OscConfig+0x66>
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6023      	str	r3, [r4, #0]
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	e7cb      	b.n	80018ec <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001954:	4c67      	ldr	r4, [pc, #412]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	f013 0f0c 	tst.w	r3, #12
 800195c:	d007      	beq.n	800196e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195e:	6863      	ldr	r3, [r4, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d110      	bne.n	800198a <HAL_RCC_OscConfig+0x10a>
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	03da      	lsls	r2, r3, #15
 800196c:	d40d      	bmi.n	800198a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	079b      	lsls	r3, r3, #30
 8001972:	d502      	bpl.n	800197a <HAL_RCC_OscConfig+0xfa>
 8001974:	692b      	ldr	r3, [r5, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d186      	bne.n	8001888 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	696a      	ldr	r2, [r5, #20]
 800197e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001982:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001986:	6023      	str	r3, [r4, #0]
 8001988:	e786      	b.n	8001898 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	692a      	ldr	r2, [r5, #16]
 800198c:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x278>)
 800198e:	b16a      	cbz	r2, 80019ac <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001994:	f7fe fc1c 	bl	80001d0 <HAL_GetTick>
 8001998:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	079f      	lsls	r7, r3, #30
 800199e:	d4ec      	bmi.n	800197a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7fe fc16 	bl	80001d0 <HAL_GetTick>
 80019a4:	1b80      	subs	r0, r0, r6
 80019a6:	2802      	cmp	r0, #2
 80019a8:	d9f7      	bls.n	800199a <HAL_RCC_OscConfig+0x11a>
 80019aa:	e7ab      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80019ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ae:	f7fe fc0f 	bl	80001d0 <HAL_GetTick>
 80019b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	0798      	lsls	r0, r3, #30
 80019b8:	f57f af6e 	bpl.w	8001898 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019bc:	f7fe fc08 	bl	80001d0 <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	2802      	cmp	r0, #2
 80019c4:	d9f6      	bls.n	80019b4 <HAL_RCC_OscConfig+0x134>
 80019c6:	e79d      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c8:	69aa      	ldr	r2, [r5, #24]
 80019ca:	4c4a      	ldr	r4, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x27c>)
 80019ce:	b1da      	cbz	r2, 8001a08 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019d4:	f7fe fbfc 	bl	80001d0 <HAL_GetTick>
 80019d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019dc:	079b      	lsls	r3, r3, #30
 80019de:	d50d      	bpl.n	80019fc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x280>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019ec:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80019ee:	bf00      	nop
  }
  while (Delay --);
 80019f0:	9b01      	ldr	r3, [sp, #4]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	9201      	str	r2, [sp, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_RCC_OscConfig+0x16e>
 80019fa:	e751      	b.n	80018a0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7fe fbe8 	bl	80001d0 <HAL_GetTick>
 8001a00:	1b80      	subs	r0, r0, r6
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d9e9      	bls.n	80019da <HAL_RCC_OscConfig+0x15a>
 8001a06:	e77d      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001a08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fbe1 	bl	80001d0 <HAL_GetTick>
 8001a0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a12:	079f      	lsls	r7, r3, #30
 8001a14:	f57f af44 	bpl.w	80018a0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7fe fbda 	bl	80001d0 <HAL_GetTick>
 8001a1c:	1b80      	subs	r0, r0, r6
 8001a1e:	2802      	cmp	r0, #2
 8001a20:	d9f6      	bls.n	8001a10 <HAL_RCC_OscConfig+0x190>
 8001a22:	e76f      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a24:	4c33      	ldr	r4, [pc, #204]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a26:	69e3      	ldr	r3, [r4, #28]
 8001a28:	00d8      	lsls	r0, r3, #3
 8001a2a:	d424      	bmi.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001a2c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	69e3      	ldr	r3, [r4, #28]
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61e3      	str	r3, [r4, #28]
 8001a36:	69e3      	ldr	r3, [r4, #28]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4e30      	ldr	r6, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x284>)
 8001a42:	6833      	ldr	r3, [r6, #0]
 8001a44:	05d9      	lsls	r1, r3, #23
 8001a46:	d518      	bpl.n	8001a7a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	68eb      	ldr	r3, [r5, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d126      	bne.n	8001a9c <HAL_RCC_OscConfig+0x21c>
 8001a4e:	6a23      	ldr	r3, [r4, #32]
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a56:	f7fe fbbb 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a5e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	6a23      	ldr	r3, [r4, #32]
 8001a62:	079b      	lsls	r3, r3, #30
 8001a64:	d53f      	bpl.n	8001ae6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001a66:	2f00      	cmp	r7, #0
 8001a68:	f43f af1e 	beq.w	80018a8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	69e3      	ldr	r3, [r4, #28]
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	61e3      	str	r3, [r4, #28]
 8001a74:	e718      	b.n	80018a8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2700      	movs	r7, #0
 8001a78:	e7e2      	b.n	8001a40 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	6833      	ldr	r3, [r6, #0]
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a82:	f7fe fba5 	bl	80001d0 <HAL_GetTick>
 8001a86:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	6833      	ldr	r3, [r6, #0]
 8001a8a:	05da      	lsls	r2, r3, #23
 8001a8c:	d4dc      	bmi.n	8001a48 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7fe fb9f 	bl	80001d0 <HAL_GetTick>
 8001a92:	eba0 0008 	sub.w	r0, r0, r8
 8001a96:	2864      	cmp	r0, #100	; 0x64
 8001a98:	d9f6      	bls.n	8001a88 <HAL_RCC_OscConfig+0x208>
 8001a9a:	e733      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	b9ab      	cbnz	r3, 8001aca <HAL_RCC_OscConfig+0x24a>
 8001a9e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6223      	str	r3, [r4, #32]
 8001aaa:	6a23      	ldr	r3, [r4, #32]
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ab2:	f7fe fb8d 	bl	80001d0 <HAL_GetTick>
 8001ab6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	6a23      	ldr	r3, [r4, #32]
 8001aba:	0798      	lsls	r0, r3, #30
 8001abc:	d5d3      	bpl.n	8001a66 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7fe fb87 	bl	80001d0 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	4540      	cmp	r0, r8
 8001ac6:	d9f7      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x238>
 8001ac8:	e71c      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	6a23      	ldr	r3, [r4, #32]
 8001ace:	d103      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x258>
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6223      	str	r3, [r4, #32]
 8001ad6:	e7ba      	b.n	8001a4e <HAL_RCC_OscConfig+0x1ce>
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6223      	str	r3, [r4, #32]
 8001ade:	6a23      	ldr	r3, [r4, #32]
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	e7b6      	b.n	8001a54 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe fb73 	bl	80001d0 <HAL_GetTick>
 8001aea:	eba0 0008 	sub.w	r0, r0, r8
 8001aee:	42b0      	cmp	r0, r6
 8001af0:	d9b6      	bls.n	8001a60 <HAL_RCC_OscConfig+0x1e0>
 8001af2:	e707      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	42420000 	.word	0x42420000
 8001afc:	42420480 	.word	0x42420480
 8001b00:	20000438 	.word	0x20000438
 8001b04:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_RCC_OscConfig+0x334>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	f002 020c 	and.w	r2, r2, #12
 8001b12:	2a08      	cmp	r2, #8
 8001b14:	d03d      	beq.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b16:	2300      	movs	r3, #0
 8001b18:	4e27      	ldr	r6, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1e:	d12b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001b20:	f7fe fb56 	bl	80001d0 <HAL_GetTick>
 8001b24:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	0199      	lsls	r1, r3, #6
 8001b2a:	d41f      	bmi.n	8001b6c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b2c:	6a2b      	ldr	r3, [r5, #32]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b34:	6862      	ldr	r2, [r4, #4]
 8001b36:	68a9      	ldr	r1, [r5, #8]
 8001b38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b42:	6862      	ldr	r2, [r4, #4]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b52:	f7fe fb3d 	bl	80001d0 <HAL_GetTick>
 8001b56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	019a      	lsls	r2, r3, #6
 8001b5c:	f53f aea8 	bmi.w	80018b0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fb36 	bl	80001d0 <HAL_GetTick>
 8001b64:	1b40      	subs	r0, r0, r5
 8001b66:	2802      	cmp	r0, #2
 8001b68:	d9f6      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2d8>
 8001b6a:	e6cb      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe fb30 	bl	80001d0 <HAL_GetTick>
 8001b70:	1bc0      	subs	r0, r0, r7
 8001b72:	2802      	cmp	r0, #2
 8001b74:	d9d7      	bls.n	8001b26 <HAL_RCC_OscConfig+0x2a6>
 8001b76:	e6c5      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001b78:	f7fe fb2a 	bl	80001d0 <HAL_GetTick>
 8001b7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	f57f ae95 	bpl.w	80018b0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe fb23 	bl	80001d0 <HAL_GetTick>
 8001b8a:	1b40      	subs	r0, r0, r5
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2fe>
 8001b90:	e6b8      	b.n	8001904 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b92:	2801      	cmp	r0, #1
 8001b94:	f43f aeb7 	beq.w	8001906 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001b98:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	6a2b      	ldr	r3, [r5, #32]
 8001b9c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f47f ae71 	bne.w	8001888 <HAL_RCC_OscConfig+0x8>
 8001ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001bac:	1ac0      	subs	r0, r0, r3
 8001bae:	bf18      	it	ne
 8001bb0:	2001      	movne	r0, #1
 8001bb2:	e6a8      	b.n	8001906 <HAL_RCC_OscConfig+0x86>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	42420060 	.word	0x42420060

08001bbc <HAL_RCC_GetSysClockFreq>:
{
 8001bbc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001bc0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc2:	ac02      	add	r4, sp, #8
 8001bc4:	f103 0510 	add.w	r5, r3, #16
 8001bc8:	4622      	mov	r2, r4
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	c203      	stmia	r2!, {r0, r1}
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	d1f7      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f88d 3004 	strb.w	r3, [sp, #4]
 8001bde:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001be0:	4911      	ldr	r1, [pc, #68]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001be6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001be8:	f003 020c 	and.w	r2, r3, #12
 8001bec:	2a08      	cmp	r2, #8
 8001bee:	d117      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001bf4:	a806      	add	r0, sp, #24
 8001bf6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bfa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bfe:	d50c      	bpl.n	8001c1a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c00:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c02:	480a      	ldr	r0, [pc, #40]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c04:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c08:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0a:	aa06      	add	r2, sp, #24
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c12:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c16:	b007      	add	sp, #28
 8001c18:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x74>)
 8001c1c:	4350      	muls	r0, r2
 8001c1e:	e7fa      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001c22:	e7f8      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x5a>
 8001c24:	0800561c 	.word	0x0800561c
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	003d0900 	.word	0x003d0900

08001c34 <HAL_RCC_ClockConfig>:
{
 8001c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c38:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	b910      	cbnz	r0, 8001c44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
 8001c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <HAL_RCC_ClockConfig+0x128>)
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d329      	bcc.n	8001ca4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	6821      	ldr	r1, [r4, #0]
 8001c52:	078e      	lsls	r6, r1, #30
 8001c54:	d431      	bmi.n	8001cba <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	07ca      	lsls	r2, r1, #31
 8001c58:	d444      	bmi.n	8001ce4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <HAL_RCC_ClockConfig+0x128>)
 8001c5c:	6813      	ldr	r3, [r2, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	429d      	cmp	r5, r3
 8001c64:	d367      	bcc.n	8001d36 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	6822      	ldr	r2, [r4, #0]
 8001c68:	4d3d      	ldr	r5, [pc, #244]	; (8001d60 <HAL_RCC_ClockConfig+0x12c>)
 8001c6a:	f012 0f04 	tst.w	r2, #4
 8001c6e:	d16e      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	0713      	lsls	r3, r2, #28
 8001c72:	d506      	bpl.n	8001c82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c74:	686b      	ldr	r3, [r5, #4]
 8001c76:	6922      	ldr	r2, [r4, #16]
 8001c78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c80:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f7ff ff9b 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001c86:	686b      	ldr	r3, [r5, #4]
 8001c88:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <HAL_RCC_ClockConfig+0x130>)
 8001c8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	40d8      	lsrs	r0, r3
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_ClockConfig+0x134>)
 8001c94:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_ClockConfig+0x138>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f7fe fa57 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f023 0307 	bic.w	r3, r3, #7
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4299      	cmp	r1, r3
 8001cb6:	d1c2      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xa>
 8001cb8:	e7ca      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1c>
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	bf1e      	ittt	ne
 8001cc2:	685a      	ldrne	r2, [r3, #4]
 8001cc4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001cc8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	bf42      	ittt	mi
 8001cce:	685a      	ldrmi	r2, [r3, #4]
 8001cd0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001cd4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68a0      	ldr	r0, [r4, #8]
 8001cda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cde:	4302      	orrs	r2, r0
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	e7b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce4:	6862      	ldr	r2, [r4, #4]
 8001ce6:	4e1e      	ldr	r6, [pc, #120]	; (8001d60 <HAL_RCC_ClockConfig+0x12c>)
 8001ce8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	d11b      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	d0a4      	beq.n	8001c3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d02:	f7fe fa65 	bl	80001d0 <HAL_GetTick>
 8001d06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d08:	6873      	ldr	r3, [r6, #4]
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d14:	d0a1      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7fe fa5b 	bl	80001d0 <HAL_GetTick>
 8001d1a:	1bc0      	subs	r0, r0, r7
 8001d1c:	4540      	cmp	r0, r8
 8001d1e:	d9f3      	bls.n	8001d08 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
}
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	2a02      	cmp	r2, #2
 8001d28:	d102      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d2e:	e7e0      	b.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	f013 0f02 	tst.w	r3, #2
 8001d34:	e7dd      	b.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	f023 0307 	bic.w	r3, r3, #7
 8001d3c:	432b      	orrs	r3, r5
 8001d3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	429d      	cmp	r5, r3
 8001d48:	f47f af79 	bne.w	8001c3e <HAL_RCC_ClockConfig+0xa>
 8001d4c:	e78b      	b.n	8001c66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4e:	686b      	ldr	r3, [r5, #4]
 8001d50:	68e1      	ldr	r1, [r4, #12]
 8001d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d56:	430b      	orrs	r3, r1
 8001d58:	606b      	str	r3, [r5, #4]
 8001d5a:	e789      	b.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08005652 	.word	0x08005652
 8001d68:	20000438 	.word	0x20000438
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d7e:	6810      	ldr	r0, [r2, #0]
}
 8001d80:	40d8      	lsrs	r0, r3
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08005662 	.word	0x08005662
 8001d8c:	20000438 	.word	0x20000438

08001d90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d9e:	6810      	ldr	r0, [r2, #0]
}
 8001da0:	40d8      	lsrs	r0, r3
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08005662 	.word	0x08005662
 8001dac:	20000438 	.word	0x20000438

08001db0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db0:	6a03      	ldr	r3, [r0, #32]
{
 8001db2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dbc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dbe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dc2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001dc6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dc8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001dce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dd0:	4d0a      	ldr	r5, [pc, #40]	; (8001dfc <TIM_OC1_SetConfig+0x4c>)
 8001dd2:	42a8      	cmp	r0, r5
 8001dd4:	d10b      	bne.n	8001dee <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dd6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dd8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ddc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dde:	698e      	ldr	r6, [r1, #24]
 8001de0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001de8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dec:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001df0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001df2:	684a      	ldr	r2, [r1, #4]
 8001df4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001df6:	6203      	str	r3, [r0, #32]
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e00:	6a03      	ldr	r3, [r0, #32]
{
 8001e02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e12:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e16:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e18:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e22:	4d0b      	ldr	r5, [pc, #44]	; (8001e50 <TIM_OC3_SetConfig+0x50>)
 8001e24:	42a8      	cmp	r0, r5
 8001e26:	d10d      	bne.n	8001e44 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e28:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e32:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e36:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e3a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e40:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e48:	684a      	ldr	r2, [r1, #4]
 8001e4a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e4c:	6203      	str	r3, [r0, #32]
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	40012c00 	.word	0x40012c00

08001e54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e54:	6a03      	ldr	r3, [r0, #32]
{
 8001e56:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e62:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e74:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e78:	4d06      	ldr	r5, [pc, #24]	; (8001e94 <TIM_OC4_SetConfig+0x40>)
 8001e7a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e7c:	bf02      	ittt	eq
 8001e7e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e80:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e84:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e8a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e8c:	684a      	ldr	r2, [r1, #4]
 8001e8e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e90:	6203      	str	r3, [r0, #32]
 8001e92:	bd30      	pop	{r4, r5, pc}
 8001e94:	40012c00 	.word	0x40012c00

08001e98 <HAL_TIM_PWM_MspInit>:
 8001e98:	4770      	bx	lr

08001e9a <HAL_TIM_PeriodElapsedCallback>:
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_OC_DelayElapsedCallback>:
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_IC_CaptureCallback>:
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_TriggerCallback>:
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea4:	6803      	ldr	r3, [r0, #0]
{
 8001ea6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea8:	691a      	ldr	r2, [r3, #16]
{
 8001eaa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eac:	0791      	lsls	r1, r2, #30
 8001eae:	d50e      	bpl.n	8001ece <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	0792      	lsls	r2, r2, #30
 8001eb4:	d50b      	bpl.n	8001ece <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb6:	f06f 0202 	mvn.w	r2, #2
 8001eba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ebc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec2:	079b      	lsls	r3, r3, #30
 8001ec4:	d077      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	f7ff ffea 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	0750      	lsls	r0, r2, #29
 8001ed4:	d510      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	0751      	lsls	r1, r2, #29
 8001eda:	d50d      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001eec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eee:	d068      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	f7ff ffd5 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	0712      	lsls	r2, r2, #28
 8001efe:	d50f      	bpl.n	8001f20 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	0710      	lsls	r0, r2, #28
 8001f04:	d50c      	bpl.n	8001f20 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f06:	f06f 0208 	mvn.w	r2, #8
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f12:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f16:	d05a      	beq.n	8001fce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f18:	f7ff ffc1 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	06d2      	lsls	r2, r2, #27
 8001f26:	d510      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	06d0      	lsls	r0, r2, #27
 8001f2c:	d50d      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2e:	f06f 0210 	mvn.w	r2, #16
 8001f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f34:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f40:	d04b      	beq.n	8001fda <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	f7ff ffac 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	2300      	movs	r3, #0
 8001f48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	07d1      	lsls	r1, r2, #31
 8001f50:	d508      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	07d2      	lsls	r2, r2, #31
 8001f56:	d505      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f60:	f7ff ff9b 	bl	8001e9a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	0610      	lsls	r0, r2, #24
 8001f6a:	d508      	bpl.n	8001f7e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	0611      	lsls	r1, r2, #24
 8001f70:	d505      	bpl.n	8001f7e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f7a:	f000 f9ec 	bl	8002356 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	0652      	lsls	r2, r2, #25
 8001f84:	d508      	bpl.n	8001f98 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	0650      	lsls	r0, r2, #25
 8001f8a:	d505      	bpl.n	8001f98 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f94:	f7ff ff85 	bl	8001ea2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	0691      	lsls	r1, r2, #26
 8001f9e:	d522      	bpl.n	8001fe6 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	0692      	lsls	r2, r2, #26
 8001fa4:	d51f      	bpl.n	8001fe6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001faa:	4620      	mov	r0, r4
}
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001fb2:	f000 b9cf 	b.w	8002354 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	f7ff ff71 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7ff ff70 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fc0:	e783      	b.n	8001eca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	f7ff ff6b 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff ff6a 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fcc:	e792      	b.n	8001ef4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	f7ff ff65 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff ff64 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd8:	e7a0      	b.n	8001f1c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	f7ff ff5f 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff ff5e 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fe4:	e7af      	b.n	8001f46 <HAL_TIM_IRQHandler+0xa2>
 8001fe6:	bd10      	pop	{r4, pc}

08001fe8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001fea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	4290      	cmp	r0, r2
 8001fee:	d00a      	beq.n	8002006 <TIM_Base_SetConfig+0x1e>
 8001ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0x1e>
 8001ff6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0x1e>
 8001ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002002:	4290      	cmp	r0, r2
 8002004:	d115      	bne.n	8002032 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002006:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800200c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200e:	4a11      	ldr	r2, [pc, #68]	; (8002054 <TIM_Base_SetConfig+0x6c>)
 8002010:	4290      	cmp	r0, r2
 8002012:	d00a      	beq.n	800202a <TIM_Base_SetConfig+0x42>
 8002014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x42>
 800201a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800201e:	4290      	cmp	r0, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x42>
 8002022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002026:	4290      	cmp	r0, r2
 8002028:	d103      	bne.n	8002032 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800202c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002030:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002032:	694a      	ldr	r2, [r1, #20]
 8002034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002038:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800203a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800203c:	688b      	ldr	r3, [r1, #8]
 800203e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002040:	680b      	ldr	r3, [r1, #0]
 8002042:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <TIM_Base_SetConfig+0x6c>)
 8002046:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002048:	bf04      	itt	eq
 800204a:	690b      	ldreq	r3, [r1, #16]
 800204c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800204e:	2301      	movs	r3, #1
 8002050:	6143      	str	r3, [r0, #20]
 8002052:	4770      	bx	lr
 8002054:	40012c00 	.word	0x40012c00

08002058 <HAL_TIM_Base_Init>:
{
 8002058:	b510      	push	{r4, lr}
  if (htim == NULL)
 800205a:	4604      	mov	r4, r0
 800205c:	b1a0      	cbz	r0, 8002088 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800205e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002066:	b91b      	cbnz	r3, 8002070 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002068:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800206c:	f003 f906 	bl	800527c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002072:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002078:	1d21      	adds	r1, r4, #4
 800207a:	f7ff ffb5 	bl	8001fe8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800207e:	2301      	movs	r3, #1
  return HAL_OK;
 8002080:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
}
 800208a:	bd10      	pop	{r4, pc}

0800208c <HAL_TIM_PWM_Init>:
{
 800208c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800208e:	4604      	mov	r4, r0
 8002090:	b1a0      	cbz	r0, 80020bc <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209a:	b91b      	cbnz	r3, 80020a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800209c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80020a0:	f7ff fefa 	bl	8001e98 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	1d21      	adds	r1, r4, #4
 80020ae:	f7ff ff9b 	bl	8001fe8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020b2:	2301      	movs	r3, #1
  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
}
 80020be:	bd10      	pop	{r4, pc}

080020c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c0:	6a03      	ldr	r3, [r0, #32]
{
 80020c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c4:	f023 0310 	bic.w	r3, r3, #16
 80020c8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80020cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80020dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020e4:	4d0b      	ldr	r5, [pc, #44]	; (8002114 <TIM_OC2_SetConfig+0x54>)
 80020e6:	42a8      	cmp	r0, r5
 80020e8:	d10d      	bne.n	8002106 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80020ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020f4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020f6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020f8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020fc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002102:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002106:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002108:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800210a:	684a      	ldr	r2, [r1, #4]
 800210c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800210e:	6203      	str	r3, [r0, #32]
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	bf00      	nop
 8002114:	40012c00 	.word	0x40012c00

08002118 <HAL_TIM_PWM_ConfigChannel>:
{
 8002118:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800211a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800211e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002120:	2b01      	cmp	r3, #1
 8002122:	f04f 0002 	mov.w	r0, #2
 8002126:	d025      	beq.n	8002174 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002128:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800212a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800212e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002132:	2a0c      	cmp	r2, #12
 8002134:	d818      	bhi.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002136:	e8df f002 	tbb	[pc, r2]
 800213a:	1707      	.short	0x1707
 800213c:	171e1717 	.word	0x171e1717
 8002140:	172f1717 	.word	0x172f1717
 8002144:	1717      	.short	0x1717
 8002146:	40          	.byte	0x40
 8002147:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002148:	6820      	ldr	r0, [r4, #0]
 800214a:	f7ff fe31 	bl	8001db0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800214e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002150:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	f042 0208 	orr.w	r2, r2, #8
 8002158:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	f022 0204 	bic.w	r2, r2, #4
 8002160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002166:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002168:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800216a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800216c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002170:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002174:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002176:	6820      	ldr	r0, [r4, #0]
 8002178:	f7ff ffa2 	bl	80020c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800217c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800217e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002196:	e7e6      	b.n	8002166 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	f7ff fe31 	bl	8001e00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800219e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	f042 0208 	orr.w	r2, r2, #8
 80021a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	f022 0204 	bic.w	r2, r2, #4
 80021b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021b6:	61da      	str	r2, [r3, #28]
      break;
 80021b8:	e7d6      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	f7ff fe4a 	bl	8001e54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021da:	e7ec      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080021dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80021ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ec:	6083      	str	r3, [r0, #8]
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80021f6:	2b01      	cmp	r3, #1
{
 80021f8:	4604      	mov	r4, r0
 80021fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80021fe:	d019      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0x44>
 8002200:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002202:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002206:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800220c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002216:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002218:	680b      	ldr	r3, [r1, #0]
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d065      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0xfa>
 800221e:	d815      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x5c>
 8002220:	2b10      	cmp	r3, #16
 8002222:	d00c      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x4e>
 8002224:	d807      	bhi.n	8002236 <HAL_TIM_ConfigClockSource+0x46>
 8002226:	b153      	cbz	r3, 800223e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002228:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800222a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800222c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002230:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002234:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002236:	2b20      	cmp	r3, #32
 8002238:	d001      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x4e>
 800223a:	2b30      	cmp	r3, #48	; 0x30
 800223c:	d1f4      	bne.n	8002228 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800223e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002240:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002244:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002248:	4313      	orrs	r3, r2
 800224a:	e01a      	b.n	8002282 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800224c:	2b60      	cmp	r3, #96	; 0x60
 800224e:	d034      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0xca>
 8002250:	d819      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x96>
 8002252:	2b50      	cmp	r3, #80	; 0x50
 8002254:	d1e8      	bne.n	8002228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800225a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800225c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800225e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002262:	f025 0501 	bic.w	r5, r5, #1
 8002266:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002268:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800226a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800226c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002270:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002274:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002276:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002278:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800227e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002282:	6083      	str	r3, [r0, #8]
 8002284:	e7d0      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002286:	2b70      	cmp	r3, #112	; 0x70
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0xb4>
 800228a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228e:	d1cb      	bne.n	8002228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002290:	68cb      	ldr	r3, [r1, #12]
 8002292:	684a      	ldr	r2, [r1, #4]
 8002294:	6889      	ldr	r1, [r1, #8]
 8002296:	f7ff ffa1 	bl	80021dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	6893      	ldr	r3, [r2, #8]
 800229e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a2:	e008      	b.n	80022b6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80022a4:	68cb      	ldr	r3, [r1, #12]
 80022a6:	684a      	ldr	r2, [r1, #4]
 80022a8:	6889      	ldr	r1, [r1, #8]
 80022aa:	f7ff ff97 	bl	80021dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022b6:	6093      	str	r3, [r2, #8]
      break;
 80022b8:	e7b6      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ba:	684d      	ldr	r5, [r1, #4]
 80022bc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022be:	6a01      	ldr	r1, [r0, #32]
 80022c0:	f021 0110 	bic.w	r1, r1, #16
 80022c4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022c8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80022d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022d6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80022da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022dc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80022de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80022e8:	e7cb      	b.n	8002282 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	684a      	ldr	r2, [r1, #4]
 80022ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022ee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022f2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f6:	f025 0501 	bic.w	r5, r5, #1
 80022fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80022fe:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002304:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002308:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800230a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800230c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002312:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002316:	e7b4      	b.n	8002282 <HAL_TIM_ConfigClockSource+0x92>

08002318 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002318:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800231c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800231e:	2b01      	cmp	r3, #1
 8002320:	f04f 0302 	mov.w	r3, #2
 8002324:	d014      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002326:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800232c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800232e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002330:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002332:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002334:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800233c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800233e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002340:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002342:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002344:	2301      	movs	r3, #1
 8002346:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800234a:	2300      	movs	r3, #0
 800234c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002350:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002352:	bd30      	pop	{r4, r5, pc}

08002354 <HAL_TIMEx_CommutCallback>:
 8002354:	4770      	bx	lr

08002356 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002356:	4770      	bx	lr

08002358 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002360:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800236a:	2320      	movs	r3, #32
 800236c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002370:	4770      	bx	lr
	...

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	68c1      	ldr	r1, [r0, #12]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	2419      	movs	r4, #25
 8002380:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002384:	430a      	orrs	r2, r1
 8002386:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002388:	6882      	ldr	r2, [r0, #8]
 800238a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800238c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238e:	4302      	orrs	r2, r0
 8002390:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002392:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002396:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800239a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	69a9      	ldr	r1, [r5, #24]
 80023a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023a8:	430a      	orrs	r2, r1
 80023aa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <UART_SetConfig+0x70>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d114      	bne.n	80023dc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023b2:	f7ff fced 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023b6:	4360      	muls	r0, r4
 80023b8:	686c      	ldr	r4, [r5, #4]
 80023ba:	2264      	movs	r2, #100	; 0x64
 80023bc:	00a4      	lsls	r4, r4, #2
 80023be:	fbb0 f0f4 	udiv	r0, r0, r4
 80023c2:	fbb0 f4f2 	udiv	r4, r0, r2
 80023c6:	fb02 0314 	mls	r3, r2, r4, r0
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d2:	6829      	ldr	r1, [r5, #0]
 80023d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80023d8:	608b      	str	r3, [r1, #8]
 80023da:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fcc8 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 80023e0:	e7e9      	b.n	80023b6 <UART_SetConfig+0x42>
 80023e2:	bf00      	nop
 80023e4:	40013800 	.word	0x40013800

080023e8 <HAL_UART_Init>:
{
 80023e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023ea:	4604      	mov	r4, r0
 80023ec:	b340      	cbz	r0, 8002440 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023f6:	b91b      	cbnz	r3, 8002400 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023fc:	f003 f820 	bl	8005440 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002402:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002408:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800240a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800240c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002410:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002412:	f7ff ffaf 	bl	8002374 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002416:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002428:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002430:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002432:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002436:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800243a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800243e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <HAL_UART_TxCpltCallback>:
 8002444:	4770      	bx	lr

08002446 <HAL_UART_RxCpltCallback>:
 8002446:	4770      	bx	lr

08002448 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002448:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800244c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800244e:	2b22      	cmp	r3, #34	; 0x22
 8002450:	d136      	bne.n	80024c0 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002452:	6883      	ldr	r3, [r0, #8]
 8002454:	6901      	ldr	r1, [r0, #16]
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	6802      	ldr	r2, [r0, #0]
 800245c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800245e:	d123      	bne.n	80024a8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002460:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002462:	b9e9      	cbnz	r1, 80024a0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002468:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800246c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800246e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002470:	3c01      	subs	r4, #1
 8002472:	b2a4      	uxth	r4, r4
 8002474:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002476:	b98c      	cbnz	r4, 800249c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002488:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002492:	2320      	movs	r3, #32
 8002494:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002498:	f7ff ffd5 	bl	8002446 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800249c:	2000      	movs	r0, #0
}
 800249e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f823 2b01 	strh.w	r2, [r3], #1
 80024a6:	e7e1      	b.n	800246c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024a8:	b921      	cbnz	r1, 80024b4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	6852      	ldr	r2, [r2, #4]
 80024ae:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e7dc      	b.n	800246e <UART_Receive_IT+0x26>
 80024b4:	6852      	ldr	r2, [r2, #4]
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	6281      	str	r1, [r0, #40]	; 0x28
 80024ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024be:	e7f7      	b.n	80024b0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80024c0:	2002      	movs	r0, #2
 80024c2:	bd10      	pop	{r4, pc}

080024c4 <HAL_UART_ErrorCallback>:
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c8:	6803      	ldr	r3, [r0, #0]
{
 80024ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024cc:	681a      	ldr	r2, [r3, #0]
{
 80024ce:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80024d0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80024d6:	d107      	bne.n	80024e8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d8:	0696      	lsls	r6, r2, #26
 80024da:	d55a      	bpl.n	8002592 <HAL_UART_IRQHandler+0xca>
 80024dc:	068d      	lsls	r5, r1, #26
 80024de:	d558      	bpl.n	8002592 <HAL_UART_IRQHandler+0xca>
}
 80024e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80024e4:	f7ff bfb0 	b.w	8002448 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024e8:	f015 0501 	ands.w	r5, r5, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_UART_IRQHandler+0x2c>
 80024ee:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024f2:	d04e      	beq.n	8002592 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024f4:	07d3      	lsls	r3, r2, #31
 80024f6:	d505      	bpl.n	8002504 <HAL_UART_IRQHandler+0x3c>
 80024f8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024fa:	bf42      	ittt	mi
 80024fc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80024fe:	f043 0301 	orrmi.w	r3, r3, #1
 8002502:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002504:	0750      	lsls	r0, r2, #29
 8002506:	d504      	bpl.n	8002512 <HAL_UART_IRQHandler+0x4a>
 8002508:	b11d      	cbz	r5, 8002512 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800250a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002512:	0793      	lsls	r3, r2, #30
 8002514:	d504      	bpl.n	8002520 <HAL_UART_IRQHandler+0x58>
 8002516:	b11d      	cbz	r5, 8002520 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002520:	0716      	lsls	r6, r2, #28
 8002522:	d504      	bpl.n	800252e <HAL_UART_IRQHandler+0x66>
 8002524:	b11d      	cbz	r5, 800252e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800252e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d066      	beq.n	8002602 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002534:	0695      	lsls	r5, r2, #26
 8002536:	d504      	bpl.n	8002542 <HAL_UART_IRQHandler+0x7a>
 8002538:	0688      	lsls	r0, r1, #26
 800253a:	d502      	bpl.n	8002542 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800253c:	4620      	mov	r0, r4
 800253e:	f7ff ff83 	bl	8002448 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002542:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002544:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002546:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800254a:	0711      	lsls	r1, r2, #28
 800254c:	d402      	bmi.n	8002554 <HAL_UART_IRQHandler+0x8c>
 800254e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002552:	d01a      	beq.n	800258a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002554:	f7ff ff00 	bl	8002358 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	0652      	lsls	r2, r2, #25
 800255e:	d510      	bpl.n	8002582 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002560:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002562:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002568:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800256a:	b150      	cbz	r0, 8002582 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_UART_IRQHandler+0x13c>)
 800256e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002570:	f7fd feb0 	bl	80002d4 <HAL_DMA_Abort_IT>
 8002574:	2800      	cmp	r0, #0
 8002576:	d044      	beq.n	8002602 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002578:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800257a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800257e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002580:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff ff9e 	bl	80024c4 <HAL_UART_ErrorCallback>
 8002588:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800258a:	f7ff ff9b 	bl	80024c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002590:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002592:	0616      	lsls	r6, r2, #24
 8002594:	d527      	bpl.n	80025e6 <HAL_UART_IRQHandler+0x11e>
 8002596:	060d      	lsls	r5, r1, #24
 8002598:	d525      	bpl.n	80025e6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800259a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800259e:	2a21      	cmp	r2, #33	; 0x21
 80025a0:	d12f      	bne.n	8002602 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025a2:	68a2      	ldr	r2, [r4, #8]
 80025a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025a8:	6a22      	ldr	r2, [r4, #32]
 80025aa:	d117      	bne.n	80025dc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025ac:	8811      	ldrh	r1, [r2, #0]
 80025ae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80025b2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025b4:	6921      	ldr	r1, [r4, #16]
 80025b6:	b979      	cbnz	r1, 80025d8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80025b8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80025ba:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80025bc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80025be:	3a01      	subs	r2, #1
 80025c0:	b292      	uxth	r2, r2
 80025c2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80025c4:	b9ea      	cbnz	r2, 8002602 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025cc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80025d8:	3201      	adds	r2, #1
 80025da:	e7ee      	b.n	80025ba <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025dc:	1c51      	adds	r1, r2, #1
 80025de:	6221      	str	r1, [r4, #32]
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	e7ea      	b.n	80025bc <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025e6:	0650      	lsls	r0, r2, #25
 80025e8:	d50b      	bpl.n	8002602 <HAL_UART_IRQHandler+0x13a>
 80025ea:	064a      	lsls	r2, r1, #25
 80025ec:	d509      	bpl.n	8002602 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ee:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80025f0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025f8:	2320      	movs	r3, #32
 80025fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80025fe:	f7ff ff21 	bl	8002444 <HAL_UART_TxCpltCallback>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	08002609 	.word	0x08002609

08002608 <UART_DMAAbortOnError>:
{
 8002608:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800260a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800260e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002610:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002612:	f7ff ff57 	bl	80024c4 <HAL_UART_ErrorCallback>
 8002616:	bd08      	pop	{r3, pc}

08002618 <VL53L0X_ResetDevice>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev)
{
 8002618:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800261a:	2200      	movs	r2, #0
 800261c:	21bf      	movs	r1, #191	; 0xbf
{
 800261e:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 8002620:	f002 fafe 	bl	8004c20 <VL53L0X_WrByte>
		0x00);

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 8002624:	b1e8      	cbz	r0, 8002662 <VL53L0X_ResetDevice+0x4a>
			Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte != 0x00);
	}

	VL53L0X_PollingDelay(Dev);
 8002626:	4620      	mov	r0, r4
 8002628:	f002 fb8e 	bl	8004d48 <VL53L0X_PollingDelay>

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N,
 800262c:	2201      	movs	r2, #1
 800262e:	21bf      	movs	r1, #191	; 0xbf
 8002630:	4620      	mov	r0, r4
 8002632:	f002 faf5 	bl	8004c20 <VL53L0X_WrByte>
		0x01);

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 8002636:	4605      	mov	r5, r0
 8002638:	b950      	cbnz	r0, 8002650 <VL53L0X_ResetDevice+0x38>
		do {
			Status = VL53L0X_RdByte(Dev,
 800263a:	f10d 0207 	add.w	r2, sp, #7
 800263e:	21c0      	movs	r1, #192	; 0xc0
 8002640:	4620      	mov	r0, r4
 8002642:	f002 fb0f 	bl	8004c64 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Byte);
		} while (Byte == 0x00);
 8002646:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev,
 800264a:	4605      	mov	r5, r0
		} while (Byte == 0x00);
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f4      	beq.n	800263a <VL53L0X_ResetDevice+0x22>
	}

	VL53L0X_PollingDelay(Dev);
 8002650:	4620      	mov	r0, r4
 8002652:	f002 fb79 	bl	8004d48 <VL53L0X_PollingDelay>

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 8002656:	b90d      	cbnz	r5, 800265c <VL53L0X_ResetDevice+0x44>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 8002658:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
}
 800265c:	4628      	mov	r0, r5
 800265e:	b003      	add	sp, #12
 8002660:	bd30      	pop	{r4, r5, pc}
			Status = VL53L0X_RdByte(Dev,
 8002662:	f10d 0207 	add.w	r2, sp, #7
 8002666:	21c0      	movs	r1, #192	; 0xc0
 8002668:	4620      	mov	r0, r4
 800266a:	f002 fafb 	bl	8004c64 <VL53L0X_RdByte>
		} while (Byte != 0x00);
 800266e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f5      	bne.n	8002662 <VL53L0X_ResetDevice+0x4a>
 8002676:	e7d6      	b.n	8002626 <VL53L0X_ResetDevice+0xe>

08002678 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002678:	2915      	cmp	r1, #21
 800267a:	d807      	bhi.n	800268c <VL53L0X_SetDeviceMode+0x14>
 800267c:	2201      	movs	r2, #1
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <VL53L0X_SetDeviceMode+0x1c>)
 8002680:	408a      	lsls	r2, r1
 8002682:	4013      	ands	r3, r2
 8002684:	b113      	cbz	r3, 800268c <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002686:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002688:	2000      	movs	r0, #0
		break;
 800268a:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800268c:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	0030000b 	.word	0x0030000b

08002698 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002698:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800269a:	460a      	mov	r2, r1
{
 800269c:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800269e:	2109      	movs	r1, #9
 80026a0:	f002 fae0 	bl	8004c64 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 80026a4:	b918      	cbnz	r0, 80026ae <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 80026a6:	7823      	ldrb	r3, [r4, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80026b0:	f001 beaf 	b.w	8004412 <VL53L0X_set_measurement_timing_budget_micro_seconds>

080026b4 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80026b4:	f001 bd89 	b.w	80041ca <VL53L0X_set_vcsel_pulse_period>

080026b8 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80026b8:	f001 be92 	b.w	80043e0 <VL53L0X_get_vcsel_pulse_period>

080026bc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80026bc:	2300      	movs	r3, #0
{
 80026be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026c0:	4617      	mov	r7, r2
	uint8_t SequenceConfig = 0;
 80026c2:	aa02      	add	r2, sp, #8
{
 80026c4:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80026c6:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80026ca:	2101      	movs	r1, #1
{
 80026cc:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80026ce:	f002 fac9 	bl	8004c64 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 80026d2:	4605      	mov	r5, r0
 80026d4:	b9d8      	cbnz	r0, 800270e <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 80026d6:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 80026d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 80026dc:	d126      	bne.n	800272c <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80026de:	2c04      	cmp	r4, #4
 80026e0:	d83a      	bhi.n	8002758 <VL53L0X_SetSequenceStepEnable+0x9c>
 80026e2:	e8df f004 	tbb	[pc, r4]
 80026e6:	1703      	.short	0x1703
 80026e8:	1d1a      	.short	0x1d1a
 80026ea:	20          	.byte	0x20
 80026eb:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80026ec:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	d00c      	beq.n	800270e <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80026f4:	4622      	mov	r2, r4
 80026f6:	2101      	movs	r1, #1
 80026f8:	4630      	mov	r0, r6
 80026fa:	f002 fa91 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80026fe:	4605      	mov	r5, r0
 8002700:	b928      	cbnz	r0, 800270e <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002702:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002706:	6971      	ldr	r1, [r6, #20]
 8002708:	4630      	mov	r0, r6
 800270a:	f7ff ffd1 	bl	80026b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800270e:	4628      	mov	r0, r5
 8002710:	b003      	add	sp, #12
 8002712:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8002714:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8002718:	e7ea      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 800271a:	f043 0404 	orr.w	r4, r3, #4
				break;
 800271e:	e7e7      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 8002720:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8002724:	e7e4      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 8002726:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 800272a:	e7e1      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 800272c:	2c04      	cmp	r4, #4
 800272e:	d813      	bhi.n	8002758 <VL53L0X_SetSequenceStepEnable+0x9c>
 8002730:	e8df f004 	tbb	[pc, r4]
 8002734:	0c090603 	.word	0x0c090603
 8002738:	0f          	.byte	0x0f
 8002739:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 800273a:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 800273e:	e7d7      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 8002740:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8002744:	e7d4      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 8002746:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 800274a:	e7d1      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 800274c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8002750:	e7ce      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 8002752:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 8002756:	e7cb      	b.n	80026f0 <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002758:	f06f 0503 	mvn.w	r5, #3
 800275c:	e7d7      	b.n	800270e <VL53L0X_SetSequenceStepEnable+0x52>

0800275e <VL53L0X_GetSequenceStepEnables>:

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 800275e:	2300      	movs	r3, #0
{
 8002760:	b513      	push	{r0, r1, r4, lr}
	uint8_t SequenceConfig = 0;
 8002762:	aa02      	add	r2, sp, #8
{
 8002764:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8002766:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800276a:	2101      	movs	r1, #1
 800276c:	f002 fa7a 	bl	8004c64 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002770:	b978      	cbnz	r0, 8002792 <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 8002772:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002776:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800277a:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800277c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002780:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002782:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8002786:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002788:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800278c:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800278e:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002790:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002792:	b002      	add	sp, #8
 8002794:	bd10      	pop	{r4, pc}

08002796 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002796:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002798:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800279a:	f10d 0202 	add.w	r2, sp, #2
 800279e:	21f8      	movs	r1, #248	; 0xf8
{
 80027a0:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80027a2:	f002 fa8b 	bl	8004cbc <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80027a6:	b970      	cbnz	r0, 80027c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 80027a8:	aa01      	add	r2, sp, #4
 80027aa:	2104      	movs	r1, #4
 80027ac:	4620      	mov	r0, r4
 80027ae:	f002 faa5 	bl	8004cfc <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80027b2:	b940      	cbnz	r0, 80027c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 80027b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80027b8:	b11a      	cbz	r2, 80027c2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80027c0:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80027c6:	b003      	add	sp, #12
 80027c8:	bd30      	pop	{r4, r5, pc}

080027ca <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80027ca:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80027cc:	2000      	movs	r0, #0
	*pXTalkCompensationEnable = Temp8;
 80027ce:	700b      	strb	r3, [r1, #0]
}
 80027d0:	4770      	bx	lr

080027d2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80027d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027d4:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80027d6:	f10d 0206 	add.w	r2, sp, #6
 80027da:	2120      	movs	r1, #32
{
 80027dc:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 80027de:	f002 fa6d 	bl	8004cbc <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80027e2:	b928      	cbnz	r0, 80027f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 80027e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80027e8:	b923      	cbnz	r3, 80027f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80027ea:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80027ec:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80027ee:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80027f0:	b003      	add	sp, #12
 80027f2:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80027f4:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80027f6:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80027f8:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80027fa:	2301      	movs	r3, #1
 80027fc:	7723      	strb	r3, [r4, #28]
 80027fe:	e7f7      	b.n	80027f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08002800 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002800:	2905      	cmp	r1, #5
{
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	460d      	mov	r5, r1
 8002808:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800280a:	d832      	bhi.n	8002872 <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 800280c:	b3a2      	cbz	r2, 8002878 <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800280e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002814:	2101      	movs	r1, #1
			LimitCheckDisable = 0;
 8002816:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8002818:	1e68      	subs	r0, r5, #1
 800281a:	2804      	cmp	r0, #4
 800281c:	d804      	bhi.n	8002828 <VL53L0X_SetLimitCheckEnable+0x28>
 800281e:	e8df f000 	tbb	[pc, r0]
 8002822:	140b      	.short	0x140b
 8002824:	1a17      	.short	0x1a17
 8002826:	21          	.byte	0x21
 8002827:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002828:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 800282c:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 800282e:	b9e6      	cbnz	r6, 800286a <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002830:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002834:	2000      	movs	r0, #0
 8002836:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 8002838:	f3c2 224f 	ubfx	r2, r2, #9, #16
 800283c:	2144      	movs	r1, #68	; 0x44
 800283e:	4620      	mov	r0, r4
 8002840:	f002 f9fe 	bl	8004c40 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8002844:	2800      	cmp	r0, #0
 8002846:	d0f1      	beq.n	800282c <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002848:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800284a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 800284e:	e7ed      	b.n	800282c <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002850:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 8002854:	e7ea      	b.n	800282c <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 8002856:	22fe      	movs	r2, #254	; 0xfe
 8002858:	005b      	lsls	r3, r3, #1
			Status = VL53L0X_UpdateByte(Dev,
 800285a:	2160      	movs	r1, #96	; 0x60
 800285c:	4620      	mov	r0, r4
 800285e:	f002 fa16 	bl	8004c8e <VL53L0X_UpdateByte>
			break;
 8002862:	e7ef      	b.n	8002844 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	22ef      	movs	r2, #239	; 0xef
 8002868:	e7f7      	b.n	800285a <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800286a:	2301      	movs	r3, #1
 800286c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002870:	e7e0      	b.n	8002834 <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002872:	f06f 0003 	mvn.w	r0, #3
	return Status;
 8002876:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 8002878:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	e7cc      	b.n	8002818 <VL53L0X_SetLimitCheckEnable+0x18>

0800287e <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800287e:	2300      	movs	r3, #0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002880:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002882:	bf8d      	iteet	hi
 8002884:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002888:	1840      	addls	r0, r0, r1
 800288a:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 800288e:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002890:	bf9c      	itt	ls
 8002892:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002894:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002896:	4770      	bx	lr

08002898 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800289a:	1843      	adds	r3, r0, r1
{
 800289c:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800289e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 80028a2:	460e      	mov	r6, r1
 80028a4:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 80028a6:	b918      	cbnz	r0, 80028b0 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80028ac:	6362      	str	r2, [r4, #52]	; 0x34
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80028b0:	2905      	cmp	r1, #5
 80028b2:	d81b      	bhi.n	80028ec <VL53L0X_SetLimitCheckValue+0x54>
 80028b4:	e8df f001 	tbb	[pc, r1]
 80028b8:	14120903 	.word	0x14120903
 80028bc:	1616      	.short	0x1616

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028be:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028c0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80028c4:	6365      	str	r5, [r4, #52]	; 0x34
 80028c6:	2000      	movs	r0, #0
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80028ca:	2144      	movs	r1, #68	; 0x44
 80028cc:	f3c2 224f 	ubfx	r2, r2, #9, #16
			Status = VL53L0X_WrWord(Dev,
 80028d0:	4620      	mov	r0, r4
 80028d2:	f002 f9b5 	bl	8004c40 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d0f2      	beq.n	80028c0 <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80028da:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028dc:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 80028de:	e7ef      	b.n	80028c0 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028e0:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 80028e2:	e7ed      	b.n	80028c0 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 80028e4:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80028e8:	2164      	movs	r1, #100	; 0x64
 80028ea:	e7f1      	b.n	80028d0 <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80028ec:	f06f 0003 	mvn.w	r0, #3
 80028f0:	e7f3      	b.n	80028da <VL53L0X_SetLimitCheckValue+0x42>

080028f2 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80028f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028f4:	4604      	mov	r4, r0
 80028f6:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80028f8:	2905      	cmp	r1, #5
 80028fa:	d82c      	bhi.n	8002956 <VL53L0X_GetLimitCheckValue+0x64>
 80028fc:	e8df f001 	tbb	[pc, r1]
 8002900:	19170703 	.word	0x19170703
 8002904:	1b1b      	.short	0x1b1b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002906:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002908:	602b      	str	r3, [r5, #0]
 800290a:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800290c:	e021      	b.n	8002952 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 800290e:	f10d 0206 	add.w	r2, sp, #6
 8002912:	2144      	movs	r1, #68	; 0x44
 8002914:	f002 f9d2 	bl	8004cbc <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8002918:	b9d8      	cbnz	r0, 8002952 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800291a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 800291e:	0253      	lsls	r3, r2, #9
 8002920:	b19a      	cbz	r2, 800294a <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8002922:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002924:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002926:	2301      	movs	r3, #1
 8002928:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800292c:	e011      	b.n	8002952 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800292e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 8002930:	e7ea      	b.n	8002908 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002932:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 8002934:	e7e8      	b.n	8002908 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8002936:	f10d 0206 	add.w	r2, sp, #6
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	f002 f9be 	bl	8004cbc <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8002940:	b938      	cbnz	r0, 8002952 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	e7de      	b.n	8002908 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800294a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 800294c:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800294e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 8002952:	b003      	add	sp, #12
 8002954:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002956:	f06f 0003 	mvn.w	r0, #3
 800295a:	e7fa      	b.n	8002952 <VL53L0X_GetLimitCheckValue+0x60>

0800295c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800295c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800295e:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002960:	f10d 0207 	add.w	r2, sp, #7
 8002964:	2101      	movs	r1, #1
{
 8002966:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002968:	f002 f97c 	bl	8004c64 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 800296c:	b958      	cbnz	r0, 8002986 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 800296e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002972:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 8002976:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 8002978:	bf4a      	itet	mi
 800297a:	2301      	movmi	r3, #1
		else
			*pWrapAroundCheckEnable = 0x00;
 800297c:	7020      	strbpl	r0, [r4, #0]
			*pWrapAroundCheckEnable = 0x01;
 800297e:	7023      	strbmi	r3, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002980:	7823      	ldrb	r3, [r4, #0]
 8002982:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002986:	b003      	add	sp, #12
 8002988:	bd30      	pop	{r4, r5, pc}

0800298a <VL53L0X_GetDeviceParameters>:
{
 800298a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800298e:	7c03      	ldrb	r3, [r0, #16]
{
 8002990:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002992:	f801 3b08 	strb.w	r3, [r1], #8
{
 8002996:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002998:	f7ff fefd 	bl	8002796 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 800299c:	bb40      	cbnz	r0, 80029f0 <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800299e:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80029a0:	f104 0110 	add.w	r1, r4, #16
 80029a4:	4628      	mov	r0, r5
 80029a6:	f7ff ff14 	bl	80027d2 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 80029aa:	bb08      	cbnz	r0, 80029f0 <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80029ac:	f104 0114 	add.w	r1, r4, #20
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 fc5c 	bl	800326e <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 80029b6:	b9d8      	cbnz	r0, 80029f0 <VL53L0X_GetDeviceParameters+0x66>
 80029b8:	4606      	mov	r6, r0
 80029ba:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80029be:	f105 0928 	add.w	r9, r5, #40	; 0x28
 80029c2:	f104 0818 	add.w	r8, r4, #24
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80029c6:	463a      	mov	r2, r7
 80029c8:	b2b1      	uxth	r1, r6
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7ff ff91 	bl	80028f2 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 80029d0:	b970      	cbnz	r0, 80029f0 <VL53L0X_GetDeviceParameters+0x66>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80029d2:	f819 3b01 	ldrb.w	r3, [r9], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80029d6:	3601      	adds	r6, #1
 80029d8:	2e06      	cmp	r6, #6
		*pLimitCheckEnable = Temp8;
 80029da:	f808 3b01 	strb.w	r3, [r8], #1
 80029de:	f107 0704 	add.w	r7, r7, #4
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80029e2:	d1f0      	bne.n	80029c6 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80029e4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80029e8:	4628      	mov	r0, r5
 80029ea:	f7ff ffb7 	bl	800295c <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80029ee:	b108      	cbz	r0, 80029f4 <VL53L0X_GetDeviceParameters+0x6a>
}
 80029f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80029f4:	1d21      	adds	r1, r4, #4
 80029f6:	4628      	mov	r0, r5
}
 80029f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80029fc:	f001 bd6a 	b.w	80044d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>

08002a00 <VL53L0X_DataInit>:
{
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a02:	2200      	movs	r2, #0
{
 8002a04:	b093      	sub	sp, #76	; 0x4c
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a06:	2188      	movs	r1, #136	; 0x88
{
 8002a08:	4605      	mov	r5, r0
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a0a:	f002 f909 	bl	8004c20 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a12:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002a16:	f44f 72c8 	mov.w	r2, #400	; 0x190
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002a1a:	2300      	movs	r3, #0
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002a1c:	f8a5 2154 	strh.w	r2, [r5, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002a20:	4a57      	ldr	r2, [pc, #348]	; (8002b80 <VL53L0X_DataInit+0x180>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002a22:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002a26:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002a2a:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <VL53L0X_DataInit+0x184>)
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002a2c:	622b      	str	r3, [r5, #32]
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002a2e:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002a32:	a902      	add	r1, sp, #8
 8002a34:	4628      	mov	r0, r5
 8002a36:	f7ff ffa8 	bl	800298a <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b980      	cbnz	r0, 8002a60 <VL53L0X_DataInit+0x60>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002a3e:	f88d 0008 	strb.w	r0, [sp, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002a42:	f88d 0009 	strb.w	r0, [sp, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002a46:	f105 0710 	add.w	r7, r5, #16
 8002a4a:	ae02      	add	r6, sp, #8
 8002a4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a5c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002a60:	2364      	movs	r3, #100	; 0x64
 8002a62:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002a66:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002a6a:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002a6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002a72:	2601      	movs	r6, #1
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002a74:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002a78:	f44f 6320 	mov.w	r3, #2560	; 0xa00
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002a7c:	4632      	mov	r2, r6
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002a7e:	f8a5 313c 	strh.w	r3, [r5, #316]	; 0x13c
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002a82:	2180      	movs	r1, #128	; 0x80
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002a84:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f002 f8c9 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a8e:	4632      	mov	r2, r6
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002a90:	4607      	mov	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a92:	21ff      	movs	r1, #255	; 0xff
 8002a94:	4628      	mov	r0, r5
 8002a96:	f002 f8c3 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002a9a:	2200      	movs	r2, #0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a9c:	4338      	orrs	r0, r7
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002a9e:	4611      	mov	r1, r2
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002aa0:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f002 f8bc 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002aa8:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002aaa:	4304      	orrs	r4, r0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002aac:	f10d 0207 	add.w	r2, sp, #7
 8002ab0:	2191      	movs	r1, #145	; 0x91
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f002 f8d6 	bl	8004c64 <VL53L0X_RdByte>
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002abc:	b264      	sxtb	r4, r4
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002abe:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002ac2:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f002 f8a9 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002ace:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002ad0:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	21ff      	movs	r1, #255	; 0xff
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f002 f8a2 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002adc:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ade:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f002 f89b 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002aea:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002aec:	4320      	orrs	r0, r4
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002aee:	2400      	movs	r4, #0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002af0:	b240      	sxtb	r0, r0
		if (Status == VL53L0X_ERROR_NONE)
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d141      	bne.n	8002b7a <VL53L0X_DataInit+0x17a>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002af6:	b2a1      	uxth	r1, r4
 8002af8:	2201      	movs	r2, #1
 8002afa:	4628      	mov	r0, r5
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002afc:	3401      	adds	r4, #1
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002afe:	f7ff fe7f 	bl	8002800 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002b02:	2c06      	cmp	r4, #6
 8002b04:	d1f5      	bne.n	8002af2 <VL53L0X_DataInit+0xf2>
	if (Status == VL53L0X_ERROR_NONE)
 8002b06:	bbc0      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b08:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b0c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002b10:	4602      	mov	r2, r0
 8002b12:	2104      	movs	r1, #4
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7ff fe73 	bl	8002800 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002b1a:	bb70      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	2105      	movs	r1, #5
 8002b20:	4628      	mov	r0, r5
 8002b22:	f7ff fe6d 	bl	8002800 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b26:	bb40      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b28:	4601      	mov	r1, r0
 8002b2a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f7ff feb2 	bl	8002898 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b34:	bb08      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f7ff feab 	bl	8002898 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b42:	b9d0      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b44:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7ff fea4 	bl	8002898 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b50:	b998      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b52:	4602      	mov	r2, r0
 8002b54:	2103      	movs	r1, #3
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7ff fe9e 	bl	8002898 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002b5c:	b968      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002b5e:	22ff      	movs	r2, #255	; 0xff
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002b60:	2101      	movs	r1, #1
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002b62:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002b66:	4628      	mov	r0, r5
 8002b68:	f002 f85a 	bl	8004c20 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8002b72:	b910      	cbnz	r0, 8002b7a <VL53L0X_DataInit+0x17a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002b74:	2300      	movs	r3, #0
 8002b76:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 8002b7a:	b013      	add	sp, #76	; 0x4c
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	00016b85 	.word	0x00016b85
 8002b84:	000970a4 	.word	0x000970a4

08002b88 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f000 bd91 	b.w	80036b0 <VL53L0X_perform_ref_calibration>

08002b8e <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b92:	b08e      	sub	sp, #56	; 0x38
 8002b94:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002b96:	230c      	movs	r3, #12
 8002b98:	aa04      	add	r2, sp, #16
 8002b9a:	2114      	movs	r1, #20
{
 8002b9c:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002b9e:	f002 f829 	bl	8004bf4 <VL53L0X_ReadMulti>
 8002ba2:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d175      	bne.n	8002c94 <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002ba8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002bac:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002bb0:	f89d 1018 	ldrb.w	r1, [sp, #24]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002bb4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002bb8:	f89d 3019 	ldrb.w	r3, [sp, #25]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002bbc:	f89d 501a 	ldrb.w	r5, [sp, #26]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002bc0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002bc8:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002bca:	f89d 1012 	ldrb.w	r1, [sp, #18]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002bce:	f89d 701b 	ldrb.w	r7, [sp, #27]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002bd2:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002bd6:	75a0      	strb	r0, [r4, #22]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002bd8:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002bdc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002be0:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002be2:	f8b6 5152 	ldrh.w	r5, [r6, #338]	; 0x152
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002be6:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002be8:	b29b      	uxth	r3, r3
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002bea:	6020      	str	r0, [r4, #0]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002bec:	6060      	str	r0, [r4, #4]
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002bee:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002bf0:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002bf2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002bf6:	b2bf      	uxth	r7, r7
		DeviceRangeStatus = localBuffer[0];
 8002bf8:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002bfc:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 8002c00:	d00c      	beq.n	8002c1c <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8002c02:	fb07 f005 	mul.w	r0, r7, r5
 8002c06:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002c0a:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8002c0c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8002c10:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002c14:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8002c16:	2f00      	cmp	r7, #0
 8002c18:	d140      	bne.n	8002c9c <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8002c1a:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8002c1c:	f1be 0f00 	cmp.w	lr, #0
 8002c20:	d046      	beq.n	8002cb0 <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002c22:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8002c24:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002c26:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002c28:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002c2a:	f10d 000f 	add.w	r0, sp, #15
 8002c2e:	9001      	str	r0, [sp, #4]
 8002c30:	9400      	str	r4, [sp, #0]
 8002c32:	4630      	mov	r0, r6
 8002c34:	f001 fe9e 	bl	8004974 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002c38:	4686      	mov	lr, r0
 8002c3a:	bb58      	cbnz	r0, 8002c94 <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002c3c:	f89d c00f 	ldrb.w	ip, [sp, #15]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002c40:	f106 0550 	add.w	r5, r6, #80	; 0x50
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002c44:	f884 c018 	strb.w	ip, [r4, #24]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002c48:	af07      	add	r7, sp, #28
 8002c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002c52:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002c56:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002c5a:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002c5c:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002c60:	68e1      	ldr	r1, [r4, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002c62:	6922      	ldr	r2, [r4, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002c64:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002c68:	6860      	ldr	r0, [r4, #4]
 8002c6a:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 8002c6e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8002c72:	910a      	str	r1, [sp, #40]	; 0x28
 8002c74:	920b      	str	r2, [sp, #44]	; 0x2c
 8002c76:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8002c7a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8002c7e:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 8002c82:	3650      	adds	r6, #80	; 0x50
 8002c84:	ac07      	add	r4, sp, #28
 8002c86:	9008      	str	r0, [sp, #32]
 8002c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c8c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002c90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002c94:	4670      	mov	r0, lr
 8002c96:	b00e      	add	sp, #56	; 0x38
 8002c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 8002c9c:	b2ad      	uxth	r5, r5
 8002c9e:	435d      	muls	r5, r3
 8002ca0:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 8002ca2:	42aa      	cmp	r2, r5
 8002ca4:	d107      	bne.n	8002cb6 <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 8002ca6:	f1be 0f00 	cmp.w	lr, #0
 8002caa:	d10a      	bne.n	8002cc2 <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 8002cac:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002cb0:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e7b8      	b.n	8002c28 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 8002cb6:	b280      	uxth	r0, r0
 8002cb8:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8002cba:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 8002cbc:	fbb0 f0f5 	udiv	r0, r0, r5
 8002cc0:	e7ab      	b.n	8002c1a <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 8002cc2:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8002cc6:	e7ac      	b.n	8002c22 <VL53L0X_GetRangingMeasurementData+0x94>

08002cc8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cca:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002ccc:	210e      	movs	r1, #14
 8002cce:	f10d 0206 	add.w	r2, sp, #6
{
 8002cd2:	461d      	mov	r5, r3
 8002cd4:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002cd6:	f001 fff1 	bl	8004cbc <VL53L0X_RdWord>
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002cda:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <VL53L0X_GetInterruptThresholds+0x3c>)
 8002cdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002ce0:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8002ce4:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002ce6:	b950      	cbnz	r0, 8002cfe <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002ce8:	f10d 0206 	add.w	r2, sp, #6
 8002cec:	210c      	movs	r1, #12
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f001 ffe4 	bl	8004cbc <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002cf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002cf8:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8002cfc:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002cfe:	b003      	add	sp, #12
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	1ffe0000 	.word	0x1ffe0000

08002d08 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8002d08:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002d0a:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
{
 8002d0e:	4606      	mov	r6, r0
	if ((InterruptConfig ==
 8002d10:	3b01      	subs	r3, #1
 8002d12:	2b02      	cmp	r3, #2
{
 8002d14:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8002d16:	d833      	bhi.n	8002d80 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002d18:	ab01      	add	r3, sp, #4
 8002d1a:	466a      	mov	r2, sp
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	f7ff ffd3 	bl	8002cc8 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8002d22:	9b00      	ldr	r3, [sp, #0]
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002d24:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 8002d26:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002d2a:	d803      	bhi.n	8002d34 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8002d2c:	9b01      	ldr	r3, [sp, #4]
 8002d2e:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002d32:	d906      	bls.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8002d34:	b92d      	cbnz	r5, 8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8002d36:	b13c      	cbz	r4, 8002d48 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002d38:	4912      	ldr	r1, [pc, #72]	; (8002d84 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f001 fc2f 	bl	800459e <VL53L0X_load_tuning_settings>
 8002d40:	4605      	mov	r5, r0
}
 8002d42:	4628      	mov	r0, r5
 8002d44:	b002      	add	sp, #8
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002d48:	2204      	movs	r2, #4
 8002d4a:	21ff      	movs	r1, #255	; 0xff
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f001 ff67 	bl	8004c20 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002d52:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002d54:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002d56:	2170      	movs	r1, #112	; 0x70
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f001 ff61 	bl	8004c20 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d5e:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002d60:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d62:	21ff      	movs	r1, #255	; 0xff
 8002d64:	4630      	mov	r0, r6
 8002d66:	f001 ff5b 	bl	8004c20 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002d6a:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d6c:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002d6e:	462a      	mov	r2, r5
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	4630      	mov	r0, r6
 8002d74:	f001 ff54 	bl	8004c20 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d78:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002d7a:	4320      	orrs	r0, r4
 8002d7c:	b245      	sxtb	r5, r0
 8002d7e:	e7e0      	b.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d80:	2500      	movs	r5, #0
 8002d82:	e7de      	b.n	8002d42 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8002d84:	200000fb 	.word	0x200000fb

08002d88 <VL53L0X_StartMeasurement>:
{
 8002d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d8a:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2180      	movs	r1, #128	; 0x80
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002d90:	7c05      	ldrb	r5, [r0, #16]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002d92:	f001 ff45 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d96:	2201      	movs	r2, #1
 8002d98:	21ff      	movs	r1, #255	; 0xff
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f001 ff40 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002da0:	2200      	movs	r2, #0
 8002da2:	4620      	mov	r0, r4
 8002da4:	4611      	mov	r1, r2
 8002da6:	f001 ff3b 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002daa:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
 8002dae:	2191      	movs	r1, #145	; 0x91
 8002db0:	4620      	mov	r0, r4
 8002db2:	f001 ff35 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002db6:	2201      	movs	r2, #1
 8002db8:	2100      	movs	r1, #0
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f001 ff30 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	21ff      	movs	r1, #255	; 0xff
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f001 ff2b 	bl	8004c20 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f001 ff26 	bl	8004c20 <VL53L0X_WrByte>
	switch (DeviceMode) {
 8002dd4:	2d01      	cmp	r5, #1
 8002dd6:	d029      	beq.n	8002e2c <VL53L0X_StartMeasurement+0xa4>
 8002dd8:	d304      	bcc.n	8002de4 <VL53L0X_StartMeasurement+0x5c>
 8002dda:	2d03      	cmp	r5, #3
 8002ddc:	d036      	beq.n	8002e4c <VL53L0X_StartMeasurement+0xc4>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002dde:	f06f 0007 	mvn.w	r0, #7
 8002de2:	e014      	b.n	8002e0e <VL53L0X_StartMeasurement+0x86>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2100      	movs	r1, #0
 8002de8:	4620      	mov	r0, r4
 8002dea:	f001 ff19 	bl	8004c20 <VL53L0X_WrByte>
		Byte = StartStopByte;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8002df4:	b958      	cbnz	r0, 8002e0e <VL53L0X_StartMeasurement+0x86>
 8002df6:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 8002df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
				LoopNb = LoopNb + 1;
 8002dfc:	3501      	adds	r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002dfe:	07db      	lsls	r3, r3, #31
 8002e00:	d50e      	bpl.n	8002e20 <VL53L0X_StartMeasurement+0x98>
				&& (Status == VL53L0X_ERROR_NONE)
 8002e02:	b968      	cbnz	r0, 8002e20 <VL53L0X_StartMeasurement+0x98>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002e04:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8002e08:	d103      	bne.n	8002e12 <VL53L0X_StartMeasurement+0x8a>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002e0a:	f06f 0006 	mvn.w	r0, #6
}
 8002e0e:	b003      	add	sp, #12
 8002e10:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8002e12:	4601      	mov	r1, r0
 8002e14:	f10d 0207 	add.w	r2, sp, #7
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f001 ff23 	bl	8004c64 <VL53L0X_RdByte>
 8002e1e:	e7eb      	b.n	8002df8 <VL53L0X_StartMeasurement+0x70>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002e20:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8002e24:	bf08      	it	eq
 8002e26:	f06f 0006 	mvneq.w	r0, #6
 8002e2a:	e7f0      	b.n	8002e0e <VL53L0X_StartMeasurement+0x86>
		if (Status == VL53L0X_ERROR_NONE)
 8002e2c:	b918      	cbnz	r0, 8002e36 <VL53L0X_StartMeasurement+0xae>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff ff69 	bl	8002d08 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002e36:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f001 fef0 	bl	8004c20 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d1e4      	bne.n	8002e0e <VL53L0X_StartMeasurement+0x86>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002e44:	2304      	movs	r3, #4
 8002e46:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002e4a:	e7e0      	b.n	8002e0e <VL53L0X_StartMeasurement+0x86>
		if (Status == VL53L0X_ERROR_NONE)
 8002e4c:	b918      	cbnz	r0, 8002e56 <VL53L0X_StartMeasurement+0xce>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff ff59 	bl	8002d08 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002e56:	2204      	movs	r2, #4
 8002e58:	e7ee      	b.n	8002e38 <VL53L0X_StartMeasurement+0xb0>

08002e5a <VL53L0X_PerformSingleMeasurement>:
{
 8002e5a:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002e5c:	7c05      	ldrb	r5, [r0, #16]
{
 8002e5e:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002e60:	b125      	cbz	r5, 8002e6c <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 fd73 	bl	800394e <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8002e68:	b128      	cbz	r0, 8002e76 <VL53L0X_PerformSingleMeasurement+0x1c>
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8002e6c:	f7ff ff8c 	bl	8002d88 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d0f6      	beq.n	8002e62 <VL53L0X_PerformSingleMeasurement+0x8>
}
 8002e74:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	d1fc      	bne.n	8002e74 <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002e80:	e7f8      	b.n	8002e74 <VL53L0X_PerformSingleMeasurement+0x1a>

08002e82 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e84:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002e86:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8002e88:	2201      	movs	r2, #1
 8002e8a:	210b      	movs	r1, #11
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	f001 fec7 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002e92:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8002e94:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8002e96:	210b      	movs	r1, #11
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f001 fec1 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002e9e:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8002ea2:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8002ea4:	2113      	movs	r1, #19
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f001 fedc 	bl	8004c64 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002eac:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8002eb0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8002eb2:	4320      	orrs	r0, r4
		LoopCount++;
 8002eb4:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8002eb6:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8002eb8:	b240      	sxtb	r0, r0
		LoopCount++;
 8002eba:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8002ebc:	d005      	beq.n	8002eca <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8002ebe:	2d03      	cmp	r5, #3
 8002ec0:	d008      	beq.n	8002ed4 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d0e0      	beq.n	8002e88 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002eca:	2d03      	cmp	r5, #3
 8002ecc:	bf08      	it	eq
 8002ece:	f06f 000b 	mvneq.w	r0, #11
 8002ed2:	e7f8      	b.n	8002ec6 <VL53L0X_ClearInterruptMask+0x44>
 8002ed4:	f06f 000b 	mvn.w	r0, #11
 8002ed8:	e7f5      	b.n	8002ec6 <VL53L0X_ClearInterruptMask+0x44>

08002eda <VL53L0X_PerformSingleRangingMeasurement>:
{
 8002eda:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002edc:	2300      	movs	r3, #0
 8002ede:	7403      	strb	r3, [r0, #16]
{
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8002ee4:	f7ff ffb9 	bl	8002e5a <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8002ee8:	b950      	cbnz	r0, 8002f00 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002eea:	4629      	mov	r1, r5
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff fe4e 	bl	8002b8e <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8002ef2:	b928      	cbnz	r0, 8002f00 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	4620      	mov	r0, r4
}
 8002ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002efc:	f7ff bfc1 	b.w	8002e82 <VL53L0X_ClearInterruptMask>
}
 8002f00:	bd38      	pop	{r3, r4, r5, pc}

08002f02 <VL53L0X_SetGpioConfig>:
{
 8002f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f04:	4605      	mov	r5, r0
 8002f06:	461c      	mov	r4, r3
 8002f08:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 8002f0c:	460e      	mov	r6, r1
 8002f0e:	2900      	cmp	r1, #0
 8002f10:	f040 809b 	bne.w	800304a <VL53L0X_SetGpioConfig+0x148>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002f14:	2a14      	cmp	r2, #20
 8002f16:	d109      	bne.n	8002f2c <VL53L0X_SetGpioConfig+0x2a>
			data = 1;
 8002f18:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 8002f1a:	bf08      	it	eq
 8002f1c:	2210      	moveq	r2, #16
}
 8002f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8002f22:	bf18      	it	ne
 8002f24:	2201      	movne	r2, #1
 8002f26:	2184      	movs	r1, #132	; 0x84
 8002f28:	f001 be7a 	b.w	8004c20 <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002f2c:	2a15      	cmp	r2, #21
 8002f2e:	d167      	bne.n	8003000 <VL53L0X_SetGpioConfig+0xfe>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002f30:	2201      	movs	r2, #1
 8002f32:	21ff      	movs	r1, #255	; 0xff
 8002f34:	f001 fe74 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002f3c:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f001 fe6e 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002f44:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002f46:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002f48:	21ff      	movs	r1, #255	; 0xff
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f001 fe68 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002f50:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002f52:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002f54:	2201      	movs	r2, #1
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f001 fe61 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002f5e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002f60:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002f62:	2202      	movs	r2, #2
 8002f64:	2185      	movs	r1, #133	; 0x85
 8002f66:	4628      	mov	r0, r5
 8002f68:	f001 fe5a 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002f6c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002f6e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002f70:	2204      	movs	r2, #4
 8002f72:	21ff      	movs	r1, #255	; 0xff
 8002f74:	4628      	mov	r0, r5
 8002f76:	f001 fe53 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002f7a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002f7c:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002f7e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002f80:	21cd      	movs	r1, #205	; 0xcd
 8002f82:	4628      	mov	r0, r5
 8002f84:	f001 fe4c 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002f88:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002f8a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002f8c:	2211      	movs	r2, #17
 8002f8e:	21cc      	movs	r1, #204	; 0xcc
 8002f90:	4628      	mov	r0, r5
 8002f92:	f001 fe45 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002f96:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002f98:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	21ff      	movs	r1, #255	; 0xff
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f001 fe3e 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002fa4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002fa6:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002fa8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002faa:	21be      	movs	r1, #190	; 0xbe
 8002fac:	4628      	mov	r0, r5
 8002fae:	f001 fe37 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002fb2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002fb4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002fb6:	2206      	movs	r2, #6
 8002fb8:	21ff      	movs	r1, #255	; 0xff
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f001 fe30 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002fc0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002fc2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002fc4:	2209      	movs	r2, #9
 8002fc6:	21cc      	movs	r1, #204	; 0xcc
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f001 fe29 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002fce:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002fd0:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002fd2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002fd4:	21ff      	movs	r1, #255	; 0xff
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f001 fe22 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002fdc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002fde:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	21ff      	movs	r1, #255	; 0xff
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f001 fe1b 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002fea:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002fec:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002fee:	4632      	mov	r2, r6
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f001 fe14 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002ff8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002ffa:	4320      	orrs	r0, r4
 8002ffc:	b240      	sxtb	r0, r0
 8002ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 8003000:	2c04      	cmp	r4, #4
 8003002:	d825      	bhi.n	8003050 <VL53L0X_SetGpioConfig+0x14e>
 8003004:	e8df f004 	tbb	[pc, r4]
 8003008:	0a032729 	.word	0x0a032729
 800300c:	0c          	.byte	0x0c
 800300d:	00          	.byte	0x00
				data = 0x02;
 800300e:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8003010:	210a      	movs	r1, #10
 8003012:	4628      	mov	r0, r5
 8003014:	f001 fe04 	bl	8004c20 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8003018:	b120      	cbz	r0, 8003024 <VL53L0X_SetGpioConfig+0x122>
}
 800301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 800301c:	2203      	movs	r2, #3
				break;
 800301e:	e7f7      	b.n	8003010 <VL53L0X_SetGpioConfig+0x10e>
				data = 0x04;
 8003020:	2204      	movs	r2, #4
				break;
 8003022:	e7f5      	b.n	8003010 <VL53L0X_SetGpioConfig+0x10e>
				data = (uint8_t)(1 << 4);
 8003024:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8003026:	bf0c      	ite	eq
 8003028:	4633      	moveq	r3, r6
 800302a:	2310      	movne	r3, #16
 800302c:	22ef      	movs	r2, #239	; 0xef
 800302e:	2184      	movs	r1, #132	; 0x84
 8003030:	4628      	mov	r0, r5
 8003032:	f001 fe2c 	bl	8004c8e <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8003036:	2800      	cmp	r0, #0
 8003038:	d1ef      	bne.n	800301a <VL53L0X_SetGpioConfig+0x118>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800303a:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800303e:	4601      	mov	r1, r0
 8003040:	4628      	mov	r0, r5
}
 8003042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003046:	f7ff bf1c 	b.w	8002e82 <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800304a:	f06f 0009 	mvn.w	r0, #9
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 8003050:	f06f 000a 	mvn.w	r0, #10
 8003054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8003056:	2201      	movs	r2, #1
 8003058:	e7da      	b.n	8003010 <VL53L0X_SetGpioConfig+0x10e>
				data = 0x00;
 800305a:	2200      	movs	r2, #0
 800305c:	e7d8      	b.n	8003010 <VL53L0X_SetGpioConfig+0x10e>
	...

08003060 <VL53L0X_StaticInit>:
{
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	b096      	sub	sp, #88	; 0x58
 8003064:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	2100      	movs	r1, #0
 800306a:	a806      	add	r0, sp, #24
 800306c:	f002 fab9 	bl	80055e2 <memset>
	uint16_t tempword = 0;
 8003070:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003072:	2101      	movs	r1, #1
 8003074:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8003076:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 800307a:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 800307e:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 8003082:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003084:	f000 fcb5 	bl	80039f2 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003088:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 800308c:	2a01      	cmp	r2, #1
 800308e:	d806      	bhi.n	800309e <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003090:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8003094:	f040 80ae 	bne.w	80031f4 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8003098:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 800309a:	f240 80ad 	bls.w	80031f8 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800309e:	aa03      	add	r2, sp, #12
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 fb1f 	bl	80036e6 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80030a8:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80030aa:	2800      	cmp	r0, #0
 80030ac:	f040 809f 	bne.w	80031ee <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 80030b0:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 80a3 	bne.w	8003200 <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80030ba:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80030be:	4628      	mov	r0, r5
 80030c0:	f001 fa6d 	bl	800459e <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 80030c4:	4604      	mov	r4, r0
 80030c6:	2800      	cmp	r0, #0
 80030c8:	f040 8091 	bne.w	80031ee <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80030cc:	9400      	str	r4, [sp, #0]
 80030ce:	4622      	mov	r2, r4
 80030d0:	4621      	mov	r1, r4
 80030d2:	2304      	movs	r3, #4
 80030d4:	4628      	mov	r0, r5
 80030d6:	f7ff ff14 	bl	8002f02 <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 80030da:	4604      	mov	r4, r0
 80030dc:	2800      	cmp	r0, #0
 80030de:	f040 8086 	bne.w	80031ee <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80030e2:	2201      	movs	r2, #1
 80030e4:	21ff      	movs	r1, #255	; 0xff
 80030e6:	4628      	mov	r0, r5
 80030e8:	f001 fd9a 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80030ec:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80030f0:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80030f2:	2184      	movs	r1, #132	; 0x84
 80030f4:	4628      	mov	r0, r5
 80030f6:	f001 fde1 	bl	8004cbc <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030fa:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80030fc:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030fe:	21ff      	movs	r1, #255	; 0xff
 8003100:	4628      	mov	r0, r5
 8003102:	f001 fd8d 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003106:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003108:	4330      	orrs	r0, r6
 800310a:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800310c:	2c00      	cmp	r4, #0
 800310e:	d16e      	bne.n	80031ee <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003110:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003114:	a906      	add	r1, sp, #24
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff fc34 	bl	800298a <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8003122:	4604      	mov	r4, r0
 8003124:	2800      	cmp	r0, #0
 8003126:	d162      	bne.n	80031ee <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003128:	f10d 010b 	add.w	r1, sp, #11
 800312c:	4628      	mov	r0, r5
 800312e:	f7ff fab3 	bl	8002698 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8003132:	4604      	mov	r4, r0
 8003134:	2800      	cmp	r0, #0
 8003136:	d15a      	bne.n	80031ee <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003138:	f89d 300b 	ldrb.w	r3, [sp, #11]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800313c:	f105 0410 	add.w	r4, r5, #16
 8003140:	ae06      	add	r6, sp, #24
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003142:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800314c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003152:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 800315a:	f10d 020b 	add.w	r2, sp, #11
 800315e:	2101      	movs	r1, #1
 8003160:	4628      	mov	r0, r5
 8003162:	f001 fd7f 	bl	8004c64 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8003166:	4604      	mov	r4, r0
 8003168:	2800      	cmp	r0, #0
 800316a:	d140      	bne.n	80031ee <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800316c:	f89d 300b 	ldrb.w	r3, [sp, #11]
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003170:	4602      	mov	r2, r0
 8003172:	4601      	mov	r1, r0
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003174:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003178:	4628      	mov	r0, r5
 800317a:	f7ff fa9f 	bl	80026bc <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800317e:	4604      	mov	r4, r0
 8003180:	bba8      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003182:	4602      	mov	r2, r0
 8003184:	2102      	movs	r1, #2
 8003186:	4628      	mov	r0, r5
 8003188:	f7ff fa98 	bl	80026bc <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800318c:	4604      	mov	r4, r0
 800318e:	bb70      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003190:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003192:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003194:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003198:	f10d 020d 	add.w	r2, sp, #13
 800319c:	4628      	mov	r0, r5
 800319e:	f001 f91f 	bl	80043e0 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80031a2:	4604      	mov	r4, r0
 80031a4:	bb18      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80031aa:	f10d 020d 	add.w	r2, sp, #13
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031ae:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80031b2:	2101      	movs	r1, #1
 80031b4:	4628      	mov	r0, r5
 80031b6:	f001 f913 	bl	80043e0 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80031ba:	4604      	mov	r4, r0
 80031bc:	b9b8      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031be:	f89d 300d 	ldrb.w	r3, [sp, #13]
		Status = get_sequence_step_timeout(
 80031c2:	aa05      	add	r2, sp, #20
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031c4:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = get_sequence_step_timeout(
 80031c8:	2103      	movs	r1, #3
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 fef4 	bl	8003fb8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80031d0:	4604      	mov	r4, r0
 80031d2:	b960      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031d4:	9b05      	ldr	r3, [sp, #20]
		Status = get_sequence_step_timeout(
 80031d6:	aa05      	add	r2, sp, #20
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031d8:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = get_sequence_step_timeout(
 80031dc:	2104      	movs	r1, #4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 feea 	bl	8003fb8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80031e4:	4604      	mov	r4, r0
 80031e6:	b910      	cbnz	r0, 80031ee <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031e8:	9b05      	ldr	r3, [sp, #20]
 80031ea:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 80031ee:	4620      	mov	r0, r4
 80031f0:	b016      	add	sp, #88	; 0x58
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 80031f4:	290c      	cmp	r1, #12
 80031f6:	e750      	b.n	800309a <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 f912 	bl	8003422 <VL53L0X_set_reference_spads>
 80031fe:	e753      	b.n	80030a8 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8003200:	4900      	ldr	r1, [pc, #0]	; (8003204 <VL53L0X_StaticInit+0x1a4>)
 8003202:	e75c      	b.n	80030be <VL53L0X_StaticInit+0x5e>
 8003204:	20000008 	.word	0x20000008

08003208 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8003208:	b513      	push	{r0, r1, r4, lr}
 800320a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800320c:	f10d 0207 	add.w	r2, sp, #7
 8003210:	2113      	movs	r1, #19
 8003212:	f001 fd27 	bl	8004c64 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8003216:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 800321a:	f013 0f18 	tst.w	r3, #24
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 800321e:	bf18      	it	ne
 8003220:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8003224:	f003 0207 	and.w	r2, r3, #7
 8003228:	6022      	str	r2, [r4, #0]
}
 800322a:	b002      	add	sp, #8
 800322c:	bd10      	pop	{r4, pc}

0800322e <VL53L0X_GetMeasurementDataReady>:
{
 800322e:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8003230:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
{
 8003234:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8003236:	2b04      	cmp	r3, #4
 8003238:	d10b      	bne.n	8003252 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800323a:	a901      	add	r1, sp, #4
 800323c:	f7ff ffe4 	bl	8003208 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8003240:	9b01      	ldr	r3, [sp, #4]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d101      	bne.n	800324a <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	7023      	strb	r3, [r4, #0]
}
 800324e:	b002      	add	sp, #8
 8003250:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003252:	aa01      	add	r2, sp, #4
 8003254:	2114      	movs	r1, #20
 8003256:	f001 fd05 	bl	8004c64 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800325a:	2800      	cmp	r0, #0
 800325c:	d1f7      	bne.n	800324e <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 800325e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003262:	07db      	lsls	r3, r3, #31
 8003264:	d4ef      	bmi.n	8003246 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8003266:	7020      	strb	r0, [r4, #0]
 8003268:	e7f1      	b.n	800324e <VL53L0X_GetMeasurementDataReady+0x20>

0800326a <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800326a:	f000 ba3c 	b.w	80036e6 <VL53L0X_perform_ref_spad_management>

0800326e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800326e:	b513      	push	{r0, r1, r4, lr}
 8003270:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8003272:	f10d 0206 	add.w	r2, sp, #6
 8003276:	2128      	movs	r1, #40	; 0x28
 8003278:	f001 fd20 	bl	8004cbc <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800327c:	b958      	cbnz	r0, 8003296 <VL53L0X_get_offset_calibration_data_micro_meter+0x28>
 800327e:	22fa      	movs	r2, #250	; 0xfa
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003280:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800328c:	bf28      	it	cs
 800328e:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003292:	4353      	muls	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003294:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8003296:	b002      	add	sp, #8
 8003298:	bd10      	pop	{r4, pc}

0800329a <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800329a:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 800329c:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 80032a0:	f04f 34ff 	mov.w	r4, #4294967295
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80032a4:	4676      	mov	r6, lr
	uint8_t success = 0;
 80032a6:	2700      	movs	r7, #0
	*next = -1;
 80032a8:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 80032aa:	f002 0207 	and.w	r2, r2, #7
 80032ae:	ea4f 0cce 	mov.w	ip, lr, lsl #3
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80032b2:	428e      	cmp	r6, r1
 80032b4:	d200      	bcs.n	80032b8 <get_next_good_spad+0x1e>
 80032b6:	b107      	cbz	r7, 80032ba <get_next_good_spad+0x20>
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];

		if (coarseIndex == startIndex) {
 80032ba:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
 80032bc:	bf0c      	ite	eq
 80032be:	4614      	moveq	r4, r2
		fineIndex = 0;
 80032c0:	463c      	movne	r4, r7
		dataByte = goodSpadArray[coarseIndex];
 80032c2:	5d85      	ldrb	r5, [r0, r6]
			dataByte >>= fineOffset;
 80032c4:	bf04      	itt	eq
 80032c6:	4115      	asreq	r5, r2
 80032c8:	b2ed      	uxtbeq	r5, r5
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 80032ca:	f015 0f01 	tst.w	r5, #1
 80032ce:	d006      	beq.n	80032de <get_next_good_spad+0x44>
				success = 1;
 80032d0:	2701      	movs	r7, #1
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80032d2:	4464      	add	r4, ip
 80032d4:	601c      	str	r4, [r3, #0]
				coarseIndex++) {
 80032d6:	3601      	adds	r6, #1
 80032d8:	f10c 0c08 	add.w	ip, ip, #8
 80032dc:	e7e9      	b.n	80032b2 <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 80032de:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 80032e0:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 80032e2:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 80032e6:	d1f0      	bne.n	80032ca <get_next_good_spad+0x30>
 80032e8:	e7f5      	b.n	80032d6 <get_next_good_spad+0x3c>
	...

080032ec <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 80032ee:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80032f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 80032f4:	3000      	adds	r0, #0
 80032f6:	bf18      	it	ne
 80032f8:	2001      	movne	r0, #1
 80032fa:	4770      	bx	lr
 80032fc:	200002b4 	.word	0x200002b4

08003300 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003300:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8003302:	428b      	cmp	r3, r1
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003304:	bf38      	it	cc
 8003306:	2101      	movcc	r1, #1
	fineIndex = spadIndex % cSpadsPerByte;
 8003308:	f002 0207 	and.w	r2, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
 800330c:	bf3f      	itttt	cc
 800330e:	4091      	lslcc	r1, r2
 8003310:	5cc2      	ldrbcc	r2, [r0, r3]
 8003312:	430a      	orrcc	r2, r1
 8003314:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003316:	bf34      	ite	cc
 8003318:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800331a:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 800331e:	4770      	bx	lr

08003320 <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003320:	460a      	mov	r2, r1
 8003322:	2306      	movs	r3, #6
 8003324:	21b0      	movs	r1, #176	; 0xb0
 8003326:	f001 bc47 	b.w	8004bb8 <VL53L0X_WriteMulti>

0800332a <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800332a:	460a      	mov	r2, r1
 800332c:	2306      	movs	r3, #6
 800332e:	21b0      	movs	r1, #176	; 0xb0
 8003330:	f001 bc60 	b.w	8004bf4 <VL53L0X_ReadMulti>

08003334 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003338:	4682      	mov	sl, r0
 800333a:	468b      	mov	fp, r1
 800333c:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 800333e:	f04f 0800 	mov.w	r8, #0
{
 8003342:	b087      	sub	sp, #28
 8003344:	9c12      	ldr	r4, [sp, #72]	; 0x48
	int32_t nextGoodSpad = offset;
 8003346:	f10d 0918 	add.w	r9, sp, #24
{
 800334a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800334c:	9201      	str	r2, [sp, #4]
	int32_t nextGoodSpad = offset;
 800334e:	f849 4d0c 	str.w	r4, [r9, #-12]!
	for (index = 0; index < spadCount; index++) {
 8003352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003354:	4598      	cmp	r8, r3
 8003356:	d114      	bne.n	8003382 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003358:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 800335a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800335c:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800335e:	b968      	cbnz	r0, 800337c <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8003360:	4629      	mov	r1, r5
 8003362:	4650      	mov	r0, sl
 8003364:	f7ff ffdc 	bl	8003320 <set_ref_spad_map>
 8003368:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 800336a:	b938      	cbnz	r0, 800337c <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800336c:	ae04      	add	r6, sp, #16
 800336e:	4631      	mov	r1, r6
 8003370:	4650      	mov	r0, sl
 8003372:	f7ff ffda 	bl	800332a <get_ref_spad_map>

		i = 0;
 8003376:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003378:	429f      	cmp	r7, r3
 800337a:	d11d      	bne.n	80033b8 <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 800337c:	b007      	add	sp, #28
 800337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003382:	464b      	mov	r3, r9
 8003384:	4622      	mov	r2, r4
 8003386:	4639      	mov	r1, r7
 8003388:	9801      	ldr	r0, [sp, #4]
 800338a:	f7ff ff86 	bl	800329a <get_next_good_spad>
		if (nextGoodSpad == -1) {
 800338e:	9e03      	ldr	r6, [sp, #12]
 8003390:	1c73      	adds	r3, r6, #1
 8003392:	d00e      	beq.n	80033b2 <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003396:	18f0      	adds	r0, r6, r3
 8003398:	f7ff ffa8 	bl	80032ec <is_aperture>
 800339c:	4558      	cmp	r0, fp
 800339e:	d108      	bne.n	80033b2 <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 80033a0:	4632      	mov	r2, r6
 80033a2:	4639      	mov	r1, r7
 80033a4:	4628      	mov	r0, r5
 80033a6:	f7ff ffab 	bl	8003300 <enable_spad_bit>
		currentSpad++;
 80033aa:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 80033ac:	f108 0801 	add.w	r8, r8, #1
 80033b0:	e7cf      	b.n	8003352 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80033b2:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80033b6:	e7d0      	b.n	800335a <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 80033b8:	5ce9      	ldrb	r1, [r5, r3]
 80033ba:	5cf2      	ldrb	r2, [r6, r3]
 80033bc:	4291      	cmp	r1, r2
 80033be:	d101      	bne.n	80033c4 <enable_ref_spads+0x90>
			i++;
 80033c0:	3301      	adds	r3, #1
 80033c2:	e7d9      	b.n	8003378 <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80033c4:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80033c8:	e7d8      	b.n	800337c <enable_ref_spads+0x48>

080033ca <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80033ca:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 80033cc:	22c0      	movs	r2, #192	; 0xc0
{
 80033ce:	b088      	sub	sp, #32
 80033d0:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 80033d2:	2101      	movs	r1, #1
{
 80033d4:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80033d6:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 80033da:	f001 fc21 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80033de:	b9f0      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80033e0:	a901      	add	r1, sp, #4
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff fd79 	bl	8002eda <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80033e8:	b9c8      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80033ea:	2201      	movs	r2, #1
 80033ec:	21ff      	movs	r1, #255	; 0xff
 80033ee:	4620      	mov	r0, r4
 80033f0:	f001 fc16 	bl	8004c20 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 80033f4:	b998      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 80033f6:	4632      	mov	r2, r6
 80033f8:	21b6      	movs	r1, #182	; 0xb6
 80033fa:	4620      	mov	r0, r4
 80033fc:	f001 fc5e 	bl	8004cbc <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003400:	b968      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003402:	4602      	mov	r2, r0
 8003404:	21ff      	movs	r1, #255	; 0xff
 8003406:	4620      	mov	r0, r4
 8003408:	f001 fc0a 	bl	8004c20 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 800340c:	b938      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800340e:	462a      	mov	r2, r5
 8003410:	2101      	movs	r1, #1
 8003412:	4620      	mov	r0, r4
 8003414:	f001 fc04 	bl	8004c20 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003418:	b908      	cbnz	r0, 800341e <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800341a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 800341e:	b008      	add	sp, #32
 8003420:	bd70      	pop	{r4, r5, r6, pc}

08003422 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003422:	b570      	push	{r4, r5, r6, lr}
 8003424:	460e      	mov	r6, r1
 8003426:	b088      	sub	sp, #32
 8003428:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800342a:	21ff      	movs	r1, #255	; 0xff
 800342c:	2201      	movs	r2, #1
{
 800342e:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003430:	f001 fbf6 	bl	8004c20 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003434:	4602      	mov	r2, r0
 8003436:	b9a8      	cbnz	r0, 8003464 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8003438:	214f      	movs	r1, #79	; 0x4f
 800343a:	4620      	mov	r0, r4
 800343c:	f001 fbf0 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003440:	b980      	cbnz	r0, 8003464 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8003442:	222c      	movs	r2, #44	; 0x2c
 8003444:	214e      	movs	r1, #78	; 0x4e
 8003446:	4620      	mov	r0, r4
 8003448:	f001 fbea 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800344c:	4602      	mov	r2, r0
 800344e:	b948      	cbnz	r0, 8003464 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003450:	21ff      	movs	r1, #255	; 0xff
 8003452:	4620      	mov	r0, r4
 8003454:	f001 fbe4 	bl	8004c20 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003458:	b920      	cbnz	r0, 8003464 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800345a:	22b4      	movs	r2, #180	; 0xb4
 800345c:	21b6      	movs	r1, #182	; 0xb6
 800345e:	4620      	mov	r0, r4
 8003460:	f001 fbde 	bl	8004c20 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 800346a:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 800346e:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8003472:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8003476:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 800347a:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 800347e:	b31d      	cbz	r5, 80034c8 <VL53L0X_set_reference_spads+0xa6>
 8003480:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003482:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 8003486:	f7ff ff31 	bl	80032ec <is_aperture>
 800348a:	b908      	cbnz	r0, 8003490 <VL53L0X_set_reference_spads+0x6e>
 800348c:	2a2c      	cmp	r2, #44	; 0x2c
 800348e:	d119      	bne.n	80034c4 <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8003490:	ab07      	add	r3, sp, #28
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	9202      	str	r2, [sp, #8]
 8003496:	23b4      	movs	r3, #180	; 0xb4
 8003498:	2206      	movs	r2, #6
 800349a:	9603      	str	r6, [sp, #12]
 800349c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80034a0:	4629      	mov	r1, r5
 80034a2:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80034a6:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff42 	bl	8003334 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80034b0:	b930      	cbnz	r0, 80034c0 <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80034b2:	2301      	movs	r3, #1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80034b4:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80034b8:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80034bc:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 80034c0:	b008      	add	sp, #32
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 80034c4:	3201      	adds	r2, #1
 80034c6:	e7dc      	b.n	8003482 <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 80034c8:	462a      	mov	r2, r5
 80034ca:	e7e1      	b.n	8003490 <VL53L0X_set_reference_spads+0x6e>

080034cc <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80034cc:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80034ce:	f041 0201 	orr.w	r2, r1, #1
 80034d2:	2100      	movs	r1, #0
{
 80034d4:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80034d6:	f001 fba3 	bl	8004c20 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80034da:	b978      	cbnz	r0, 80034fc <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80034dc:	4620      	mov	r0, r4
 80034de:	f000 fa36 	bl	800394e <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80034e2:	b958      	cbnz	r0, 80034fc <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80034e4:	4601      	mov	r1, r0
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7ff fccb 	bl	8002e82 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 80034ec:	b930      	cbnz	r0, 80034fc <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80034ee:	4602      	mov	r2, r0
 80034f0:	4601      	mov	r1, r0
 80034f2:	4620      	mov	r0, r4

	return Status;
}
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80034f8:	f001 bb92 	b.w	8004c20 <VL53L0X_WrByte>
}
 80034fc:	bd10      	pop	{r4, pc}

080034fe <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80034fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8003502:	f04f 0b00 	mov.w	fp, #0
{
 8003506:	4689      	mov	r9, r1
 8003508:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800350a:	21ff      	movs	r1, #255	; 0xff
 800350c:	2201      	movs	r2, #1
{
 800350e:	4605      	mov	r5, r0
 8003510:	461f      	mov	r7, r3
 8003512:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8003516:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 800351a:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800351e:	f001 fb7f 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003522:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003524:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003526:	4659      	mov	r1, fp
 8003528:	4628      	mov	r0, r5
 800352a:	f001 fb79 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800352e:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003530:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003532:	21ff      	movs	r1, #255	; 0xff
 8003534:	4628      	mov	r0, r5
 8003536:	f001 fb73 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800353a:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800353c:	4304      	orrs	r4, r0
 800353e:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8003540:	f1b9 0f00 	cmp.w	r9, #0
 8003544:	d030      	beq.n	80035a8 <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8003546:	f1ba 0f00 	cmp.w	sl, #0
 800354a:	d006      	beq.n	800355a <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800354c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800354e:	21cb      	movs	r1, #203	; 0xcb
 8003550:	4628      	mov	r0, r5
 8003552:	f001 fb87 	bl	8004c64 <VL53L0X_RdByte>
 8003556:	4304      	orrs	r4, r0
 8003558:	b264      	sxtb	r4, r4
		if (phase_enable)
 800355a:	b13e      	cbz	r6, 800356c <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800355c:	f10d 0207 	add.w	r2, sp, #7
 8003560:	21ee      	movs	r1, #238	; 0xee
 8003562:	4628      	mov	r0, r5
 8003564:	f001 fb7e 	bl	8004c64 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003568:	4304      	orrs	r4, r0
 800356a:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800356c:	2201      	movs	r2, #1
 800356e:	21ff      	movs	r1, #255	; 0xff
 8003570:	4628      	mov	r0, r5
 8003572:	f001 fb55 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003576:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003578:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800357a:	2100      	movs	r1, #0
 800357c:	4628      	mov	r0, r5
 800357e:	f001 fb4f 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003582:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003584:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003586:	2200      	movs	r2, #0
 8003588:	21ff      	movs	r1, #255	; 0xff
 800358a:	4628      	mov	r0, r5
 800358c:	f001 fb48 	bl	8004c20 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003590:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003592:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003598:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800359a:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 800359e:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80035a0:	7013      	strb	r3, [r2, #0]
}
 80035a2:	b003      	add	sp, #12
 80035a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 80035a8:	f1ba 0f00 	cmp.w	sl, #0
 80035ac:	d006      	beq.n	80035bc <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80035ae:	4642      	mov	r2, r8
 80035b0:	21cb      	movs	r1, #203	; 0xcb
 80035b2:	4628      	mov	r0, r5
 80035b4:	f001 fb34 	bl	8004c20 <VL53L0X_WrByte>
 80035b8:	4304      	orrs	r4, r0
 80035ba:	b264      	sxtb	r4, r4
		if (phase_enable)
 80035bc:	2e00      	cmp	r6, #0
 80035be:	d0d5      	beq.n	800356c <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80035c0:	463b      	mov	r3, r7
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	21ee      	movs	r1, #238	; 0xee
 80035c6:	4628      	mov	r0, r5
 80035c8:	f001 fb61 	bl	8004c8e <VL53L0X_UpdateByte>
 80035cc:	e7cc      	b.n	8003568 <VL53L0X_ref_calibration_io+0x6a>

080035ce <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80035ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d2:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80035d4:	2200      	movs	r2, #0
{
 80035d6:	b086      	sub	sp, #24
 80035d8:	4604      	mov	r4, r0
 80035da:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80035dc:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80035e0:	461e      	mov	r6, r3
 80035e2:	b343      	cbz	r3, 8003636 <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80035e4:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80035e8:	2201      	movs	r2, #1
 80035ea:	4620      	mov	r0, r4
 80035ec:	4611      	mov	r1, r2
 80035ee:	f001 fb17 	bl	8004c20 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80035f2:	bb10      	cbnz	r0, 800363a <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	4620      	mov	r0, r4
 80035f8:	f7ff ff68 	bl	80034cc <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80035fc:	b9e8      	cbnz	r0, 800363a <VL53L0X_perform_vhv_calibration+0x6c>
 80035fe:	2f01      	cmp	r7, #1
 8003600:	d11b      	bne.n	800363a <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003602:	f10d 0317 	add.w	r3, sp, #23
 8003606:	9003      	str	r0, [sp, #12]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	4602      	mov	r2, r0
 800360c:	4603      	mov	r3, r0
 800360e:	9702      	str	r7, [sp, #8]
 8003610:	f8cd 8000 	str.w	r8, [sp]
 8003614:	4639      	mov	r1, r7
 8003616:	4620      	mov	r0, r4
 8003618:	f7ff ff71 	bl	80034fe <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800361c:	b940      	cbnz	r0, 8003630 <VL53L0X_perform_vhv_calibration+0x62>
 800361e:	b13e      	cbz	r6, 8003630 <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003620:	462a      	mov	r2, r5
 8003622:	2101      	movs	r1, #1
 8003624:	4620      	mov	r0, r4
 8003626:	f001 fafb 	bl	8004c20 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800362a:	b908      	cbnz	r0, 8003630 <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800362c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8003630:	b006      	add	sp, #24
 8003632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8003636:	461d      	mov	r5, r3
 8003638:	e7d6      	b.n	80035e8 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	f888 3000 	strb.w	r3, [r8]
 8003640:	e7ec      	b.n	800361c <VL53L0X_perform_vhv_calibration+0x4e>

08003642 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003646:	4604      	mov	r4, r0
 8003648:	b086      	sub	sp, #24
 800364a:	4688      	mov	r8, r1
 800364c:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800364e:	461e      	mov	r6, r3
 8003650:	b343      	cbz	r3, 80036a4 <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003652:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003656:	2202      	movs	r2, #2
 8003658:	2101      	movs	r1, #1
 800365a:	4620      	mov	r0, r4
 800365c:	f001 fae0 	bl	8004c20 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003660:	bb10      	cbnz	r0, 80036a8 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003662:	4601      	mov	r1, r0
 8003664:	4620      	mov	r0, r4
 8003666:	f7ff ff31 	bl	80034cc <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800366a:	b9e8      	cbnz	r0, 80036a8 <VL53L0X_perform_phase_calibration+0x66>
 800366c:	2f01      	cmp	r7, #1
 800366e:	d11b      	bne.n	80036a8 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003670:	f10d 0317 	add.w	r3, sp, #23
 8003674:	9002      	str	r0, [sp, #8]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4602      	mov	r2, r0
 800367a:	4603      	mov	r3, r0
 800367c:	9703      	str	r7, [sp, #12]
 800367e:	f8cd 8004 	str.w	r8, [sp, #4]
 8003682:	4639      	mov	r1, r7
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff ff3a 	bl	80034fe <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800368a:	b940      	cbnz	r0, 800369e <VL53L0X_perform_phase_calibration+0x5c>
 800368c:	b13e      	cbz	r6, 800369e <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800368e:	462a      	mov	r2, r5
 8003690:	2101      	movs	r1, #1
 8003692:	4620      	mov	r0, r4
 8003694:	f001 fac4 	bl	8004c20 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003698:	b908      	cbnz	r0, 800369e <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800369a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 800369e:	b006      	add	sp, #24
 80036a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 80036a4:	461d      	mov	r5, r3
 80036a6:	e7d6      	b.n	8003656 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f888 3000 	strb.w	r3, [r8]
 80036ae:	e7ec      	b.n	800368a <VL53L0X_perform_phase_calibration+0x48>

080036b0 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	461e      	mov	r6, r3
 80036b4:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80036b6:	2300      	movs	r3, #0
 80036b8:	4632      	mov	r2, r6
{
 80036ba:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80036bc:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 80036c0:	f7ff ff85 	bl	80035ce <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80036c4:	b970      	cbnz	r0, 80036e4 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 80036c6:	4603      	mov	r3, r0
 80036c8:	4632      	mov	r2, r6
 80036ca:	4639      	mov	r1, r7
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ffb8 	bl	8003642 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80036d2:	b938      	cbnz	r0, 80036e4 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80036d4:	462a      	mov	r2, r5
 80036d6:	2101      	movs	r1, #1
 80036d8:	4620      	mov	r0, r4
 80036da:	f001 faa1 	bl	8004c20 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80036de:	b908      	cbnz	r0, 80036e4 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80036e0:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80036e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036e6 <VL53L0X_perform_ref_spad_management>:
	uint32_t lastSpadIndex = 0;
 80036e6:	2300      	movs	r3, #0
{
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	b091      	sub	sp, #68	; 0x44
 80036ee:	9108      	str	r1, [sp, #32]
 80036f0:	9209      	str	r2, [sp, #36]	; 0x24
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80036f2:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 80036f6:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 80036fa:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 80036fe:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 8003702:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 8003706:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800370a:	2201      	movs	r2, #1
 800370c:	21ff      	movs	r1, #255	; 0xff
{
 800370e:	4604      	mov	r4, r0
	uint32_t lastSpadIndex = 0;
 8003710:	930c      	str	r3, [sp, #48]	; 0x30
	int32_t nextGoodSpad = 0;
 8003712:	930d      	str	r3, [sp, #52]	; 0x34
	uint8_t VhvSettings = 0;
 8003714:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	uint8_t PhaseCal = 0;
 8003718:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800371c:	f8b0 813c 	ldrh.w	r8, [r0, #316]	; 0x13c
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003720:	f001 fa7e 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003724:	4605      	mov	r5, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	f040 810b 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 800372c:	4602      	mov	r2, r0
 800372e:	214f      	movs	r1, #79	; 0x4f
 8003730:	4620      	mov	r0, r4
 8003732:	f001 fa75 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003736:	4605      	mov	r5, r0
 8003738:	2800      	cmp	r0, #0
 800373a:	f040 8102 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 800373e:	222c      	movs	r2, #44	; 0x2c
 8003740:	214e      	movs	r1, #78	; 0x4e
 8003742:	4620      	mov	r0, r4
 8003744:	f001 fa6c 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003748:	4605      	mov	r5, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	f040 80f9 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003750:	4602      	mov	r2, r0
 8003752:	21ff      	movs	r1, #255	; 0xff
 8003754:	4620      	mov	r0, r4
 8003756:	f001 fa63 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800375a:	4605      	mov	r5, r0
 800375c:	2800      	cmp	r0, #0
 800375e:	f040 80f0 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8003762:	22b4      	movs	r2, #180	; 0xb4
 8003764:	21b6      	movs	r1, #182	; 0xb6
 8003766:	4620      	mov	r0, r4
 8003768:	f001 fa5a 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800376c:	4605      	mov	r5, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	f040 80e7 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8003774:	4602      	mov	r2, r0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	4620      	mov	r0, r4
 800377a:	f001 fa51 	bl	8004c20 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800377e:	4605      	mov	r5, r0
 8003780:	2800      	cmp	r0, #0
 8003782:	f040 80de 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003786:	4603      	mov	r3, r0
 8003788:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 800378c:	a90b      	add	r1, sp, #44	; 0x2c
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ff8e 	bl	80036b0 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8003794:	4605      	mov	r5, r0
 8003796:	2800      	cmp	r0, #0
 8003798:	f040 80d3 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = enable_ref_spads(Dev,
 800379c:	2303      	movs	r3, #3
		lastSpadIndex = currentSpadIndex;
 800379e:	af10      	add	r7, sp, #64	; 0x40
 80037a0:	f847 0d10 	str.w	r0, [r7, #-16]!
		Status = enable_ref_spads(Dev,
 80037a4:	2106      	movs	r1, #6
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefGoodSpadMap,
 80037aa:	f504 7b95 	add.w	fp, r4, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80037ae:	f504 7992 	add.w	r9, r4, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80037b2:	e88d 000a 	stmia.w	sp, {r1, r3}
 80037b6:	9002      	str	r0, [sp, #8]
 80037b8:	4601      	mov	r1, r0
 80037ba:	9704      	str	r7, [sp, #16]
 80037bc:	464b      	mov	r3, r9
 80037be:	465a      	mov	r2, fp
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff fdb7 	bl	8003334 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80037c6:	4605      	mov	r5, r0
 80037c8:	2800      	cmp	r0, #0
 80037ca:	f040 80ba 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = perform_ref_signal_measurement(Dev,
 80037ce:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80037d2:	4620      	mov	r0, r4
		currentSpadIndex = lastSpadIndex;
 80037d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		Status = perform_ref_signal_measurement(Dev,
 80037d6:	f7ff fdf8 	bl	80033ca <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80037da:	4605      	mov	r5, r0
 80037dc:	2800      	cmp	r0, #0
 80037de:	f040 80b0 	bne.w	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
 80037e2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80037e6:	4543      	cmp	r3, r8
 80037e8:	d955      	bls.n	8003896 <VL53L0X_perform_ref_spad_management+0x1b0>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80037ea:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
 80037ee:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
 80037f2:	f884 0126 	strb.w	r0, [r4, #294]	; 0x126
 80037f6:	f884 0127 	strb.w	r0, [r4, #295]	; 0x127
 80037fa:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
 80037fe:	f884 0129 	strb.w	r0, [r4, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 8003802:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 8003806:	f7ff fd71 	bl	80032ec <is_aperture>
 800380a:	b180      	cbz	r0, 800382e <VL53L0X_perform_ref_spad_management+0x148>
			Status = enable_ref_spads(Dev,
 800380c:	2206      	movs	r2, #6
 800380e:	23b4      	movs	r3, #180	; 0xb4
 8003810:	9704      	str	r7, [sp, #16]
 8003812:	2703      	movs	r7, #3
 8003814:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003818:	9703      	str	r7, [sp, #12]
 800381a:	9602      	str	r6, [sp, #8]
 800381c:	464b      	mov	r3, r9
 800381e:	465a      	mov	r2, fp
 8003820:	2101      	movs	r1, #1
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff fd86 	bl	8003334 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8003828:	b128      	cbz	r0, 8003836 <VL53L0X_perform_ref_spad_management+0x150>
			Status = perform_ref_signal_measurement(Dev,
 800382a:	4605      	mov	r5, r0
	return Status;
 800382c:	e089      	b.n	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800382e:	2e2b      	cmp	r6, #43	; 0x2b
 8003830:	d8ec      	bhi.n	800380c <VL53L0X_perform_ref_spad_management+0x126>
				currentSpadIndex++;
 8003832:	3601      	adds	r6, #1
 8003834:	e7e5      	b.n	8003802 <VL53L0X_perform_ref_spad_management+0x11c>
				Status = perform_ref_signal_measurement(Dev,
 8003836:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800383a:	4620      	mov	r0, r4
				currentSpadIndex = lastSpadIndex;
 800383c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
				Status = perform_ref_signal_measurement(Dev,
 800383e:	f7ff fdc4 	bl	80033ca <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003842:	2800      	cmp	r0, #0
 8003844:	d1f1      	bne.n	800382a <VL53L0X_perform_ref_spad_management+0x144>
 8003846:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800384a:	4543      	cmp	r3, r8
 800384c:	d97d      	bls.n	800394a <VL53L0X_perform_ref_spad_management+0x264>
					isApertureSpads_int = 1;
 800384e:	2001      	movs	r0, #1
			needAptSpads = 1;
 8003850:	f04f 0a01 	mov.w	sl, #1
 8003854:	e022      	b.n	800389c <VL53L0X_perform_ref_spad_management+0x1b6>
				memcpy(lastSpadArray,
 8003856:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800385a:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
 800385e:	900e      	str	r0, [sp, #56]	; 0x38
 8003860:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
			(refSpadCount_int)++;
 8003864:	9f06      	ldr	r7, [sp, #24]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003866:	9307      	str	r3, [sp, #28]
 8003868:	e02a      	b.n	80038c0 <VL53L0X_perform_ref_spad_management+0x1da>
			(refSpadCount_int)++;
 800386a:	9f06      	ldr	r7, [sp, #24]
		isApertureSpads_int = needAptSpads;
 800386c:	fa5f f08a 	uxtb.w	r0, sl
		*refSpadCount = refSpadCount_int;
 8003870:	9b08      	ldr	r3, [sp, #32]
 8003872:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003876:	7018      	strb	r0, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003878:	2301      	movs	r3, #1
 800387a:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800387e:	9b08      	ldr	r3, [sp, #32]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 800388e:	e058      	b.n	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003890:	f06f 0531 	mvn.w	r5, #49	; 0x31
 8003894:	e055      	b.n	8003942 <VL53L0X_perform_ref_spad_management+0x25c>
	uint8_t	 isApertureSpads_int = 0;
 8003896:	2000      	movs	r0, #0
	uint32_t refSpadCount_int = 0;
 8003898:	4607      	mov	r7, r0
			needAptSpads = 0;
 800389a:	4682      	mov	sl, r0
		(peakSignalRateRef < targetRefRate)) {
 800389c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	if ((Status == VL53L0X_ERROR_NONE) &&
 80038a0:	4598      	cmp	r8, r3
 80038a2:	d9e5      	bls.n	8003870 <VL53L0X_perform_ref_spad_management+0x18a>
		refSpadCount_int	= minimumSpadCount;
 80038a4:	2703      	movs	r7, #3
		lastSignalRateDiff = abs(peakSignalRateRef -
 80038a6:	eba3 0308 	sub.w	r3, r3, r8
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80038aa:	f8d9 0000 	ldr.w	r0, [r9]
 80038ae:	f8b9 2004 	ldrh.w	r2, [r9, #4]
		lastSignalRateDiff = abs(peakSignalRateRef -
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	425b      	neglt	r3, r3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80038b8:	900e      	str	r0, [sp, #56]	; 0x38
 80038ba:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
		lastSignalRateDiff = abs(peakSignalRateRef -
 80038be:	9307      	str	r3, [sp, #28]
			get_next_good_spad(
 80038c0:	ab0d      	add	r3, sp, #52	; 0x34
 80038c2:	4632      	mov	r2, r6
 80038c4:	2106      	movs	r1, #6
 80038c6:	4658      	mov	r0, fp
 80038c8:	f7ff fce7 	bl	800329a <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80038cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80038ce:	1c73      	adds	r3, r6, #1
 80038d0:	d0de      	beq.n	8003890 <VL53L0X_perform_ref_spad_management+0x1aa>
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80038d2:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80038d6:	f7ff fd09 	bl	80032ec <is_aperture>
 80038da:	4550      	cmp	r0, sl
 80038dc:	d1c6      	bne.n	800386c <VL53L0X_perform_ref_spad_management+0x186>
			(refSpadCount_int)++;
 80038de:	1c7b      	adds	r3, r7, #1
			Status = enable_spad_bit(
 80038e0:	4632      	mov	r2, r6
 80038e2:	2106      	movs	r1, #6
 80038e4:	4648      	mov	r0, r9
			(refSpadCount_int)++;
 80038e6:	9306      	str	r3, [sp, #24]
			Status = enable_spad_bit(
 80038e8:	f7ff fd0a 	bl	8003300 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d19c      	bne.n	800382a <VL53L0X_perform_ref_spad_management+0x144>
				Status = set_ref_spad_map(Dev,
 80038f0:	4649      	mov	r1, r9
 80038f2:	4620      	mov	r0, r4
				currentSpadIndex++;
 80038f4:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 80038f6:	f7ff fd13 	bl	8003320 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d195      	bne.n	800382a <VL53L0X_perform_ref_spad_management+0x144>
			Status = perform_ref_signal_measurement(Dev,
 80038fe:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff fd61 	bl	80033ca <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8003908:	2800      	cmp	r0, #0
 800390a:	d18e      	bne.n	800382a <VL53L0X_perform_ref_spad_management+0x144>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800390c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8003910:	eba2 0308 	sub.w	r3, r2, r8
 8003914:	2b00      	cmp	r3, #0
 8003916:	bfb8      	it	lt
 8003918:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 800391a:	4590      	cmp	r8, r2
 800391c:	d29b      	bcs.n	8003856 <VL53L0X_perform_ref_spad_management+0x170>
				if (signalRateDiff > lastSignalRateDiff) {
 800391e:	9a07      	ldr	r2, [sp, #28]
 8003920:	4293      	cmp	r3, r2
 8003922:	d9a2      	bls.n	800386a <VL53L0X_perform_ref_spad_management+0x184>
					Status = set_ref_spad_map(Dev,
 8003924:	a90e      	add	r1, sp, #56	; 0x38
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff fcfa 	bl	8003320 <set_ref_spad_map>
 800392c:	4603      	mov	r3, r0
					memcpy(
 800392e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8003932:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003934:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
 8003938:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 800393c:	2b00      	cmp	r3, #0
 800393e:	d095      	beq.n	800386c <VL53L0X_perform_ref_spad_management+0x186>
 8003940:	461d      	mov	r5, r3
}
 8003942:	4628      	mov	r0, r5
 8003944:	b011      	add	sp, #68	; 0x44
 8003946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t refSpadCount_int = 0;
 800394a:	4607      	mov	r7, r0
 800394c:	e780      	b.n	8003850 <VL53L0X_perform_ref_spad_management+0x16a>

0800394e <VL53L0X_measurement_poll_for_completion>:
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 800394e:	2300      	movs	r3, #0
{
 8003950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003952:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8003954:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8003958:	ad02      	add	r5, sp, #8
 800395a:	f805 3d01 	strb.w	r3, [r5, #-1]!
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800395e:	4629      	mov	r1, r5
 8003960:	4630      	mov	r0, r6
 8003962:	f7ff fc64 	bl	800322e <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8003966:	b958      	cbnz	r0, 8003980 <VL53L0X_measurement_poll_for_completion+0x32>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003968:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d007      	beq.n	8003980 <VL53L0X_measurement_poll_for_completion+0x32>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003970:	3c01      	subs	r4, #1
 8003972:	d003      	beq.n	800397c <VL53L0X_measurement_poll_for_completion+0x2e>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8003974:	4630      	mov	r0, r6
 8003976:	f001 f9e7 	bl	8004d48 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800397a:	e7f0      	b.n	800395e <VL53L0X_measurement_poll_for_completion+0x10>
			Status = VL53L0X_ERROR_TIME_OUT;
 800397c:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003980:	b002      	add	sp, #8
 8003982:	bd70      	pop	{r4, r5, r6, pc}

08003984 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003984:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8003986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
 800398a:	b510      	push	{r4, lr}
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800398c:	428a      	cmp	r2, r1
 800398e:	d802      	bhi.n	8003996 <VL53L0X_isqrt+0x12>
 8003990:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8003992:	b912      	cbnz	r2, 800399a <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 8003994:	bd10      	pop	{r4, pc}
		bit >>= 2;
 8003996:	0892      	lsrs	r2, r2, #2
 8003998:	e7f8      	b.n	800398c <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 800399a:	1884      	adds	r4, r0, r2
 800399c:	42a1      	cmp	r1, r4
 800399e:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 80039a2:	bf26      	itte	cs
 80039a4:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 80039a6:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 80039a8:	4618      	movcc	r0, r3
		bit >>= 2;
 80039aa:	0892      	lsrs	r2, r2, #2
 80039ac:	e7f1      	b.n	8003992 <VL53L0X_isqrt+0xe>

080039ae <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80039ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2183      	movs	r1, #131	; 0x83
{
 80039b4:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80039b6:	f001 f933 	bl	8004c20 <VL53L0X_WrByte>
 80039ba:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80039bc:	b980      	cbnz	r0, 80039e0 <VL53L0X_device_read_strobe+0x32>
 80039be:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80039c2:	f10d 0207 	add.w	r2, sp, #7
 80039c6:	2183      	movs	r1, #131	; 0x83
 80039c8:	4630      	mov	r0, r6
 80039ca:	f001 f94b 	bl	8004c64 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80039ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80039d2:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80039d4:	b923      	cbnz	r3, 80039e0 <VL53L0X_device_read_strobe+0x32>
 80039d6:	b918      	cbnz	r0, 80039e0 <VL53L0X_device_read_strobe+0x32>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80039d8:	3d01      	subs	r5, #1
 80039da:	d1f2      	bne.n	80039c2 <VL53L0X_device_read_strobe+0x14>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80039dc:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80039e0:	2201      	movs	r2, #1
 80039e2:	2183      	movs	r1, #131	; 0x83
 80039e4:	4630      	mov	r0, r6
 80039e6:	f001 f91b 	bl	8004c20 <VL53L0X_WrByte>
 80039ea:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 80039ec:	b240      	sxtb	r0, r0
 80039ee:	b002      	add	sp, #8
 80039f0:	bd70      	pop	{r4, r5, r6, pc}

080039f2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80039f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
	uint8_t ReferenceSpadType = 0;
	uint32_t PartUIDUpper = 0;
 80039f6:	f04f 0900 	mov.w	r9, #0
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80039fa:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 80039fe:	b091      	sub	sp, #68	; 0x44
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8003a00:	2e07      	cmp	r6, #7
{
 8003a02:	4604      	mov	r4, r0
 8003a04:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 8003a06:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 8003a0a:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 8003a0e:	f000 8298 	beq.w	8003f42 <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a12:	2201      	movs	r2, #1
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	f001 f903 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a1a:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a1c:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a1e:	21ff      	movs	r1, #255	; 0xff
 8003a20:	4620      	mov	r0, r4
 8003a22:	f001 f8fd 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a26:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a28:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f001 f8f7 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a32:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a34:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003a36:	2206      	movs	r2, #6
 8003a38:	21ff      	movs	r1, #255	; 0xff
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f001 f8f0 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a40:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003a42:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003a44:	f10d 0215 	add.w	r2, sp, #21
 8003a48:	2183      	movs	r1, #131	; 0x83
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f001 f90a 	bl	8004c64 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003a50:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003a54:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003a56:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003a58:	f042 0204 	orr.w	r2, r2, #4
 8003a5c:	2183      	movs	r1, #131	; 0x83
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f001 f8de 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003a64:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003a66:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003a68:	2207      	movs	r2, #7
 8003a6a:	21ff      	movs	r1, #255	; 0xff
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f001 f8d7 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003a72:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003a74:	2201      	movs	r2, #1
 8003a76:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003a78:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f001 f8d0 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003a80:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003a82:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8003a84:	4620      	mov	r0, r4
 8003a86:	f001 f95f 	bl	8004d48 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003a8a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 8003a8c:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	4620      	mov	r0, r4
 8003a94:	f001 f8c4 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 8003a98:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a9a:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 8003a9c:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003aa0:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8003aa2:	f000 8223 	beq.w	8003eec <VL53L0X_get_info_from_device+0x4fa>
 8003aa6:	07f3      	lsls	r3, r6, #31
 8003aa8:	f100 8223 	bmi.w	8003ef2 <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8003aac:	226b      	movs	r2, #107	; 0x6b
 8003aae:	2194      	movs	r1, #148	; 0x94
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f001 f8b5 	bl	8004c20 <VL53L0X_WrByte>
 8003ab6:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff ff78 	bl	80039ae <VL53L0X_device_read_strobe>
 8003abe:	4338      	orrs	r0, r7
 8003ac0:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ac2:	aa06      	add	r2, sp, #24
 8003ac4:	2190      	movs	r1, #144	; 0x90
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f001 f918 	bl	8004cfc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003acc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ace:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003ad0:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003ad6:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8003ada:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f001 f89e 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ae4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003ae6:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7ff ff60 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003aee:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003af0:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003af2:	aa06      	add	r2, sp, #24
 8003af4:	2190      	movs	r1, #144	; 0x90
 8003af6:	4620      	mov	r0, r4
 8003af8:	f001 f900 	bl	8004cfc <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003afc:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003afe:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003b00:	0e1a      	lsrs	r2, r3, #24
 8003b02:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003b06:	0c1a      	lsrs	r2, r3, #16
 8003b08:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003b0c:	0a1a      	lsrs	r2, r3, #8
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003b0e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b10:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003b12:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003b16:	4620      	mov	r0, r4
 8003b18:	2225      	movs	r2, #37	; 0x25
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003b1a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003b1e:	f001 f87f 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b22:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003b24:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ff41 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003b2c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b2e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b30:	aa06      	add	r2, sp, #24
 8003b32:	2190      	movs	r1, #144	; 0x90
 8003b34:	4620      	mov	r0, r4
 8003b36:	f001 f8e1 	bl	8004cfc <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003b3a:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b3c:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003b3e:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b40:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003b42:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b44:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003b46:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8003b4e:	f018 0302 	ands.w	r3, r8, #2
 8003b52:	9302      	str	r3, [sp, #8]
 8003b54:	f000 80db 	beq.w	8003d0e <VL53L0X_get_info_from_device+0x31c>
 8003b58:	f016 0702 	ands.w	r7, r6, #2
 8003b5c:	f040 80d7 	bne.w	8003d0e <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003b60:	2202      	movs	r2, #2
 8003b62:	2194      	movs	r1, #148	; 0x94
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 f85b 	bl	8004c20 <VL53L0X_WrByte>
 8003b6a:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7ff ff1e 	bl	80039ae <VL53L0X_device_read_strobe>
 8003b72:	9b01      	ldr	r3, [sp, #4]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003b74:	f10d 0216 	add.w	r2, sp, #22
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b78:	4318      	orrs	r0, r3
 8003b7a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003b7c:	2190      	movs	r1, #144	; 0x90
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f001 f870 	bl	8004c64 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b84:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003b86:	227b      	movs	r2, #123	; 0x7b
 8003b88:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003b8a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f001 f847 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003b92:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003b94:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7ff ff09 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003b9c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b9e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003ba0:	f10d 0217 	add.w	r2, sp, #23
 8003ba4:	2190      	movs	r1, #144	; 0x90
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f001 f85c 	bl	8004c64 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bac:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003bae:	2277      	movs	r2, #119	; 0x77
 8003bb0:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003bb2:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f001 f833 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003bba:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003bbc:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff fef5 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003bc4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bc6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bc8:	aa06      	add	r2, sp, #24
 8003bca:	2190      	movs	r1, #144	; 0x90
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f001 f895 	bl	8004cfc <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003bd2:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bd4:	b26d      	sxtb	r5, r5
			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003bd6:	0e5a      	lsrs	r2, r3, #25
 8003bd8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003bdc:	f3c3 4286 	ubfx	r2, r3, #18, #7
 8003be0:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003be4:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 8003be8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003bec:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003bf6:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bf8:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003bfa:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003c02:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003c06:	f001 f80b 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c0a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003c0c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff fecd 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003c14:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c16:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c18:	aa06      	add	r2, sp, #24
 8003c1a:	2190      	movs	r1, #144	; 0x90
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f001 f86d 	bl	8004cfc <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003c22:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8003c24:	f89d 2015 	ldrb.w	r2, [sp, #21]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c28:	b26d      	sxtb	r5, r5
			ProductId[4] = (char)(byte +
 8003c2a:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8003c2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003c32:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8003c36:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003c3a:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8003c3e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003c42:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8003c46:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003c4a:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003c4e:	019b      	lsls	r3, r3, #6
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c54:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c56:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003c58:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003c60:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c64:	f000 ffdc 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c68:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c6a:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff fe9e 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003c72:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c74:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c76:	aa06      	add	r2, sp, #24
 8003c78:	2190      	movs	r1, #144	; 0x90
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f001 f83e 	bl	8004cfc <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003c80:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8003c82:	f89d 2015 	ldrb.w	r2, [sp, #21]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c86:	b26d      	sxtb	r5, r5
			ProductId[9] = (char)(byte +
 8003c88:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8003c8c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003c90:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8003c94:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003c98:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8003c9c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003ca0:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003caa:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003cac:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003cae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003cb6:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003cba:	f000 ffb1 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003cbe:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003cc0:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff fe73 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003cc8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003cca:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ccc:	aa06      	add	r2, sp, #24
 8003cce:	2190      	movs	r1, #144	; 0x90
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f001 f813 	bl	8004cfc <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003cd6:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8003cd8:	f89d 2015 	ldrb.w	r2, [sp, #21]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003cdc:	b26d      	sxtb	r5, r5
			ProductId[13] = (char)(byte +
 8003cde:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8003ce2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003ce6:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 8003cea:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003cee:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003cf2:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003cf4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003cf8:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003cfc:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d00:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003d02:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003d06:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
			ProductId[18] = '\0';
 8003d0a:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e

		}

		if (((option & 4) == 4) &&
 8003d0e:	f018 0304 	ands.w	r3, r8, #4
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	f000 80ef 	beq.w	8003ef6 <VL53L0X_get_info_from_device+0x504>
 8003d18:	0777      	lsls	r7, r6, #29
 8003d1a:	f100 80ec 	bmi.w	8003ef6 <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003d1e:	227b      	movs	r2, #123	; 0x7b
 8003d20:	2194      	movs	r1, #148	; 0x94
 8003d22:	4620      	mov	r0, r4
 8003d24:	f000 ff7c 	bl	8004c20 <VL53L0X_WrByte>
 8003d28:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7ff fe3f 	bl	80039ae <VL53L0X_device_read_strobe>
 8003d30:	4338      	orrs	r0, r7
 8003d32:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003d34:	aa07      	add	r2, sp, #28
 8003d36:	2190      	movs	r1, #144	; 0x90
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 ffdf 	bl	8004cfc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d3e:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d40:	227c      	movs	r2, #124	; 0x7c
 8003d42:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003d44:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 ff6a 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003d4c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d4e:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff fe2c 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d56:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d58:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d5a:	aa08      	add	r2, sp, #32
 8003d5c:	2190      	movs	r1, #144	; 0x90
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 ffcc 	bl	8004cfc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d64:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d66:	2273      	movs	r2, #115	; 0x73
 8003d68:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d6a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 ff57 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d72:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d74:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff fe19 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d7c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d7e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d80:	aa06      	add	r2, sp, #24
 8003d82:	2190      	movs	r1, #144	; 0x90
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 ffb9 	bl	8004cfc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d8a:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003d8c:	2274      	movs	r2, #116	; 0x74
 8003d8e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d90:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003d92:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 8003d94:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003d96:	f000 ff43 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d9a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003d9c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fe05 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003da4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003da6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003da8:	aa06      	add	r2, sp, #24
 8003daa:	2190      	movs	r1, #144	; 0x90
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 ffa5 	bl	8004cfc <VL53L0X_RdDWord>
				0x0000000ff) << 8;
 8003db2:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003db4:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003db8:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dba:	2275      	movs	r2, #117	; 0x75
 8003dbc:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dbe:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003dc0:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dc2:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003dc4:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dc6:	f000 ff2b 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dca:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dcc:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7ff fded 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dd4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003dd6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dd8:	aa06      	add	r2, sp, #24
 8003dda:	2190      	movs	r1, #144	; 0x90
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 ff8d 	bl	8004cfc <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003de2:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003de4:	b26d      	sxtb	r5, r5
							<< 8;
 8003de6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003de8:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003dea:	2276      	movs	r2, #118	; 0x76
 8003dec:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dee:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003df0:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003df2:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003df4:	f000 ff14 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003df8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003dfa:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fdd6 	bl	80039ae <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003e02:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e04:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e06:	aa06      	add	r2, sp, #24
 8003e08:	2190      	movs	r1, #144	; 0x90
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 ff76 	bl	8004cfc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e10:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003e12:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003e16:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e18:	4305      	orrs	r5, r0
 8003e1a:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003e1c:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2181      	movs	r1, #129	; 0x81
 8003e22:	4620      	mov	r0, r4
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	f000 fefb 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003e2a:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003e2c:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003e2e:	21ff      	movs	r1, #255	; 0xff
 8003e30:	4620      	mov	r0, r4
 8003e32:	f000 fef5 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003e36:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003e38:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003e3a:	f10d 0215 	add.w	r2, sp, #21
 8003e3e:	2183      	movs	r1, #131	; 0x83
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 ff0f 	bl	8004c64 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003e46:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003e4a:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003e4c:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003e4e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8003e52:	2183      	movs	r1, #131	; 0x83
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 fee3 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003e5a:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003e5c:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e5e:	2201      	movs	r2, #1
 8003e60:	21ff      	movs	r1, #255	; 0xff
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 fedc 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003e68:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e6a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fed5 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e76:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003e78:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	21ff      	movs	r1, #255	; 0xff
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f000 fece 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003e84:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e86:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 fec7 	bl	8004c20 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e92:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003e94:	4305      	orrs	r5, r0
 8003e96:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	bb1d      	cbnz	r5, 8003ee4 <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003e9c:	f1ba 0f00 	cmp.w	sl, #0
 8003ea0:	d001      	beq.n	8003ea6 <VL53L0X_get_info_from_device+0x4b4>
 8003ea2:	07f0      	lsls	r0, r6, #31
 8003ea4:	d52a      	bpl.n	8003efc <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8003ea6:	9a02      	ldr	r2, [sp, #8]
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	d138      	bne.n	8003f1e <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8003eac:	9a01      	ldr	r2, [sp, #4]
 8003eae:	b1aa      	cbz	r2, 8003edc <VL53L0X_get_info_from_device+0x4ea>
 8003eb0:	0772      	lsls	r2, r6, #29
 8003eb2:	d413      	bmi.n	8003edc <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003eb4:	9a07      	ldr	r2, [sp, #28]
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003eb6:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003eb8:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ebc:	9a08      	ldr	r2, [sp, #32]
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ebe:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ec2:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8003ec6:	b13b      	cbz	r3, 8003ed8 <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 8003ec8:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed0:	4353      	muls	r3, r2
 8003ed2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003edc:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003ee0:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	b011      	add	sp, #68	; 0x44
 8003ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8003eec:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 8003eee:	46d3      	mov	fp, sl
 8003ef0:	e62d      	b.n	8003b4e <VL53L0X_get_info_from_device+0x15c>
 8003ef2:	46cb      	mov	fp, r9
 8003ef4:	e62b      	b.n	8003b4e <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003ef6:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003ef8:	463b      	mov	r3, r7
 8003efa:	e790      	b.n	8003e1e <VL53L0X_get_info_from_device+0x42c>
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003efc:	462a      	mov	r2, r5
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003efe:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f02:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8003f06:	f504 7195 	add.w	r1, r4, #298	; 0x12a
					NvmRefGoodSpadMap[i];
 8003f0a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003f0e:	f812 000e 	ldrb.w	r0, [r2, lr]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003f12:	3201      	adds	r2, #1
 8003f14:	2a06      	cmp	r2, #6
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003f16:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003f1a:	d1f8      	bne.n	8003f0e <VL53L0X_get_info_from_device+0x51c>
 8003f1c:	e7c3      	b.n	8003ea6 <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 8003f1e:	07b1      	lsls	r1, r6, #30
 8003f20:	d4c4      	bmi.n	8003eac <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f22:	f89d 2016 	ldrb.w	r2, [sp, #22]
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003f26:	a90b      	add	r1, sp, #44	; 0x2c
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f28:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f2c:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003f30:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f34:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
 8003f38:	9302      	str	r3, [sp, #8]
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003f3a:	f001 fb5a 	bl	80055f2 <strcpy>
 8003f3e:	9b02      	ldr	r3, [sp, #8]
 8003f40:	e7b4      	b.n	8003eac <VL53L0X_get_info_from_device+0x4ba>
 8003f42:	464d      	mov	r5, r9
	return Status;
 8003f44:	e7ce      	b.n	8003ee4 <VL53L0X_get_info_from_device+0x4f2>

08003f46 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8003f46:	b150      	cbz	r0, 8003f5e <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003f4c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	f103 0301 	add.w	r3, r3, #1
 8003f56:	d103      	bne.n	8003f60 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8003f58:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8003f5c:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8003f5e:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8003f60:	0840      	lsrs	r0, r0, #1
 8003f62:	e7f3      	b.n	8003f4c <VL53L0X_encode_timeout+0x6>

08003f64 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003f64:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003f66:	0a00      	lsrs	r0, r0, #8
 8003f68:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	4770      	bx	lr

08003f70 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003f70:	4808      	ldr	r0, [pc, #32]	; (8003f94 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003f76:	4342      	muls	r2, r0
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003f78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f7c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003f80:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f84:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003f88:	fb03 0001 	mla	r0, r3, r1, r0

    return timeout_period_mclks;
}
 8003f8c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	003a2f00 	.word	0x003a2f00

08003f98 <VL53L0X_calc_timeout_us>:
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <VL53L0X_calc_timeout_us+0x1c>)
 8003f9e:	435a      	muls	r2, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003fa0:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8003fa4:	fbb2 f2f0 	udiv	r2, r2, r0

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8003fa8:	434a      	muls	r2, r1
 8003faa:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4

	return actual_timeout_period_us;
}
 8003fae:	fbb2 f0f0 	udiv	r0, r2, r0
 8003fb2:	4770      	bx	lr
 8003fb4:	003a2f00 	.word	0x003a2f00

08003fb8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8003fbc:	2400      	movs	r4, #0
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003fbe:	2902      	cmp	r1, #2
{
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 8003fc4:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8003fc8:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003fcc:	d81d      	bhi.n	800400a <get_sequence_step_timeout+0x52>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003fce:	f10d 0202 	add.w	r2, sp, #2
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	f7fe fb70 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8003fd8:	4605      	mov	r5, r0
 8003fda:	b930      	cbnz	r0, 8003fea <get_sequence_step_timeout+0x32>
			Status = VL53L0X_RdByte(Dev,
 8003fdc:	f10d 0203 	add.w	r2, sp, #3
 8003fe0:	2146      	movs	r1, #70	; 0x46
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f000 fe3e 	bl	8004c64 <VL53L0X_RdByte>
 8003fe8:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8003fea:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003fee:	f7ff ffb9 	bl	8003f64 <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003ff2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003ff6:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f7ff ffcd 	bl	8003f98 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8003ffe:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 8004002:	4628      	mov	r0, r5
 8004004:	b004      	add	sp, #16
 8004006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800400a:	2903      	cmp	r1, #3
 800400c:	d118      	bne.n	8004040 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800400e:	f10d 0202 	add.w	r2, sp, #2
 8004012:	4621      	mov	r1, r4
 8004014:	f7fe fb50 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8004018:	4605      	mov	r5, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d14a      	bne.n	80040b4 <get_sequence_step_timeout+0xfc>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800401e:	4601      	mov	r1, r0
 8004020:	f10d 0202 	add.w	r2, sp, #2
 8004024:	4630      	mov	r0, r6
 8004026:	f7fe fb47 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 800402a:	4605      	mov	r5, r0
 800402c:	b928      	cbnz	r0, 800403a <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 800402e:	aa01      	add	r2, sp, #4
 8004030:	2151      	movs	r1, #81	; 0x51
 8004032:	4630      	mov	r0, r6
 8004034:	f000 fe42 	bl	8004cbc <VL53L0X_RdWord>
 8004038:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800403a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800403e:	e7d6      	b.n	8003fee <get_sequence_step_timeout+0x36>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004040:	2904      	cmp	r1, #4
 8004042:	d139      	bne.n	80040b8 <get_sequence_step_timeout+0x100>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004044:	a902      	add	r1, sp, #8
 8004046:	f7fe fb8a 	bl	800275e <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800404a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800404e:	b369      	cbz	r1, 80040ac <get_sequence_step_timeout+0xf4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004050:	f10d 0202 	add.w	r2, sp, #2
 8004054:	4621      	mov	r1, r4
 8004056:	4630      	mov	r0, r6
 8004058:	f7fe fb2e 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
 800405c:	4605      	mov	r5, r0
 800405e:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8004060:	bb30      	cbnz	r0, 80040b0 <get_sequence_step_timeout+0xf8>
				Status = VL53L0X_RdWord(Dev,
 8004062:	aa01      	add	r2, sp, #4
 8004064:	2151      	movs	r1, #81	; 0x51
 8004066:	4630      	mov	r0, r6
 8004068:	f000 fe28 	bl	8004cbc <VL53L0X_RdWord>
 800406c:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800406e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8004072:	f7ff ff77 	bl	8003f64 <VL53L0X_decode_timeout>
 8004076:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8004078:	b99d      	cbnz	r5, 80040a2 <get_sequence_step_timeout+0xea>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800407a:	f10d 0202 	add.w	r2, sp, #2
 800407e:	2101      	movs	r1, #1
 8004080:	4630      	mov	r0, r6
 8004082:	f7fe fb19 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8004086:	4605      	mov	r5, r0
 8004088:	b990      	cbnz	r0, 80040b0 <get_sequence_step_timeout+0xf8>
			Status = VL53L0X_RdWord(Dev,
 800408a:	f10d 0206 	add.w	r2, sp, #6
 800408e:	2171      	movs	r1, #113	; 0x71
 8004090:	4630      	mov	r0, r6
 8004092:	f000 fe13 	bl	8004cbc <VL53L0X_RdWord>
 8004096:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004098:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800409c:	f7ff ff62 	bl	8003f64 <VL53L0X_decode_timeout>
 80040a0:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80040a2:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80040a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80040a8:	b2a1      	uxth	r1, r4
 80040aa:	e7a5      	b.n	8003ff8 <get_sequence_step_timeout+0x40>
		PreRangeTimeOutMClks = 0;
 80040ac:	460c      	mov	r4, r1
 80040ae:	e7e4      	b.n	800407a <get_sequence_step_timeout+0xc2>
	uint16_t FinalRangeTimeOutMClks = 0;
 80040b0:	2700      	movs	r7, #0
 80040b2:	e7f6      	b.n	80040a2 <get_sequence_step_timeout+0xea>
	uint32_t TimeoutMicroSeconds = 0;
 80040b4:	4620      	mov	r0, r4
 80040b6:	e7a2      	b.n	8003ffe <get_sequence_step_timeout+0x46>
 80040b8:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ba:	4625      	mov	r5, r4
 80040bc:	e79f      	b.n	8003ffe <get_sequence_step_timeout+0x46>

080040be <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80040be:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80040c0:	2902      	cmp	r1, #2
{
 80040c2:	b085      	sub	sp, #20
 80040c4:	4605      	mov	r5, r0
 80040c6:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80040c8:	d81e      	bhi.n	8004108 <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040ca:	f10d 0205 	add.w	r2, sp, #5
 80040ce:	2100      	movs	r1, #0
 80040d0:	f7fe faf2 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80040d4:	4604      	mov	r4, r0
 80040d6:	b9a0      	cbnz	r0, 8004102 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80040d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80040dc:	4639      	mov	r1, r7
 80040de:	4628      	mov	r0, r5
 80040e0:	f7ff ff46 	bl	8003f70 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80040e4:	b283      	uxth	r3, r0
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
 80040ea:	bf8e      	itee	hi
 80040ec:	22ff      	movhi	r2, #255	; 0xff
			else
				MsrcEncodedTimeOut =
 80040ee:	f100 32ff 	addls.w	r2, r0, #4294967295
 80040f2:	b2d2      	uxtbls	r2, r2
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040f4:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80040f8:	2146      	movs	r1, #70	; 0x46
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 fd90 	bl	8004c20 <VL53L0X_WrByte>
 8004100:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8004102:	4620      	mov	r0, r4
 8004104:	b005      	add	sp, #20
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004108:	2903      	cmp	r1, #3
 800410a:	d11f      	bne.n	800414c <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800410c:	f10d 0205 	add.w	r2, sp, #5
 8004110:	2100      	movs	r1, #0
 8004112:	f7fe fad1 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8004116:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800411a:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800411c:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 800411e:	4628      	mov	r0, r5
 8004120:	f7ff ff26 	bl	8003f70 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8004124:	b280      	uxth	r0, r0
 8004126:	f7ff ff0e 	bl	8003f46 <VL53L0X_encode_timeout>
 800412a:	4602      	mov	r2, r0
 800412c:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004130:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8004134:	2c00      	cmp	r4, #0
 8004136:	d1e4      	bne.n	8004102 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8004138:	2151      	movs	r1, #81	; 0x51
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fd80 	bl	8004c40 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8004140:	4604      	mov	r4, r0
 8004142:	2800      	cmp	r0, #0
 8004144:	d1dd      	bne.n	8004102 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004146:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 800414a:	e7da      	b.n	8004102 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800414c:	2904      	cmp	r1, #4
 800414e:	d139      	bne.n	80041c4 <set_sequence_step_timeout+0x106>
			VL53L0X_GetSequenceStepEnables(Dev,
 8004150:	a902      	add	r1, sp, #8
 8004152:	f7fe fb04 	bl	800275e <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8004156:	f89d 600b 	ldrb.w	r6, [sp, #11]
 800415a:	b1b6      	cbz	r6, 800418a <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800415c:	f10d 0205 	add.w	r2, sp, #5
 8004160:	2100      	movs	r1, #0
 8004162:	4628      	mov	r0, r5
 8004164:	f7fe faa8 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8004168:	4604      	mov	r4, r0
 800416a:	2800      	cmp	r0, #0
 800416c:	d1c9      	bne.n	8004102 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800416e:	f10d 0206 	add.w	r2, sp, #6
 8004172:	2151      	movs	r1, #81	; 0x51
 8004174:	4628      	mov	r0, r5
 8004176:	f000 fda1 	bl	8004cbc <VL53L0X_RdWord>
 800417a:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 800417c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004180:	f7ff fef0 	bl	8003f64 <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8004184:	2c00      	cmp	r4, #0
 8004186:	d1bc      	bne.n	8004102 <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 8004188:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800418a:	f10d 0205 	add.w	r2, sp, #5
 800418e:	2101      	movs	r1, #1
 8004190:	4628      	mov	r0, r5
 8004192:	f7fe fa91 	bl	80026b8 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8004196:	4604      	mov	r4, r0
 8004198:	2800      	cmp	r0, #0
 800419a:	d1b2      	bne.n	8004102 <set_sequence_step_timeout+0x44>
				FinalRangeTimeOutMClks =
 800419c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80041a0:	4639      	mov	r1, r7
 80041a2:	4628      	mov	r0, r5
 80041a4:	f7ff fee4 	bl	8003f70 <VL53L0X_calc_timeout_mclks>
				FinalRangeEncodedTimeOut =
 80041a8:	4430      	add	r0, r6
 80041aa:	f7ff fecc 	bl	8003f46 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80041ae:	2171      	movs	r1, #113	; 0x71
 80041b0:	4602      	mov	r2, r0
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 fd44 	bl	8004c40 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 80041b8:	4604      	mov	r4, r0
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d1a1      	bne.n	8004102 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80041be:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 80041c2:	e79e      	b.n	8004102 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041c4:	f06f 0403 	mvn.w	r4, #3
 80041c8:	e79b      	b.n	8004102 <set_sequence_step_timeout+0x44>

080041ca <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80041ca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80041ce:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80041d0:	f012 0701 	ands.w	r7, r2, #1
{
 80041d4:	4605      	mov	r5, r0
 80041d6:	4688      	mov	r8, r1
 80041d8:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 80041da:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80041de:	f040 80e5 	bne.w	80043ac <VL53L0X_set_vcsel_pulse_period+0x1e2>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d143      	bne.n	800426e <VL53L0X_set_vcsel_pulse_period+0xa4>
 80041e6:	f1a2 030c 	sub.w	r3, r2, #12
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	f200 80de 	bhi.w	80043ac <VL53L0X_set_vcsel_pulse_period+0x1e2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80041f0:	2a0c      	cmp	r2, #12
 80041f2:	d178      	bne.n	80042e6 <VL53L0X_set_vcsel_pulse_period+0x11c>

			Status = VL53L0X_WrByte(Dev,
 80041f4:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {

			Status = VL53L0X_WrByte(Dev,
 80041f6:	2157      	movs	r1, #87	; 0x57
 80041f8:	f000 fd12 	bl	8004c20 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80041fc:	2208      	movs	r2, #8
 80041fe:	2156      	movs	r1, #86	; 0x56
 8004200:	4628      	mov	r0, r5
 8004202:	f000 fd0d 	bl	8004c20 <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8004206:	2800      	cmp	r0, #0
 8004208:	d16a      	bne.n	80042e0 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800420a:	0874      	lsrs	r4, r6, #1
 800420c:	3c01      	subs	r4, #1
 800420e:	b2e4      	uxtb	r4, r4
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004210:	aa02      	add	r2, sp, #8
 8004212:	2103      	movs	r1, #3
 8004214:	4628      	mov	r0, r5
 8004216:	f7ff fecf 	bl	8003fb8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800421a:	b9b0      	cbnz	r0, 800424a <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = get_sequence_step_timeout(Dev,
 800421c:	aa03      	add	r2, sp, #12
 800421e:	2102      	movs	r1, #2
 8004220:	4628      	mov	r0, r5
 8004222:	f7ff fec9 	bl	8003fb8 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004226:	b980      	cbnz	r0, 800424a <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = VL53L0X_WrByte(Dev,
 8004228:	4622      	mov	r2, r4
 800422a:	2150      	movs	r1, #80	; 0x50
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fcf7 	bl	8004c20 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004232:	b950      	cbnz	r0, 800424a <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8004234:	9a02      	ldr	r2, [sp, #8]
 8004236:	2103      	movs	r1, #3
 8004238:	4628      	mov	r0, r5
 800423a:	f7ff ff40 	bl	80040be <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800423e:	b920      	cbnz	r0, 800424a <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8004240:	9a03      	ldr	r2, [sp, #12]
 8004242:	2102      	movs	r1, #2
 8004244:	4628      	mov	r0, r5
 8004246:	f7ff ff3a 	bl	80040be <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800424a:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800424e:	2800      	cmp	r0, #0
 8004250:	d146      	bne.n	80042e0 <VL53L0X_set_vcsel_pulse_period+0x116>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004252:	6969      	ldr	r1, [r5, #20]
 8004254:	4628      	mov	r0, r5
 8004256:	f7fe fa2b 	bl	80026b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800425a:	2800      	cmp	r0, #0
 800425c:	d140      	bne.n	80042e0 <VL53L0X_set_vcsel_pulse_period+0x116>
		Status = VL53L0X_perform_phase_calibration(
 800425e:	4602      	mov	r2, r0
 8004260:	2301      	movs	r3, #1
 8004262:	f10d 0103 	add.w	r1, sp, #3
 8004266:	4628      	mov	r0, r5
 8004268:	f7ff f9eb 	bl	8003642 <VL53L0X_perform_phase_calibration>
 800426c:	e038      	b.n	80042e0 <VL53L0X_set_vcsel_pulse_period+0x116>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800426e:	2901      	cmp	r1, #1
 8004270:	f040 8092 	bne.w	8004398 <VL53L0X_set_vcsel_pulse_period+0x1ce>
 8004274:	f1a2 0308 	sub.w	r3, r2, #8
 8004278:	2b06      	cmp	r3, #6
 800427a:	f200 8097 	bhi.w	80043ac <VL53L0X_set_vcsel_pulse_period+0x1e2>
		if (VCSELPulsePeriodPCLK == 8) {
 800427e:	2a08      	cmp	r2, #8
 8004280:	d13d      	bne.n	80042fe <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 8004282:	2210      	movs	r2, #16
 8004284:	2148      	movs	r1, #72	; 0x48
 8004286:	f000 fccb 	bl	8004c20 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800428a:	4632      	mov	r2, r6
 800428c:	2147      	movs	r1, #71	; 0x47
 800428e:	4628      	mov	r0, r5
 8004290:	f000 fcc6 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004294:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8004296:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8004298:	2132      	movs	r1, #50	; 0x32
 800429a:	4628      	mov	r0, r5
 800429c:	f000 fcc0 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80042a0:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 80042a2:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 80042a4:	2130      	movs	r1, #48	; 0x30
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fcba 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80042ac:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 80042ae:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80042b0:	4642      	mov	r2, r8
 80042b2:	21ff      	movs	r1, #255	; 0xff
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 fcb3 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80042ba:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 80042bc:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80042be:	4304      	orrs	r4, r0
 80042c0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 80042c2:	2130      	movs	r1, #48	; 0x30
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fcab 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80042ca:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 80042cc:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80042ce:	21ff      	movs	r1, #255	; 0xff
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fca5 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80042d6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80042d8:	4320      	orrs	r0, r4
 80042da:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80042dc:	2800      	cmp	r0, #0
 80042de:	d068      	beq.n	80043b2 <VL53L0X_set_vcsel_pulse_period+0x1e8>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 80042e0:	b004      	add	sp, #16
 80042e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 80042e6:	2a0e      	cmp	r2, #14
 80042e8:	d101      	bne.n	80042ee <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 80042ea:	2230      	movs	r2, #48	; 0x30
 80042ec:	e783      	b.n	80041f6 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 16) {
 80042ee:	2a10      	cmp	r2, #16
 80042f0:	d101      	bne.n	80042f6 <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	e77f      	b.n	80041f6 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 18) {
 80042f6:	2a12      	cmp	r2, #18
 80042f8:	d14e      	bne.n	8004398 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 80042fa:	2250      	movs	r2, #80	; 0x50
 80042fc:	e77b      	b.n	80041f6 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80042fe:	2a0a      	cmp	r2, #10
 8004300:	d120      	bne.n	8004344 <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 8004302:	2228      	movs	r2, #40	; 0x28
 8004304:	2148      	movs	r1, #72	; 0x48
 8004306:	f000 fc8b 	bl	8004c20 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800430a:	2208      	movs	r2, #8
 800430c:	2147      	movs	r1, #71	; 0x47
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fc86 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004314:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8004316:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8004318:	2132      	movs	r1, #50	; 0x32
 800431a:	4628      	mov	r0, r5
 800431c:	f000 fc80 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004320:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8004322:	4304      	orrs	r4, r0
 8004324:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8004326:	2130      	movs	r1, #48	; 0x30
 8004328:	4628      	mov	r0, r5
 800432a:	f000 fc79 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800432e:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 8004330:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004332:	21ff      	movs	r1, #255	; 0xff
 8004334:	4628      	mov	r0, r5
 8004336:	f000 fc73 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800433a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800433c:	4304      	orrs	r4, r0
 800433e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8004340:	2220      	movs	r2, #32
 8004342:	e7be      	b.n	80042c2 <VL53L0X_set_vcsel_pulse_period+0xf8>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8004344:	2a0c      	cmp	r2, #12
 8004346:	d112      	bne.n	800436e <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 8004348:	2238      	movs	r2, #56	; 0x38
 800434a:	2148      	movs	r1, #72	; 0x48
 800434c:	f000 fc68 	bl	8004c20 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8004350:	2208      	movs	r2, #8
 8004352:	2147      	movs	r1, #71	; 0x47
 8004354:	4628      	mov	r0, r5
 8004356:	f000 fc63 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800435a:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 800435c:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 800435e:	2132      	movs	r1, #50	; 0x32
 8004360:	4628      	mov	r0, r5
 8004362:	f000 fc5d 	bl	8004c20 <VL53L0X_WrByte>
 8004366:	4304      	orrs	r4, r0
 8004368:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800436a:	2208      	movs	r2, #8
 800436c:	e7db      	b.n	8004326 <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800436e:	2a0e      	cmp	r2, #14
 8004370:	d112      	bne.n	8004398 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8004372:	2248      	movs	r2, #72	; 0x48
 8004374:	4611      	mov	r1, r2
 8004376:	f000 fc53 	bl	8004c20 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800437a:	2208      	movs	r2, #8
 800437c:	2147      	movs	r1, #71	; 0x47
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fc4e 	bl	8004c20 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004384:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8004386:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8004388:	2132      	movs	r1, #50	; 0x32
 800438a:	4628      	mov	r0, r5
 800438c:	f000 fc48 	bl	8004c20 <VL53L0X_WrByte>
 8004390:	4304      	orrs	r4, r0
 8004392:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8004394:	2207      	movs	r2, #7
 8004396:	e7c6      	b.n	8004326 <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004398:	0874      	lsrs	r4, r6, #1
 800439a:	3c01      	subs	r4, #1
 800439c:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 800439e:	f1b8 0f00 	cmp.w	r8, #0
 80043a2:	f43f af35 	beq.w	8004210 <VL53L0X_set_vcsel_pulse_period+0x46>
 80043a6:	f1b8 0f01 	cmp.w	r8, #1
 80043aa:	d005      	beq.n	80043b8 <VL53L0X_set_vcsel_pulse_period+0x1ee>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043ac:	f06f 0003 	mvn.w	r0, #3
 80043b0:	e796      	b.n	80042e0 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80043b2:	0874      	lsrs	r4, r6, #1
 80043b4:	3c01      	subs	r4, #1
 80043b6:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 80043b8:	aa01      	add	r2, sp, #4
 80043ba:	2104      	movs	r1, #4
 80043bc:	4628      	mov	r0, r5
 80043be:	f7ff fdfb 	bl	8003fb8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80043c2:	b950      	cbnz	r0, 80043da <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = VL53L0X_WrByte(Dev,
 80043c4:	4622      	mov	r2, r4
 80043c6:	2170      	movs	r1, #112	; 0x70
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 fc29 	bl	8004c20 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80043ce:	b920      	cbnz	r0, 80043da <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = set_sequence_step_timeout(Dev,
 80043d0:	9a01      	ldr	r2, [sp, #4]
 80043d2:	2104      	movs	r1, #4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff fe72 	bl	80040be <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80043da:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 80043de:	e736      	b.n	800424e <VL53L0X_set_vcsel_pulse_period+0x84>

080043e0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80043e0:	b513      	push	{r0, r1, r4, lr}
 80043e2:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80043e4:	b121      	cbz	r1, 80043f0 <VL53L0X_get_vcsel_pulse_period+0x10>
 80043e6:	2901      	cmp	r1, #1
 80043e8:	d00f      	beq.n	800440a <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043ea:	f06f 0003 	mvn.w	r0, #3
 80043ee:	e00a      	b.n	8004406 <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 80043f0:	2150      	movs	r1, #80	; 0x50
 80043f2:	f10d 0207 	add.w	r2, sp, #7
		Status = VL53L0X_RdByte(Dev,
 80043f6:	f000 fc35 	bl	8004c64 <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 80043fa:	b920      	cbnz	r0, 8004406 <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80043fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004400:	3301      	adds	r3, #1
 8004402:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8004404:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8004406:	b002      	add	sp, #8
 8004408:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 800440a:	f10d 0207 	add.w	r2, sp, #7
 800440e:	2170      	movs	r1, #112	; 0x70
 8004410:	e7f1      	b.n	80043f6 <VL53L0X_get_vcsel_pulse_period+0x16>

08004412 <VL53L0X_set_measurement_timing_budget_micro_seconds>:
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004412:	2300      	movs	r3, #0
 8004414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800441c:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8004420:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8004424:	4299      	cmp	r1, r3
{
 8004426:	4606      	mov	r6, r0
 8004428:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 800442a:	d804      	bhi.n	8004436 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 800442c:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8004430:	4628      	mov	r0, r5
 8004432:	b005      	add	sp, #20
 8004434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004436:	a902      	add	r1, sp, #8
 8004438:	f7fe f991 	bl	800275e <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 800443c:	4605      	mov	r5, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	d1f6      	bne.n	8004430 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8004442:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 8004446:	f6a7 3436 	subw	r4, r7, #2870	; 0xb36
	if (Status == VL53L0X_ERROR_NONE &&
 800444a:	b92b      	cbnz	r3, 8004458 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 800444c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004450:	b913      	cbnz	r3, 8004458 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 8004452:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004456:	b1fb      	cbz	r3, 8004498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 8004458:	466a      	mov	r2, sp
 800445a:	2102      	movs	r1, #2
 800445c:	4630      	mov	r0, r6
 800445e:	f7ff fdab 	bl	8003fb8 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8004462:	bba8      	cbnz	r0, 80044d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 8004464:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004468:	b12b      	cbz	r3, 8004476 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800446a:	9b00      	ldr	r3, [sp, #0]
 800446c:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8004470:	429c      	cmp	r4, r3
 8004472:	d9db      	bls.n	800442c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8004474:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8004476:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800447a:	b933      	cbnz	r3, 800448a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800447c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004480:	b153      	cbz	r3, 8004498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004482:	9b00      	ldr	r3, [sp, #0]
 8004484:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004488:	e003      	b.n	8004492 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8004490:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004492:	42a3      	cmp	r3, r4
 8004494:	d2ca      	bcs.n	800442c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8004496:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 8004498:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800449c:	b15b      	cbz	r3, 80044b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 800449e:	aa01      	add	r2, sp, #4
 80044a0:	2103      	movs	r1, #3
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7ff fd88 	bl	8003fb8 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	d2bc      	bcs.n	800442c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 80044b2:	b968      	cbnz	r0, 80044d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80044b4:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 80044b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0b8      	beq.n	8004430 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 80044be:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80044c2:	2104      	movs	r1, #4
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff fdfa 	bl	80040be <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80044ca:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 80044cc:	4605      	mov	r5, r0
 80044ce:	e7af      	b.n	8004430 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 80044d0:	4605      	mov	r5, r0
 80044d2:	e7ad      	b.n	8004430 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080044d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80044d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	b086      	sub	sp, #24
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80044dc:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80044e2:	f640 3336 	movw	r3, #2870	; 0xb36
{
 80044e6:	460c      	mov	r4, r1
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80044e8:	600b      	str	r3, [r1, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80044ea:	a904      	add	r1, sp, #16
{
 80044ec:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80044ee:	f7fe f936 	bl	800275e <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80044f2:	4605      	mov	r5, r0
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d136      	bne.n	8004566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80044f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80044fc:	b92b      	cbnz	r3, 800450a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 80044fe:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004502:	b913      	cbnz	r3, 800450a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 8004504:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004508:	b1cb      	cbz	r3, 800453e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 800450a:	aa02      	add	r2, sp, #8
 800450c:	2102      	movs	r1, #2
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff fd52 	bl	8003fb8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004514:	2800      	cmp	r0, #0
 8004516:	d140      	bne.n	800459a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8004518:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800451c:	b12b      	cbz	r3, 800452a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 800451e:	9b02      	ldr	r3, [sp, #8]
 8004520:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	4413      	add	r3, r2
 8004528:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800452a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800452e:	b1eb      	cbz	r3, 800456c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004530:	9b02      	ldr	r3, [sp, #8]
 8004532:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 800453c:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 800453e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004542:	b15b      	cbz	r3, 800455c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 8004544:	aa03      	add	r2, sp, #12
 8004546:	2103      	movs	r1, #3
 8004548:	4630      	mov	r0, r6
 800454a:	f7ff fd35 	bl	8003fb8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	4413      	add	r3, r2
 8004558:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800455a:	b9f0      	cbnz	r0, 800459a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800455c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004560:	b973      	cbnz	r3, 8004580 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004566:	4628      	mov	r0, r5
 8004568:	b006      	add	sp, #24
 800456a:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800456c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e4      	beq.n	800453e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	4413      	add	r3, r2
 800457e:	e7dd      	b.n	800453c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8004580:	aa01      	add	r2, sp, #4
 8004582:	2104      	movs	r1, #4
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff fd17 	bl	8003fb8 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	4413      	add	r3, r2
 8004594:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8004596:	2800      	cmp	r0, #0
 8004598:	d0e3      	beq.n	8004562 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 800459a:	4605      	mov	r5, r0
 800459c:	e7e3      	b.n	8004566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

0800459e <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800459e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80045a0:	2200      	movs	r2, #0
{
 80045a2:	4606      	mov	r6, r0
 80045a4:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045a6:	4610      	mov	r0, r2
 80045a8:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80045aa:	5cab      	ldrb	r3, [r5, r2]
 80045ac:	eb05 0e02 	add.w	lr, r5, r2
 80045b0:	b103      	cbz	r3, 80045b4 <VL53L0X_load_tuning_settings+0x16>
 80045b2:	b108      	cbz	r0, 80045b8 <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80045b4:	b003      	add	sp, #12
 80045b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 80045b8:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 80045ba:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 80045be:	d12c      	bne.n	800461a <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 80045c0:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 80045c2:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d83a      	bhi.n	800463e <VL53L0X_load_tuning_settings+0xa0>
 80045c8:	e8df f003 	tbb	[pc, r3]
 80045cc:	1e150c02 	.word	0x1e150c02
				msb = *(pTuningSettingBuffer + Index);
 80045d0:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045d2:	f89e 3003 	ldrb.w	r3, [lr, #3]
				Index++;
 80045d6:	1d14      	adds	r4, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045d8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80045dc:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045e0:	4622      	mov	r2, r4
 80045e2:	e7e2      	b.n	80045aa <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 80045e4:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045e6:	f89e 3003 	ldrb.w	r3, [lr, #3]
				Index++;
 80045ea:	1d14      	adds	r4, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045ec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80045f0:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 80045f4:	e7f4      	b.n	80045e0 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 80045f6:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045f8:	f89e 3003 	ldrb.w	r3, [lr, #3]
				Index++;
 80045fc:	1d14      	adds	r4, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80045fe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004602:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8004606:	e7eb      	b.n	80045e0 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8004608:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800460a:	f89e 3003 	ldrb.w	r3, [lr, #3]
				Index++;
 800460e:	1d14      	adds	r4, r2, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004610:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004614:	f8a6 313c 	strh.w	r3, [r6, #316]	; 0x13c
				break;
 8004618:	e7e2      	b.n	80045e0 <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 800461a:	2b04      	cmp	r3, #4
 800461c:	d80f      	bhi.n	800463e <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 800461e:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 8004620:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8004622:	4298      	cmp	r0, r3
 8004624:	db05      	blt.n	8004632 <VL53L0X_load_tuning_settings+0x94>
 8004626:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004628:	4630      	mov	r0, r6
 800462a:	463a      	mov	r2, r7
 800462c:	f000 fac4 	bl	8004bb8 <VL53L0X_WriteMulti>
 8004630:	e7d6      	b.n	80045e0 <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004632:	eb0e 0400 	add.w	r4, lr, r0
 8004636:	78a4      	ldrb	r4, [r4, #2]
 8004638:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 800463a:	3001      	adds	r0, #1
 800463c:	e7f1      	b.n	8004622 <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800463e:	f06f 0003 	mvn.w	r0, #3
 8004642:	e7cd      	b.n	80045e0 <VL53L0X_load_tuning_settings+0x42>

08004644 <VL53L0X_get_total_xtalk_rate>:

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004644:	2300      	movs	r3, #0
{
 8004646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004648:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 800464a:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800464c:	f10d 0107 	add.w	r1, sp, #7
{
 8004650:	4605      	mov	r5, r0
 8004652:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004654:	f7fe f8b9 	bl	80027ca <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8004658:	b940      	cbnz	r0, 800466c <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 800465a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800465e:	b12b      	cbz	r3, 800466c <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8004660:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8004662:	6a2b      	ldr	r3, [r5, #32]
 8004664:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004666:	3380      	adds	r3, #128	; 0x80
 8004668:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 800466a:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 800466c:	b002      	add	sp, #8
 800466e:	bd70      	pop	{r4, r5, r6, pc}

08004670 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004670:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004672:	68cb      	ldr	r3, [r1, #12]
{
 8004674:	4614      	mov	r4, r2
	*ptotal_signal_rate_mcps =
 8004676:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8004678:	aa01      	add	r2, sp, #4
 800467a:	f7ff ffe3 	bl	8004644 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800467e:	b918      	cbnz	r0, 8004688 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	9a01      	ldr	r2, [sp, #4]
 8004684:	4413      	add	r3, r2
 8004686:	6023      	str	r3, [r4, #0]

	return Status;
}
 8004688:	b002      	add	sp, #8
 800468a:	bd10      	pop	{r4, pc}

0800468c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 800468e:	f8b0 4154 	ldrh.w	r4, [r0, #340]	; 0x154

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004692:	f8d0 5158 	ldr.w	r5, [r0, #344]	; 0x158
{
 8004696:	9e07      	ldr	r6, [sp, #28]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004698:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800469a:	3580      	adds	r5, #128	; 0x80
 800469c:	0a2d      	lsrs	r5, r5, #8
{
 800469e:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm *= dmaxCalRange_mm;
 80046a0:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 80046a2:	b152      	cbz	r2, 80046ba <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80046a4:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80046a6:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80046aa:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80046ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80046b2:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80046b4:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80046b8:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80046ba:	9c06      	ldr	r4, [sp, #24]
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80046bc:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80046c0:	435c      	muls	r4, r3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80046c2:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80046c6:	0c24      	lsrs	r4, r4, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80046c8:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80046cc:	2406      	movs	r4, #6
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80046ce:	0c09      	lsrs	r1, r1, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80046d0:	3103      	adds	r1, #3
 80046d2:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80046d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 80046da:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80046de:	bf3f      	itttt	cc
 80046e0:	3603      	addcc	r6, #3
 80046e2:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80046e6:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80046ea:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 80046ee:	bf3a      	itte	cc
 80046f0:	0c0c      	lsrcc	r4, r1, #16

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80046f2:	fb04 f104 	mulcc.w	r1, r4, r4
		minSignalNeeded_p3 = 0xfff00000;
 80046f6:	4917      	ldrcs	r1, [pc, #92]	; (8004754 <VL53L0X_calc_dmax+0xc8>)

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80046f8:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 80046fc:	440c      	add	r4, r1
	minSignalNeeded /= peakVcselDuration_us;
 80046fe:	fbb4 f4f7 	udiv	r4, r4, r7
	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
	minSignalNeeded /= minSignalNeeded_p4;
 8004702:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded <<= 14;
 8004704:	03a4      	lsls	r4, r4, #14
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004706:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8004708:	fbb4 f4f3 	udiv	r4, r4, r3
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800470c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	minSignalNeeded *= minSignalNeeded_p1;
 8004710:	4354      	muls	r4, r2
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004712:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8004716:	fbb4 f4f6 	udiv	r4, r4, r6
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800471a:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded <<= 4;
 800471e:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004720:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004724:	0980      	lsrs	r0, r0, #6
 8004726:	f7ff f92d 	bl	8003984 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800472a:	fbb4 f6f6 	udiv	r6, r4, r6
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800472e:	4607      	mov	r7, r0

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8004730:	b136      	cbz	r6, 8004740 <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8004732:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004736:	fbb4 f4f3 	udiv	r4, r4, r3
 800473a:	442c      	add	r4, r5
 800473c:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff f91f 	bl	8003984 <VL53L0X_isqrt>
 8004746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004748:	4287      	cmp	r7, r0
 800474a:	bf94      	ite	ls
 800474c:	601f      	strls	r7, [r3, #0]
 800474e:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8004750:	2000      	movs	r0, #0
 8004752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004754:	fff00000 	.word	0xfff00000

08004758 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4605      	mov	r5, r0
 800475e:	4689      	mov	r9, r1
 8004760:	b08f      	sub	sp, #60	; 0x3c
 8004762:	9309      	str	r3, [sp, #36]	; 0x24
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8004764:	6a03      	ldr	r3, [r0, #32]
{
 8004766:	9208      	str	r2, [sp, #32]
	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8004768:	930c      	str	r3, [sp, #48]	; 0x30
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 800476a:	68cb      	ldr	r3, [r1, #12]
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800476c:	aa0d      	add	r2, sp, #52	; 0x34
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800476e:	690e      	ldr	r6, [r1, #16]
	correctedSignalRate_mcps =
 8004770:	930a      	str	r3, [sp, #40]	; 0x28
	Status = VL53L0X_get_total_signal_rate(
 8004772:	f7ff ff7d 	bl	8004670 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8004776:	aa0c      	add	r2, sp, #48	; 0x30
 8004778:	4649      	mov	r1, r9
 800477a:	4628      	mov	r0, r5
 800477c:	f7ff ff62 	bl	8004644 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8004780:	4683      	mov	fp, r0
 8004782:	bb98      	cbnz	r0, 80047ec <VL53L0X_calc_sigma_estimate+0x94>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004784:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004788:	f895 40e0 	ldrb.w	r4, [r5, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800478c:	4619      	mov	r1, r3
 800478e:	4622      	mov	r2, r4
 8004790:	4628      	mov	r0, r5
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004792:	9305      	str	r3, [sp, #20]
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8004794:	f7ff fbec 	bl	8003f70 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8004798:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800479c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80047a0:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
 80047a4:	4619      	mov	r1, r3
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80047a6:	4607      	mov	r7, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80047a8:	4628      	mov	r0, r5
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80047aa:	9306      	str	r3, [sp, #24]
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80047ac:	f7ff fbe0 	bl	8003f70 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80047b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 80047b2:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80047b4:	fb08 f403 	mul.w	r4, r8, r3
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80047b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80047ba:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80047be:	f103 0380 	add.w	r3, r3, #128	; 0x80
		vcselWidth = 3;
 80047c2:	bf0c      	ite	eq
 80047c4:	2102      	moveq	r1, #2
 80047c6:	2103      	movne	r1, #3
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80047c8:	920b      	str	r2, [sp, #44]	; 0x2c
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80047ca:	ea5f 4e14 	movs.w	lr, r4, lsr #16
		totalSignalRate_mcps <<= 8;
 80047ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047d2:	9207      	str	r2, [sp, #28]
 80047d4:	920d      	str	r2, [sp, #52]	; 0x34
 80047d6:	f8df a194 	ldr.w	sl, [pc, #404]	; 800496c <VL53L0X_calc_sigma_estimate+0x214>
	if (peakSignalRate_kcps == 0) {
 80047da:	d10b      	bne.n	80047f4 <VL53L0X_calc_sigma_estimate+0x9c>
		*pSigmaEstimate = cSigmaEstMax;
 80047dc:	9b08      	ldr	r3, [sp, #32]
 80047de:	f8c3 a000 	str.w	sl, [r3]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80047e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80047e4:	f8c5 a140 	str.w	sl, [r5, #320]	; 0x140
		*pDmax_mm = 0;
 80047e8:	f8c3 b000 	str.w	fp, [r3]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80047ec:	4658      	mov	r0, fp
 80047ee:	b00f      	add	sp, #60	; 0x3c
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80047f4:	4438      	add	r0, r7
		peakVcselDuration_us = vcselWidth * 2048 *
 80047f6:	02c0      	lsls	r0, r0, #11
 80047f8:	4341      	muls	r1, r0
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80047fa:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 80047fe:	fbb1 f1f8 	udiv	r1, r1, r8
		peakVcselDuration_us *= cPllPeriod_ps;
 8004802:	f240 6777 	movw	r7, #1655	; 0x677
 8004806:	434f      	muls	r7, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004808:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800480c:	fbb7 f7f8 	udiv	r7, r7, r8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8004810:	fb08 f606 	mul.w	r6, r8, r6
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8004814:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004970 <VL53L0X_calc_sigma_estimate+0x218>
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8004818:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800481a:	ea06 060b 	and.w	r6, r6, fp
 800481e:	fbb6 fefe 	udiv	lr, r6, lr
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8004822:	437b      	muls	r3, r7
 8004824:	4e4f      	ldr	r6, [pc, #316]	; (8004964 <VL53L0X_calc_sigma_estimate+0x20c>)
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8004826:	3380      	adds	r3, #128	; 0x80
		if (vcselTotalEventsRtn < 1)
 8004828:	0a1b      	lsrs	r3, r3, #8
			vcselTotalEventsRtn = 1;
 800482a:	bf08      	it	eq
 800482c:	2301      	moveq	r3, #1
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800482e:	200c      	movs	r0, #12
 8004830:	45b6      	cmp	lr, r6
 8004832:	bf28      	it	cs
 8004834:	46b6      	movcs	lr, r6
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8004836:	f44f 7616 	mov.w	r6, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800483a:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800483c:	fb06 f60e 	mul.w	r6, r6, lr
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8004840:	f7ff f8a0 	bl	8003984 <VL53L0X_isqrt>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8004844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8004846:	0041      	lsls	r1, r0, #1
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8004848:	fb08 f002 	mul.w	r0, r8, r2
			2 * xTalkCompRate_kcps) + 500)/1000;
 800484c:	f5b0 1f48 	cmp.w	r0, #3276800	; 0x320000
 8004850:	bf28      	it	cs
 8004852:	f44f 1048 	movcs.w	r0, #3276800	; 0x320000
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004856:	ea04 0b0b 	and.w	fp, r4, fp
 800485a:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
			2 * xTalkCompRate_kcps) + 500)/1000;
 800485e:	ebab 0040 	sub.w	r0, fp, r0, lsl #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004862:	fbb0 f0f8 	udiv	r0, r0, r8
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8004866:	fbbb f8f8 	udiv	r8, fp, r8
		diff1_mcps <<= 8;
 800486a:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800486c:	fbb0 f8f8 	udiv	r8, r0, r8
		if(pRangingMeasurementData->RangeStatus != 0){
 8004870:	f899 0018 	ldrb.w	r0, [r9, #24]
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8004874:	f8b9 3008 	ldrh.w	r3, [r9, #8]
		if(pRangingMeasurementData->RangeStatus != 0){
 8004878:	2800      	cmp	r0, #0
 800487a:	d170      	bne.n	800495e <VL53L0X_calc_sigma_estimate+0x206>
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800487c:	4c3a      	ldr	r4, [pc, #232]	; (8004968 <VL53L0X_calc_sigma_estimate+0x210>)
		xTalkCorrection <<= 8;
 800487e:	ea4f 2808 	mov.w	r8, r8, lsl #8
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8004882:	435c      	muls	r4, r3
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8004884:	f241 235c 	movw	r3, #4700	; 0x125c
 8004888:	fbb4 f4f3 	udiv	r4, r4, r3
			pwMult *= ((1 << 16) - xTalkCorrection);
 800488c:	f5c8 3880 	rsb	r8, r8, #65536	; 0x10000
 8004890:	fb04 f408 	mul.w	r4, r4, r8
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8004894:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8004898:	0c24      	lsrs	r4, r4, #16
			pwMult += (1 << 16);
 800489a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			pwMult >>= 1;
 800489e:	0864      	lsrs	r4, r4, #1
			pwMult = pwMult * pwMult;
 80048a0:	4364      	muls	r4, r4
			pwMult >>= 14;
 80048a2:	0ba4      	lsrs	r4, r4, #14
		sqr1 = pwMult * sigmaEstimateP1;
 80048a4:	f44f 7848 	mov.w	r8, #800	; 0x320
		sqr2 = (sqr2 + 0x8000) >> 16;
 80048a8:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
		sqr1 = pwMult * sigmaEstimateP1;
 80048ac:	fb08 f004 	mul.w	r0, r8, r4
		sqr2 = (sqr2 + 0x8000) >> 16;
 80048b0:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 80048b2:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 80048b4:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80048b8:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80048ba:	fb00 3000 	mla	r0, r0, r0, r3
 80048be:	910b      	str	r1, [sp, #44]	; 0x2c
 80048c0:	f7ff f860 	bl	8003984 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 80048c4:	ea4f 4900 	mov.w	r9, r0, lsl #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80048c8:	2064      	movs	r0, #100	; 0x64
 80048ca:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80048ce:	fbb9 f9f0 	udiv	r9, r9, r0
 80048d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
		sigmaEstRtn		 += 5000;
 80048d4:	f640 33b5 	movw	r3, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80048d8:	fbb9 f9f1 	udiv	r9, r9, r1
		sigmaEstRtn		 += 5000;
 80048dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80048e0:	fb03 1909 	mla	r9, r3, r9, r1
		sigmaEstRtn		 /= 10000;
 80048e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80048e8:	fbb9 f9f1 	udiv	r9, r9, r1
				finalRangeIntegrationTimeMilliSecs/2)/
 80048ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
		finalRangeIntegrationTimeMilliSecs =
 80048f0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80048f4:	9a06      	ldr	r2, [sp, #24]
 80048f6:	9b05      	ldr	r3, [sp, #20]
 80048f8:	f5b9 4f70 	cmp.w	r9, #61440	; 0xf000
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
				finalRangeIntegrationTimeMilliSecs/2)/
 8004902:	fbb3 f1f1 	udiv	r1, r3, r1
		finalRangeIntegrationTimeMilliSecs =
 8004906:	fbb3 f0fb 	udiv	r0, r3, fp
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800490a:	f501 11c8 	add.w	r1, r1, #1638400	; 0x190000
		sigmaEstRef =
 800490e:	fbb1 f0f0 	udiv	r0, r1, r0
 8004912:	bf28      	it	cs
 8004914:	f44f 4970 	movcs.w	r9, #61440	; 0xf000
 8004918:	f7ff f834 	bl	8003984 <VL53L0X_isqrt>
		sigmaEstRef <<= 8;
 800491c:	0200      	lsls	r0, r0, #8
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800491e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8004922:	fbb0 f0fb 	udiv	r0, r0, fp
		sqr2 = sigmaEstRef * sigmaEstRef;
 8004926:	4340      	muls	r0, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8004928:	fb09 0009 	mla	r0, r9, r9, r0
 800492c:	f7ff f82a 	bl	8003984 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8004930:	fb0b f200 	mul.w	r2, fp, r0
 8004934:	4552      	cmp	r2, sl
 8004936:	bf28      	it	cs
 8004938:	4652      	movcs	r2, sl
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800493a:	9b08      	ldr	r3, [sp, #32]
		Status = VL53L0X_calc_dmax(
 800493c:	9907      	ldr	r1, [sp, #28]
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800493e:	601a      	str	r2, [r3, #0]
		Status = VL53L0X_calc_dmax(
 8004940:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8004942:	f8c5 2140 	str.w	r2, [r5, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	9702      	str	r7, [sp, #8]
 800494a:	9601      	str	r6, [sp, #4]
 800494c:	f8cd 8000 	str.w	r8, [sp]
 8004950:	4623      	mov	r3, r4
 8004952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004954:	4628      	mov	r0, r5
 8004956:	f7ff fe99 	bl	800468c <VL53L0X_calc_dmax>
 800495a:	4683      	mov	fp, r0
 800495c:	e746      	b.n	80047ec <VL53L0X_calc_sigma_estimate+0x94>
			pwMult = 1 << 16;
 800495e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8004962:	e79f      	b.n	80048a4 <VL53L0X_calc_sigma_estimate+0x14c>
 8004964:	00666666 	.word	0x00666666
 8004968:	0006999a 	.word	0x0006999a
 800496c:	028f87ae 	.word	0x028f87ae
 8004970:	ffff0000 	.word	0xffff0000

08004974 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	b08b      	sub	sp, #44	; 0x2c
 800497a:	9201      	str	r2, [sp, #4]
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);

	if (DeviceRangeStatusInternal == 0 ||
 800497c:	f24f 02a1 	movw	r2, #61601	; 0xf0a1
	uint8_t SigmaLimitCheckEnable = 0;
 8004980:	f04f 0900 	mov.w	r9, #0
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8004984:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
 8004988:	f00a 080f 	and.w	r8, sl, #15
	if (DeviceRangeStatusInternal == 0 ||
 800498c:	fa22 f208 	lsr.w	r2, r2, r8
{
 8004990:	469b      	mov	fp, r3
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004992:	4649      	mov	r1, r9
		NoneFlag = 1;
 8004994:	f002 0301 	and.w	r3, r2, #1
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004998:	f10d 020e 	add.w	r2, sp, #14
{
 800499c:	4605      	mov	r5, r0
 800499e:	9f15      	ldr	r7, [sp, #84]	; 0x54
	uint8_t SigmaLimitCheckEnable = 0;
 80049a0:	f88d 900e 	strb.w	r9, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80049a4:	f88d 900f 	strb.w	r9, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80049a8:	f88d 9010 	strb.w	r9, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80049ac:	f88d 9011 	strb.w	r9, [sp, #17]
	uint16_t tmpWord = 0;
 80049b0:	f8ad 9012 	strh.w	r9, [sp, #18]
	uint32_t Dmax_mm = 0;
 80049b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		NoneFlag = 1;
 80049b8:	9300      	str	r3, [sp, #0]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80049ba:	f7fd ff60 	bl	800287e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80049be:	f89d 400e 	ldrb.w	r4, [sp, #14]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80049c2:	4606      	mov	r6, r0
	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80049c4:	b1d4      	cbz	r4, 80049fc <VL53L0X_get_pal_range_status+0x88>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f040 80a5 	bne.w	8004b16 <VL53L0X_get_pal_range_status+0x1a2>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80049cc:	ab09      	add	r3, sp, #36	; 0x24
 80049ce:	aa05      	add	r2, sp, #20
 80049d0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff fec0 	bl	8004758 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80049d8:	2800      	cmp	r0, #0
 80049da:	f040 809e 	bne.w	8004b1a <VL53L0X_get_pal_range_status+0x1a6>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80049de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80049e2:	4601      	mov	r1, r0
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80049e4:	8153      	strh	r3, [r2, #10]
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80049e6:	4628      	mov	r0, r5
 80049e8:	aa06      	add	r2, sp, #24
 80049ea:	f7fd ff82 	bl	80028f2 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80049ee:	9c06      	ldr	r4, [sp, #24]
 80049f0:	b124      	cbz	r4, 80049fc <VL53L0X_get_pal_range_status+0x88>
	uint8_t SigmaLimitflag = 0;
 80049f2:	9b05      	ldr	r3, [sp, #20]
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf2c      	ite	cs
 80049f8:	2400      	movcs	r4, #0
 80049fa:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80049fc:	b920      	cbnz	r0, 8004a08 <VL53L0X_get_pal_range_status+0x94>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80049fe:	aa04      	add	r2, sp, #16
 8004a00:	2102      	movs	r1, #2
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7fd ff3b 	bl	800287e <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8004a08:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8004a0c:	f1b9 0f00 	cmp.w	r9, #0
 8004a10:	d028      	beq.n	8004a64 <VL53L0X_get_pal_range_status+0xf0>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f040 8085 	bne.w	8004b22 <VL53L0X_get_pal_range_status+0x1ae>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004a18:	aa07      	add	r2, sp, #28
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7fd ff68 	bl	80028f2 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8004a22:	b988      	cbnz	r0, 8004a48 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a24:	2201      	movs	r2, #1
 8004a26:	21ff      	movs	r1, #255	; 0xff
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f8f9 	bl	8004c20 <VL53L0X_WrByte>

		if (Status == VL53L0X_ERROR_NONE)
 8004a2e:	b958      	cbnz	r0, 8004a48 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_RdWord(Dev,
 8004a30:	f10d 0212 	add.w	r2, sp, #18
 8004a34:	21b6      	movs	r1, #182	; 0xb6
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 f940 	bl	8004cbc <VL53L0X_RdWord>
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8004a3c:	b920      	cbnz	r0, 8004a48 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a3e:	4602      	mov	r2, r0
 8004a40:	21ff      	movs	r1, #255	; 0xff
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f8ec 	bl	8004c20 <VL53L0X_WrByte>

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8004a48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8004a4c:	025a      	lsls	r2, r3, #9
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);

		if ((SignalRefClipValue > 0) &&
 8004a4e:	9b07      	ldr	r3, [sp, #28]
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8004a50:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
		if ((SignalRefClipValue > 0) &&
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d062      	beq.n	8004b1e <VL53L0X_get_pal_range_status+0x1aa>
	uint8_t SignalRefClipflag = 0;
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bf94      	ite	ls
 8004a5c:	f04f 0900 	movls.w	r9, #0
 8004a60:	f04f 0901 	movhi.w	r9, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8004a64:	b928      	cbnz	r0, 8004a72 <VL53L0X_get_pal_range_status+0xfe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004a66:	f10d 0211 	add.w	r2, sp, #17
 8004a6a:	2103      	movs	r1, #3
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7fd ff06 	bl	800287e <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8004a72:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8004a76:	b19e      	cbz	r6, 8004aa0 <VL53L0X_get_pal_range_status+0x12c>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d17c      	bne.n	8004b76 <VL53L0X_get_pal_range_status+0x202>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8004a7c:	f1bb 0f00 	cmp.w	fp, #0
 8004a80:	d003      	beq.n	8004a8a <VL53L0X_get_pal_range_status+0x116>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8004a82:	9b01      	ldr	r3, [sp, #4]
 8004a84:	021e      	lsls	r6, r3, #8
 8004a86:	fbb6 fbfb 	udiv	fp, r6, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004a8a:	aa08      	add	r2, sp, #32
 8004a8c:	2103      	movs	r1, #3
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f7fd ff2f 	bl	80028f2 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8004a94:	9e08      	ldr	r6, [sp, #32]
 8004a96:	b11e      	cbz	r6, 8004aa0 <VL53L0X_get_pal_range_status+0x12c>
	uint8_t RangeIgnoreThresholdflag = 0;
 8004a98:	45b3      	cmp	fp, r6
 8004a9a:	bf2c      	ite	cs
 8004a9c:	2600      	movcs	r6, #0
 8004a9e:	2601      	movcc	r6, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004aa0:	b920      	cbnz	r0, 8004aac <VL53L0X_get_pal_range_status+0x138>
		if (NoneFlag == 1) {
 8004aa2:	9b00      	ldr	r3, [sp, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03f      	beq.n	8004b28 <VL53L0X_get_pal_range_status+0x1b4>
			*pPalRangeStatus = 255;	 /* NONE */
 8004aa8:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8004aaa:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8004aac:	783a      	ldrb	r2, [r7, #0]
 8004aae:	b90a      	cbnz	r2, 8004ab4 <VL53L0X_get_pal_range_status+0x140>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8004ab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ab2:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004ab4:	f10d 020f 	add.w	r2, sp, #15
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4628      	mov	r0, r5
 8004abc:	f7fd fedf 	bl	800287e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ac0:	bb30      	cbnz	r0, 8004b10 <VL53L0X_get_pal_range_status+0x19c>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8004ac2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	bf08      	it	eq
 8004aca:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8004acc:	f1b8 0f04 	cmp.w	r8, #4
 8004ad0:	bf17      	itett	ne
 8004ad2:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 8004ad6:	2201      	moveq	r2, #1
 8004ad8:	fab2 f282 	clzne	r2, r2
 8004adc:	0952      	lsrne	r2, r2, #5
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004ade:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8004ae2:	f89d 2010 	ldrb.w	r2, [sp, #16]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004ae6:	f004 0401 	and.w	r4, r4, #1
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	bf08      	it	eq
 8004aee:	f04f 0901 	moveq.w	r9, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004af2:	f009 0301 	and.w	r3, r9, #1
 8004af6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8004afa:	f89d 3011 	ldrb.w	r3, [sp, #17]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004afe:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf08      	it	eq
 8004b06:	2601      	moveq	r6, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004b08:	f006 0601 	and.w	r6, r6, #1
 8004b0c:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8004b10:	b00b      	add	sp, #44	; 0x2c
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	464c      	mov	r4, r9
 8004b18:	e776      	b.n	8004a08 <VL53L0X_get_pal_range_status+0x94>
 8004b1a:	4634      	mov	r4, r6
 8004b1c:	e774      	b.n	8004a08 <VL53L0X_get_pal_range_status+0x94>
	uint8_t SignalRefClipflag = 0;
 8004b1e:	4699      	mov	r9, r3
 8004b20:	e7a0      	b.n	8004a64 <VL53L0X_get_pal_range_status+0xf0>
 8004b22:	f04f 0900 	mov.w	r9, #0
 8004b26:	e7a4      	b.n	8004a72 <VL53L0X_get_pal_range_status+0xfe>
		} else if (DeviceRangeStatusInternal == 1 ||
 8004b28:	f108 32ff 	add.w	r2, r8, #4294967295
 8004b2c:	2a02      	cmp	r2, #2
 8004b2e:	d801      	bhi.n	8004b34 <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 8004b30:	2205      	movs	r2, #5
 8004b32:	e7ba      	b.n	8004aaa <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 6 ||
 8004b34:	f1b8 0f06 	cmp.w	r8, #6
 8004b38:	d002      	beq.n	8004b40 <VL53L0X_get_pal_range_status+0x1cc>
 8004b3a:	f1b8 0f09 	cmp.w	r8, #9
 8004b3e:	d101      	bne.n	8004b44 <VL53L0X_get_pal_range_status+0x1d0>
			*pPalRangeStatus = 4;  /* Phase fail */
 8004b40:	2204      	movs	r2, #4
 8004b42:	e7b2      	b.n	8004aaa <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 8 ||
 8004b44:	f00a 0a0d 	and.w	sl, sl, #13
 8004b48:	f1ba 0f08 	cmp.w	sl, #8
 8004b4c:	d002      	beq.n	8004b54 <VL53L0X_get_pal_range_status+0x1e0>
					DeviceRangeStatusInternal == 10 ||
 8004b4e:	f1b9 0f01 	cmp.w	r9, #1
 8004b52:	d101      	bne.n	8004b58 <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 3;  /* Min range */
 8004b54:	2203      	movs	r2, #3
 8004b56:	e7a8      	b.n	8004aaa <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 4 ||
 8004b58:	f1b8 0f04 	cmp.w	r8, #4
 8004b5c:	d001      	beq.n	8004b62 <VL53L0X_get_pal_range_status+0x1ee>
 8004b5e:	2e01      	cmp	r6, #1
 8004b60:	d101      	bne.n	8004b66 <VL53L0X_get_pal_range_status+0x1f2>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8004b62:	2202      	movs	r2, #2
 8004b64:	e7a1      	b.n	8004aaa <VL53L0X_get_pal_range_status+0x136>
		} else if (SigmaLimitflag == 1) {
 8004b66:	2c01      	cmp	r4, #1
 8004b68:	d101      	bne.n	8004b6e <VL53L0X_get_pal_range_status+0x1fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	e79d      	b.n	8004aaa <VL53L0X_get_pal_range_status+0x136>
			*pPalRangeStatus = 0; /* Range Valid */
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4626      	mov	r6, r4
 8004b72:	703a      	strb	r2, [r7, #0]
 8004b74:	e79a      	b.n	8004aac <VL53L0X_get_pal_range_status+0x138>
	uint8_t RangeIgnoreThresholdflag = 0;
 8004b76:	2600      	movs	r6, #0
 8004b78:	e798      	b.n	8004aac <VL53L0X_get_pal_range_status+0x138>

08004b7a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004b7a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004b7c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004b80:	f890 4160 	ldrb.w	r4, [r0, #352]	; 0x160
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 8004b8a:	b293      	uxth	r3, r2
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	4621      	mov	r1, r4
 8004b90:	f7fb fe82 	bl	8000898 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8004b94:	b002      	add	sp, #8
 8004b96:	bd10      	pop	{r4, pc}

08004b98 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004b98:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004b9a:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004b9e:	f890 4160 	ldrb.w	r4, [r0, #352]	; 0x160
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 8004ba8:	b293      	uxth	r3, r2
 8004baa:	460a      	mov	r2, r1
 8004bac:	f044 0101 	orr.w	r1, r4, #1
 8004bb0:	f7fb ff40 	bl	8000a34 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd10      	pop	{r4, pc}

08004bb8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 8004bb8:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8004bc4:	d811      	bhi.n	8004bea <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index;
 8004bc6:	4d0a      	ldr	r5, [pc, #40]	; (8004bf0 <VL53L0X_WriteMulti+0x38>)
    memcpy(&_I2CBuffer[1], pdata, count);
 8004bc8:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 8004bd0:	f000 fcfc 	bl	80055cc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004bd4:	1c62      	adds	r2, r4, #1
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff ffce 	bl	8004b7a <_I2CWrite>
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004bde:	2800      	cmp	r0, #0
 8004be0:	bf0c      	ite	eq
 8004be2:	2000      	moveq	r0, #0
 8004be4:	f06f 0013 	mvnne.w	r0, #19
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004bea:	f06f 0003 	mvn.w	r0, #3
    }
    VL53L0X_PutI2cBus();
    return Status;
}
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf0:	20000460 	.word	0x20000460

08004bf4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf6:	ac02      	add	r4, sp, #8
 8004bf8:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8004bfc:	4616      	mov	r6, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004bfe:	4621      	mov	r1, r4
 8004c00:	2201      	movs	r2, #1
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004c02:	4605      	mov	r5, r0
 8004c04:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8004c06:	f7ff ffb8 	bl	8004b7a <_I2CWrite>
    if (status_int != 0) {
 8004c0a:	b928      	cbnz	r0, 8004c18 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7ff ffc1 	bl	8004b98 <_I2CRead>
    if (status_int != 0) {
 8004c16:	b108      	cbz	r0, 8004c1c <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004c18:	f06f 0013 	mvn.w	r0, #19
    }
done:
    VL53L0X_PutI2cBus();
    return Status;
}
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c20 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8004c20:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <VL53L0X_WrByte+0x1c>)
 8004c24:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8004c26:	705a      	strb	r2, [r3, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004c28:	4619      	mov	r1, r3
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f7ff ffa5 	bl	8004b7a <_I2CWrite>
    if (status_int != 0) {
 8004c30:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    VL53L0X_PutI2cBus();
    return Status;
}
 8004c32:	bf14      	ite	ne
 8004c34:	f06f 0013 	mvnne.w	r0, #19
 8004c38:	2000      	moveq	r0, #0
 8004c3a:	bd08      	pop	{r3, pc}
 8004c3c:	20000460 	.word	0x20000460

08004c40 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8004c40:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <VL53L0X_WrWord+0x20>)
 8004c44:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8004c46:	0a11      	lsrs	r1, r2, #8
 8004c48:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004c4a:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	2203      	movs	r2, #3
 8004c50:	f7ff ff93 	bl	8004b7a <_I2CWrite>
    if (status_int != 0) {
 8004c54:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    VL53L0X_PutI2cBus();
    return Status;
}
 8004c56:	bf14      	ite	ne
 8004c58:	f06f 0013 	mvnne.w	r0, #19
 8004c5c:	2000      	moveq	r0, #0
 8004c5e:	bd08      	pop	{r3, pc}
 8004c60:	20000460 	.word	0x20000460

08004c64 <VL53L0X_RdByte>:
    Status = VL53L0X_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c66:	ab02      	add	r3, sp, #8
 8004c68:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8004c6c:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004c6e:	4619      	mov	r1, r3
 8004c70:	2201      	movs	r2, #1
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004c72:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8004c74:	f7ff ff81 	bl	8004b7a <_I2CWrite>
    if( status_int ){
 8004c78:	b928      	cbnz	r0, 8004c86 <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff ff8a 	bl	8004b98 <_I2CRead>
    if (status_int != 0) {
 8004c84:	b108      	cbz	r0, 8004c8a <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004c86:	f06f 0013 	mvn.w	r0, #19
    }
done:
    VL53L0X_PutI2cBus();
    return Status;
}
 8004c8a:	b003      	add	sp, #12
 8004c8c:	bd30      	pop	{r4, r5, pc}

08004c8e <VL53L0X_UpdateByte>:
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c90:	4615      	mov	r5, r2
    Status = VL53L0X_RdByte(Dev, index, &data);
 8004c92:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004c96:	4606      	mov	r6, r0
 8004c98:	460f      	mov	r7, r1
 8004c9a:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 8004c9c:	f7ff ffe2 	bl	8004c64 <VL53L0X_RdByte>
    if (Status) {
 8004ca0:	b948      	cbnz	r0, 8004cb6 <VL53L0X_UpdateByte+0x28>
    data = (data & AndData) | OrData;
 8004ca2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004ca6:	4639      	mov	r1, r7
    data = (data & AndData) | OrData;
 8004ca8:	402a      	ands	r2, r5
 8004caa:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004cac:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 8004cae:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004cb2:	f7ff ffb5 	bl	8004c20 <VL53L0X_WrByte>
}
 8004cb6:	b003      	add	sp, #12
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004cbc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8004cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cbe:	ab02      	add	r3, sp, #8
 8004cc0:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8004cc4:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	2201      	movs	r2, #1
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8004cca:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8004ccc:	f7ff ff55 	bl	8004b7a <_I2CWrite>

    if( status_int ){
 8004cd0:	b118      	cbz	r0, 8004cda <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004cd2:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    VL53L0X_PutI2cBus();
    return Status;
}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004cda:	4c07      	ldr	r4, [pc, #28]	; (8004cf8 <VL53L0X_RdWord+0x3c>)
 8004cdc:	2202      	movs	r2, #2
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff ff59 	bl	8004b98 <_I2CRead>
    if (status_int != 0) {
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d1f3      	bne.n	8004cd2 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004cea:	7822      	ldrb	r2, [r4, #0]
 8004cec:	7863      	ldrb	r3, [r4, #1]
 8004cee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004cf2:	802b      	strh	r3, [r5, #0]
 8004cf4:	e7ef      	b.n	8004cd6 <VL53L0X_RdWord+0x1a>
 8004cf6:	bf00      	nop
 8004cf8:	20000460 	.word	0x20000460

08004cfc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004cfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cfe:	ab02      	add	r3, sp, #8
 8004d00:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8004d04:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004d06:	4619      	mov	r1, r3
 8004d08:	2201      	movs	r2, #1
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004d0a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8004d0c:	f7ff ff35 	bl	8004b7a <_I2CWrite>
    if (status_int != 0) {
 8004d10:	b118      	cbz	r0, 8004d1a <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d12:	f06f 0013 	mvn.w	r0, #19
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    VL53L0X_PutI2cBus();
    return Status;
}
 8004d16:	b002      	add	sp, #8
 8004d18:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8004d1a:	4c0a      	ldr	r4, [pc, #40]	; (8004d44 <VL53L0X_RdDWord+0x48>)
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ff39 	bl	8004b98 <_I2CRead>
    if (status_int != 0) {
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d1f3      	bne.n	8004d12 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8004d2a:	7863      	ldrb	r3, [r4, #1]
 8004d2c:	7822      	ldrb	r2, [r4, #0]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004d34:	78e2      	ldrb	r2, [r4, #3]
 8004d36:	4413      	add	r3, r2
 8004d38:	78a2      	ldrb	r2, [r4, #2]
 8004d3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	e7e9      	b.n	8004d16 <VL53L0X_RdDWord+0x1a>
 8004d42:	bf00      	nop
 8004d44:	20000460 	.word	0x20000460

08004d48 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8004d48:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 8004d4a:	2002      	movs	r0, #2
 8004d4c:	f7fb fa46 	bl	80001dc <HAL_Delay>
    return status;
}
 8004d50:	2000      	movs	r0, #0
 8004d52:	bd08      	pop	{r3, pc}

08004d54 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	2210      	movs	r2, #16
{
 8004d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5c:	eb0d 0002 	add.w	r0, sp, r2
 8004d60:	2100      	movs	r1, #0
 8004d62:	f000 fc3e 	bl	80055e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <MX_GPIO_Init+0xc0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004d68:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8004e1c <MX_GPIO_Init+0xc8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004d6e:	4c2a      	ldr	r4, [pc, #168]	; (8004e18 <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d70:	f042 0210 	orr.w	r2, r2, #16
 8004d74:	619a      	str	r2, [r3, #24]
 8004d76:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004d78:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7a:	f002 0210 	and.w	r2, r2, #16
 8004d7e:	9200      	str	r2, [sp, #0]
 8004d80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d82:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d88:	f042 0220 	orr.w	r2, r2, #32
 8004d8c:	619a      	str	r2, [r3, #24]
 8004d8e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d90:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d92:	f002 0220 	and.w	r2, r2, #32
 8004d96:	9201      	str	r2, [sp, #4]
 8004d98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9e:	f042 0204 	orr.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
 8004da4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da8:	f002 0204 	and.w	r2, r2, #4
 8004dac:	9202      	str	r2, [sp, #8]
 8004dae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	619a      	str	r2, [r3, #24]
 8004db8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004dba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004dc4:	f7fb fbb4 	bl	8000530 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4620      	mov	r0, r4
 8004dcc:	2132      	movs	r1, #50	; 0x32
 8004dce:	f7fb fbaf 	bl	8000530 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd6:	a904      	add	r1, sp, #16
 8004dd8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004dda:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ddc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de2:	f7fb fac3 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8004de6:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de8:	a904      	add	r1, sp, #16
 8004dea:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8004dec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dee:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df4:	f7fb faba 	bl	800036c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dfc:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfe:	a904      	add	r1, sp, #16
 8004e00:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e02:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e04:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e06:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e08:	f7fb fab0 	bl	800036c <HAL_GPIO_Init>

}
 8004e0c:	b008      	add	sp, #32
 8004e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40010800 	.word	0x40010800
 8004e1c:	40011000 	.word	0x40011000

08004e20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e20:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004e22:	480c      	ldr	r0, [pc, #48]	; (8004e54 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8004e24:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <MX_I2C1_Init+0x38>)
 8004e26:	f8df e034 	ldr.w	lr, [pc, #52]	; 8004e5c <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8004e2e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e32:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e34:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e36:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e38:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e3a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e3c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e3e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e40:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e42:	f7fb fc85 	bl	8000750 <HAL_I2C_Init>
 8004e46:	b118      	cbz	r0, 8004e50 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8004e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004e4c:	f000 b970 	b.w	8005130 <Error_Handler>
 8004e50:	bd08      	pop	{r3, pc}
 8004e52:	bf00      	nop
 8004e54:	200004a0 	.word	0x200004a0
 8004e58:	40005400 	.word	0x40005400
 8004e5c:	000186a0 	.word	0x000186a0

08004e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e60:	b510      	push	{r4, lr}
 8004e62:	4604      	mov	r4, r0
 8004e64:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e66:	2210      	movs	r2, #16
 8004e68:	2100      	movs	r1, #0
 8004e6a:	a802      	add	r0, sp, #8
 8004e6c:	f000 fbb9 	bl	80055e2 <memset>
  if(i2cHandle->Instance==I2C1)
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_I2C_MspInit+0x78>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d12c      	bne.n	8004ed2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e78:	4c18      	ldr	r4, [pc, #96]	; (8004edc <HAL_I2C_MspInit+0x7c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7e:	4818      	ldr	r0, [pc, #96]	; (8004ee0 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e80:	f043 0308 	orr.w	r3, r3, #8
 8004e84:	61a3      	str	r3, [r4, #24]
 8004e86:	69a3      	ldr	r3, [r4, #24]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e90:	23c0      	movs	r3, #192	; 0xc0
 8004e92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e94:	2312      	movs	r3, #18
 8004e96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9c:	f7fb fa66 	bl	800036c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ea0:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ea2:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ea4:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eaa:	61e3      	str	r3, [r4, #28]
 8004eac:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004eae:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004eb8:	f7fb f9b4 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004ebc:	201f      	movs	r0, #31
 8004ebe:	f7fb f9e5 	bl	800028c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2020      	movs	r0, #32
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	f7fb f9ac 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ecc:	2020      	movs	r0, #32
 8004ece:	f7fb f9dd 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004ed2:	b006      	add	sp, #24
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40005400 	.word	0x40005400
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40010c00 	.word	0x40010c00

08004ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ee8:	2228      	movs	r2, #40	; 0x28
 8004eea:	2100      	movs	r1, #0
 8004eec:	a806      	add	r0, sp, #24
 8004eee:	f000 fb78 	bl	80055e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	2214      	movs	r2, #20
 8004ef6:	a801      	add	r0, sp, #4
 8004ef8:	f000 fb73 	bl	80055e2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f00:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f02:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f04:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f06:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f0c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f0e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f10:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f12:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f14:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f16:	f7fc fcb3 	bl	8001880 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f1a:	230f      	movs	r3, #15
 8004f1c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f26:	4621      	mov	r1, r4
 8004f28:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f2a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f2c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f2e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f30:	f7fc fe80 	bl	8001c34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004f34:	b010      	add	sp, #64	; 0x40
 8004f36:	bd10      	pop	{r4, pc}

08004f38 <DetectSensors>:
 * @return
 */
int DetectSensors(uint8_t addr) {
    int i=0;
    uint16_t Id;
    volatile int status = 0;
 8004f38:	2300      	movs	r3, #0
int DetectSensors(uint8_t addr) {
 8004f3a:	b513      	push	{r0, r1, r4, lr}
 //   int FinalAddress;

//    for (i = 0; i < 3; i++) {
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDevs[i];
	pDev->I2cHandle = &hi2c1;
 8004f3c:	4c17      	ldr	r4, [pc, #92]	; (8004f9c <DetectSensors+0x64>)
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <DetectSensors+0x68>)
	pDev->I2cDevAddr = addr;
 8004f40:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
	pDev->Present = 0;
	HAL_Delay(2);
 8004f44:	2002      	movs	r0, #2
	pDev->I2cHandle = &hi2c1;
 8004f46:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
    volatile int status = 0;
 8004f4a:	9301      	str	r3, [sp, #4]
	pDev->Present = 0;
 8004f4c:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	HAL_Delay(2);
 8004f50:	f7fb f944 	bl	80001dc <HAL_Delay>
//	FinalAddress=addr+(i+1)*2;

	do {
		/* Set I2C standard mode (400 KHz) before doing the first register access */
		if (status == VL53L0X_ERROR_NONE)
 8004f54:	9a01      	ldr	r2, [sp, #4]
 8004f56:	b922      	cbnz	r2, 8004f62 <DetectSensors+0x2a>
			status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 8004f58:	2188      	movs	r1, #136	; 0x88
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff fe60 	bl	8004c20 <VL53L0X_WrByte>
 8004f60:	9001      	str	r0, [sp, #4]

		/* Try to read one register using default 0x52 address */
		status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8004f62:	f10d 0202 	add.w	r2, sp, #2
 8004f66:	21c0      	movs	r1, #192	; 0xc0
 8004f68:	480c      	ldr	r0, [pc, #48]	; (8004f9c <DetectSensors+0x64>)
 8004f6a:	f7ff fea7 	bl	8004cbc <VL53L0X_RdWord>
 8004f6e:	9001      	str	r0, [sp, #4]
		if (status) {
 8004f70:	9a01      	ldr	r2, [sp, #4]
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <DetectSensors+0x6c>)
 8004f74:	b972      	cbnz	r2, 8004f94 <DetectSensors+0x5c>
			break;
		}
		if (Id == 0xEEAA) {
 8004f76:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8004f7a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004f7e:	4291      	cmp	r1, r2
//			/* Sensor is found */
			nDevPresent++;
 8004f80:	bf09      	itett	eq
 8004f82:	681a      	ldreq	r2, [r3, #0]
			pDev->Present = 1;
		}
		else {
			status = 1;
 8004f84:	2201      	movne	r2, #1
			nDevPresent++;
 8004f86:	3201      	addeq	r2, #1
 8004f88:	601a      	streq	r2, [r3, #0]
			pDev->Present = 1;
 8004f8a:	bf0a      	itet	eq
 8004f8c:	2201      	moveq	r2, #1
			status = 1;
 8004f8e:	9201      	strne	r2, [sp, #4]
			pDev->Present = 1;
 8004f90:	f8c4 2168 	streq.w	r2, [r4, #360]	; 0x168
		}
	} while (0);


    return nDevPresent;
}
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	b002      	add	sp, #8
 8004f98:	bd10      	pop	{r4, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200002c4 	.word	0x200002c4
 8004fa0:	200004a0 	.word	0x200004a0
 8004fa4:	20000458 	.word	0x20000458

08004fa8 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8004fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;


	if( VL53L0XDevs[i].Present){
 8004fac:	4c2f      	ldr	r4, [pc, #188]	; (800506c <SetupSingleShot+0xc4>)
void SetupSingleShot(RangingConfig_e rangingConfig){
 8004fae:	4605      	mov	r5, r0
	if( VL53L0XDevs[i].Present){
 8004fb0:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d04d      	beq.n	8005054 <SetupSingleShot+0xac>
		status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7fe f851 	bl	8003060 <VL53L0X_StaticInit>

		status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8004fbe:	f10d 0202 	add.w	r2, sp, #2
 8004fc2:	f10d 0101 	add.w	r1, sp, #1
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7fd fdde 	bl	8002b88 <VL53L0X_PerformRefCalibration>


		status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 8004fcc:	f10d 0203 	add.w	r2, sp, #3
 8004fd0:	a901      	add	r1, sp, #4
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7fe f949 	bl	800326a <VL53L0X_PerformRefSpadManagement>


		status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7fd fb4c 	bl	8002678 <VL53L0X_SetDeviceMode>

		status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7fd fc0b 	bl	8002800 <VL53L0X_SetLimitCheckEnable>

		status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8004fea:	2201      	movs	r2, #1
 8004fec:	4620      	mov	r0, r4
 8004fee:	4611      	mov	r1, r2
 8004ff0:	f7fd fc06 	bl	8002800 <VL53L0X_SetLimitCheckEnable>
 8004ff4:	2d02      	cmp	r5, #2
 8004ff6:	d830      	bhi.n	800505a <SetupSingleShot+0xb2>
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <SetupSingleShot+0xc8>)
 8004ffa:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <SetupSingleShot+0xcc>)
 8005000:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 8005004:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <SetupSingleShot+0xd0>)
 8005006:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 800500a:	4b1c      	ldr	r3, [pc, #112]	; (800507c <SetupSingleShot+0xd4>)
 800500c:	5d5e      	ldrb	r6, [r3, r5]
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <SetupSingleShot+0xd8>)
 8005010:	5d5d      	ldrb	r5, [r3, r5]
					break;
				default:
					break;
		}

		status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8005012:	2101      	movs	r1, #1
 8005014:	4815      	ldr	r0, [pc, #84]	; (800506c <SetupSingleShot+0xc4>)
 8005016:	f7fd fc3f 	bl	8002898 <VL53L0X_SetLimitCheckValue>

		status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800501a:	4642      	mov	r2, r8
 800501c:	2100      	movs	r1, #0
 800501e:	4813      	ldr	r0, [pc, #76]	; (800506c <SetupSingleShot+0xc4>)
 8005020:	f7fd fc3a 	bl	8002898 <VL53L0X_SetLimitCheckValue>

		status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 8005024:	4639      	mov	r1, r7
 8005026:	4811      	ldr	r0, [pc, #68]	; (800506c <SetupSingleShot+0xc4>)
 8005028:	f7fd fb42 	bl	80026b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>

		status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800502c:	4632      	mov	r2, r6
 800502e:	2100      	movs	r1, #0
 8005030:	480e      	ldr	r0, [pc, #56]	; (800506c <SetupSingleShot+0xc4>)
 8005032:	f7fd fb3f 	bl	80026b4 <VL53L0X_SetVcselPulsePeriod>

		status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8005036:	462a      	mov	r2, r5
 8005038:	2101      	movs	r1, #1
 800503a:	480c      	ldr	r0, [pc, #48]	; (800506c <SetupSingleShot+0xc4>)
 800503c:	f7fd fb3a 	bl	80026b4 <VL53L0X_SetVcselPulsePeriod>

		status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 8005040:	f10d 0202 	add.w	r2, sp, #2
 8005044:	f10d 0101 	add.w	r1, sp, #1
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <SetupSingleShot+0xc4>)
 800504a:	f7fd fd9d 	bl	8002b88 <VL53L0X_PerformRefCalibration>

		VL53L0XDevs[i].LeakyFirst=1;
 800504e:	2301      	movs	r3, #1
 8005050:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170

    }
}
 8005054:	b002      	add	sp, #8
 8005056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800505a:	250a      	movs	r5, #10
 800505c:	260e      	movs	r6, #14
 800505e:	f248 07e8 	movw	r7, #33000	; 0x80e8
 8005062:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 8005066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800506a:	e7d2      	b.n	8005012 <SetupSingleShot+0x6a>
 800506c:	200002c4 	.word	0x200002c4
 8005070:	0800562c 	.word	0x0800562c
 8005074:	08005634 	.word	0x08005634
 8005078:	08005640 	.word	0x08005640
 800507c:	0800564c 	.word	0x0800564c
 8005080:	0800564f 	.word	0x0800564f

08005084 <main>:
{
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8005086:	f7fb f885 	bl	8000194 <HAL_Init>
  MX_I2C1_Init();
 800508a:	2400      	movs	r4, #0
  SystemClock_Config();
 800508c:	f7ff ff2a 	bl	8004ee4 <SystemClock_Config>
  MX_GPIO_Init();
 8005090:	f7ff fe60 	bl	8004d54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005094:	f000 f944 	bl	8005320 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005098:	f000 f8bc 	bl	8005214 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800509c:	f000 f998 	bl	80053d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80050a0:	f000 f9b2 	bl	8005408 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80050a4:	f7ff febc 	bl	8004e20 <MX_I2C1_Init>
	    nDevPresent=DetectSensors(i);
 80050a8:	4e1c      	ldr	r6, [pc, #112]	; (800511c <main+0x98>)
 80050aa:	b2e5      	uxtb	r5, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f7ff ff43 	bl	8004f38 <DetectSensors>
 80050b2:	6030      	str	r0, [r6, #0]
		if(nDevPresent!=0)
 80050b4:	b358      	cbz	r0, 800510e <main+0x8a>
			VL53L0XDevs[0].I2cDevAddr = i;
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <main+0x9c>)
 80050b8:	f883 5160 	strb.w	r5, [r3, #352]	; 0x160
  RangingConfig =  LONG_RANGE;
 80050bc:	2300      	movs	r3, #0
 80050be:	4d19      	ldr	r5, [pc, #100]	; (8005124 <main+0xa0>)
  HAL_Delay(1000);
 80050c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  RangingConfig =  LONG_RANGE;
 80050c4:	702b      	strb	r3, [r5, #0]
  HAL_Delay(1000);
 80050c6:	f7fb f889 	bl	80001dc <HAL_Delay>
  sensor_status=VL53L0X_DataInit(&VL53L0XDevs[0]);
 80050ca:	4815      	ldr	r0, [pc, #84]	; (8005120 <main+0x9c>)
 80050cc:	f7fd fc98 	bl	8002a00 <VL53L0X_DataInit>
 80050d0:	4c15      	ldr	r4, [pc, #84]	; (8005128 <main+0xa4>)
	  sensor_status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],&RangingMeasurementData);
 80050d2:	4f16      	ldr	r7, [pc, #88]	; (800512c <main+0xa8>)
  sensor_status=VL53L0X_DataInit(&VL53L0XDevs[0]);
 80050d4:	6020      	str	r0, [r4, #0]
  sensor_status=VL53L0X_StaticInit(&VL53L0XDevs[0]);
 80050d6:	4812      	ldr	r0, [pc, #72]	; (8005120 <main+0x9c>)
 80050d8:	f7fd ffc2 	bl	8003060 <VL53L0X_StaticInit>
	  sensor_status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],&RangingMeasurementData);
 80050dc:	4e10      	ldr	r6, [pc, #64]	; (8005120 <main+0x9c>)
  sensor_status=VL53L0X_StaticInit(&VL53L0XDevs[0]);
 80050de:	6020      	str	r0, [r4, #0]
	  SetupSingleShot(RangingConfig);
 80050e0:	7828      	ldrb	r0, [r5, #0]
 80050e2:	f7ff ff61 	bl	8004fa8 <SetupSingleShot>
	  sensor_status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[0],&RangingMeasurementData);
 80050e6:	4639      	mov	r1, r7
 80050e8:	4630      	mov	r0, r6
 80050ea:	f7fd fef6 	bl	8002eda <VL53L0X_PerformSingleRangingMeasurement>
 80050ee:	6020      	str	r0, [r4, #0]
	  HAL_Delay(100);
 80050f0:	2064      	movs	r0, #100	; 0x64
 80050f2:	f7fb f873 	bl	80001dc <HAL_Delay>
	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED :
 80050f6:	782b      	ldrb	r3, [r5, #0]
 80050f8:	b16b      	cbz	r3, 8005116 <main+0x92>
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	bf0c      	ite	eq
 80050fe:	2302      	moveq	r3, #2
 8005100:	2300      	movne	r3, #0
	  sensor_status=VL53L0X_ResetDevice(&VL53L0XDevs[0]);
 8005102:	4630      	mov	r0, r6
	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED :
 8005104:	702b      	strb	r3, [r5, #0]
	  sensor_status=VL53L0X_ResetDevice(&VL53L0XDevs[0]);
 8005106:	f7fd fa87 	bl	8002618 <VL53L0X_ResetDevice>
 800510a:	6020      	str	r0, [r4, #0]
	  SetupSingleShot(RangingConfig);
 800510c:	e7e8      	b.n	80050e0 <main+0x5c>
 800510e:	3401      	adds	r4, #1
  for(uint16_t i = 0; i<255; i++)
 8005110:	2cff      	cmp	r4, #255	; 0xff
 8005112:	d1ca      	bne.n	80050aa <main+0x26>
 8005114:	e7d2      	b.n	80050bc <main+0x38>
	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED :
 8005116:	2301      	movs	r3, #1
 8005118:	e7f3      	b.n	8005102 <main+0x7e>
 800511a:	bf00      	nop
 800511c:	20000458 	.word	0x20000458
 8005120:	200002c4 	.word	0x200002c4
 8005124:	200004f4 	.word	0x200004f4
 8005128:	200004f8 	.word	0x200004f8
 800512c:	200004fc 	.word	0x200004fc

08005130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005130:	4770      	bx	lr
	...

08005134 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_MspInit+0x3c>)
{
 8005136:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	619a      	str	r2, [r3, #24]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	f002 0201 	and.w	r2, r2, #1
 8005146:	9200      	str	r2, [sp, #0]
 8005148:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005154:	4a07      	ldr	r2, [pc, #28]	; (8005174 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800515e:	6853      	ldr	r3, [r2, #4]
 8005160:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800516a:	b002      	add	sp, #8
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	40010000 	.word	0x40010000

08005178 <NMI_Handler>:
 8005178:	4770      	bx	lr

0800517a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800517a:	e7fe      	b.n	800517a <HardFault_Handler>

0800517c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800517c:	e7fe      	b.n	800517c <MemManage_Handler>

0800517e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800517e:	e7fe      	b.n	800517e <BusFault_Handler>

08005180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005180:	e7fe      	b.n	8005180 <UsageFault_Handler>

08005182 <SVC_Handler>:
 8005182:	4770      	bx	lr

08005184 <DebugMon_Handler>:
 8005184:	4770      	bx	lr

08005186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005186:	4770      	bx	lr

08005188 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005188:	f7fb b816 	b.w	80001b8 <HAL_IncTick>

0800518c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <TIM3_IRQHandler+0x8>)
 800518e:	f7fc be89 	b.w	8001ea4 <HAL_TIM_IRQHandler>
 8005192:	bf00      	nop
 8005194:	20000518 	.word	0x20000518

08005198 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <I2C1_EV_IRQHandler+0x8>)
 800519a:	f7fb beab 	b.w	8000ef4 <HAL_I2C_EV_IRQHandler>
 800519e:	bf00      	nop
 80051a0:	200004a0 	.word	0x200004a0

080051a4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051a4:	4801      	ldr	r0, [pc, #4]	; (80051ac <I2C1_ER_IRQHandler+0x8>)
 80051a6:	f7fc bad1 	b.w	800174c <HAL_I2C_ER_IRQHandler>
 80051aa:	bf00      	nop
 80051ac:	200004a0 	.word	0x200004a0

080051b0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <USART1_IRQHandler+0x8>)
 80051b2:	f7fd b989 	b.w	80024c8 <HAL_UART_IRQHandler>
 80051b6:	bf00      	nop
 80051b8:	200005d8 	.word	0x200005d8

080051bc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <USART3_IRQHandler+0x8>)
 80051be:	f7fd b983 	b.w	80024c8 <HAL_UART_IRQHandler>
 80051c2:	bf00      	nop
 80051c4:	20000598 	.word	0x20000598

080051c8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80051c8:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <SystemInit+0x40>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <SystemInit+0x44>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80051e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80051f4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80051f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80051fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80051fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <SystemInit+0x48>)
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	f8ff0000 	.word	0xf8ff0000
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005216:	2210      	movs	r2, #16
 8005218:	2100      	movs	r1, #0
 800521a:	a802      	add	r0, sp, #8
 800521c:	f000 f9e1 	bl	80055e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005220:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
 8005222:	4814      	ldr	r0, [pc, #80]	; (8005274 <MX_TIM3_Init+0x60>)
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005226:	9300      	str	r3, [sp, #0]
  htim3.Init.Prescaler = 0;
 8005228:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1439;
 800522c:	f240 529f 	movw	r2, #1439	; 0x59f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005230:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005232:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1439;
 8005234:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005236:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005238:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800523a:	f7fc ff0d 	bl	8002058 <HAL_TIM_Base_Init>
 800523e:	b108      	cbz	r0, 8005244 <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8005240:	f7ff ff76 	bl	8005130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005248:	a902      	add	r1, sp, #8
 800524a:	480a      	ldr	r0, [pc, #40]	; (8005274 <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800524c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800524e:	f7fc ffcf 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8005252:	b108      	cbz	r0, 8005258 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 8005254:	f7ff ff6c 	bl	8005130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005258:	2220      	movs	r2, #32
 800525a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800525c:	4669      	mov	r1, sp
 800525e:	4805      	ldr	r0, [pc, #20]	; (8005274 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005260:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005264:	f7fd f858 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8005268:	b108      	cbz	r0, 800526e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800526a:	f7ff ff61 	bl	8005130 <Error_Handler>
  }

}
 800526e:	b007      	add	sp, #28
 8005270:	f85d fb04 	ldr.w	pc, [sp], #4
 8005274:	20000518 	.word	0x20000518
 8005278:	40000400 	.word	0x40000400

0800527c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800527c:	6803      	ldr	r3, [r0, #0]
{
 800527e:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d10d      	bne.n	80052a2 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005286:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	61da      	str	r2, [r3, #28]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800529c:	b003      	add	sp, #12
 800529e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80052a2:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <HAL_TIM_Base_MspInit+0x54>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d1f9      	bne.n	800529c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052aa:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	f042 0202 	orr.w	r2, r2, #2
 80052b2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052b4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052b6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052b8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80052c2:	f7fa ffaf 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80052c6:	201d      	movs	r0, #29
 80052c8:	f7fa ffe0 	bl	800028c <HAL_NVIC_EnableIRQ>
}
 80052cc:	e7e6      	b.n	800529c <HAL_TIM_Base_MspInit+0x20>
 80052ce:	bf00      	nop
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40021000 	.word	0x40021000

080052d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052d8:	b510      	push	{r4, lr}
 80052da:	4604      	mov	r4, r0
 80052dc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052de:	2210      	movs	r2, #16
 80052e0:	2100      	movs	r1, #0
 80052e2:	a802      	add	r0, sp, #8
 80052e4:	f000 f97d 	bl	80055e2 <memset>
  if(timHandle->Instance==TIM2)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d113      	bne.n	8005318 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80052f4:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f8:	f042 0204 	orr.w	r2, r2, #4
 80052fc:	619a      	str	r2, [r3, #24]
 80052fe:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005300:	4806      	ldr	r0, [pc, #24]	; (800531c <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800530a:	230c      	movs	r3, #12
 800530c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530e:	2302      	movs	r3, #2
 8005310:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005314:	f7fb f82a 	bl	800036c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005318:	b006      	add	sp, #24
 800531a:	bd10      	pop	{r4, pc}
 800531c:	40010800 	.word	0x40010800

08005320 <MX_TIM2_Init>:
{
 8005320:	b510      	push	{r4, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005324:	2210      	movs	r2, #16
 8005326:	2100      	movs	r1, #0
 8005328:	a803      	add	r0, sp, #12
 800532a:	f000 f95a 	bl	80055e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005330:	221c      	movs	r2, #28
 8005332:	4621      	mov	r1, r4
 8005334:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005338:	9401      	str	r4, [sp, #4]
 800533a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800533c:	f000 f951 	bl	80055e2 <memset>
  htim2.Init.Prescaler = 3;
 8005340:	2303      	movs	r3, #3
 8005342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8005346:	4821      	ldr	r0, [pc, #132]	; (80053cc <MX_TIM2_Init+0xac>)
  htim2.Init.Prescaler = 3;
 8005348:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 65535;
 800534c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005350:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 65535;
 8005352:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005354:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005356:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005358:	f7fc fe7e 	bl	8002058 <HAL_TIM_Base_Init>
 800535c:	b108      	cbz	r0, 8005362 <MX_TIM2_Init+0x42>
    Error_Handler();
 800535e:	f7ff fee7 	bl	8005130 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005366:	a903      	add	r1, sp, #12
 8005368:	4818      	ldr	r0, [pc, #96]	; (80053cc <MX_TIM2_Init+0xac>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800536a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800536c:	f7fc ff40 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8005370:	b108      	cbz	r0, 8005376 <MX_TIM2_Init+0x56>
    Error_Handler();
 8005372:	f7ff fedd 	bl	8005130 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005376:	4815      	ldr	r0, [pc, #84]	; (80053cc <MX_TIM2_Init+0xac>)
 8005378:	f7fc fe88 	bl	800208c <HAL_TIM_PWM_Init>
 800537c:	b108      	cbz	r0, 8005382 <MX_TIM2_Init+0x62>
    Error_Handler();
 800537e:	f7ff fed7 	bl	8005130 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005382:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005384:	a901      	add	r1, sp, #4
 8005386:	4811      	ldr	r0, [pc, #68]	; (80053cc <MX_TIM2_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005388:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800538a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800538c:	f7fc ffc4 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8005390:	b108      	cbz	r0, 8005396 <MX_TIM2_Init+0x76>
    Error_Handler();
 8005392:	f7ff fecd 	bl	8005130 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005396:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005398:	2208      	movs	r2, #8
 800539a:	a907      	add	r1, sp, #28
 800539c:	480b      	ldr	r0, [pc, #44]	; (80053cc <MX_TIM2_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800539e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80053a0:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053a2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053a4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053a6:	f7fc feb7 	bl	8002118 <HAL_TIM_PWM_ConfigChannel>
 80053aa:	b108      	cbz	r0, 80053b0 <MX_TIM2_Init+0x90>
    Error_Handler();
 80053ac:	f7ff fec0 	bl	8005130 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80053b0:	220c      	movs	r2, #12
 80053b2:	a907      	add	r1, sp, #28
 80053b4:	4805      	ldr	r0, [pc, #20]	; (80053cc <MX_TIM2_Init+0xac>)
 80053b6:	f7fc feaf 	bl	8002118 <HAL_TIM_PWM_ConfigChannel>
 80053ba:	b108      	cbz	r0, 80053c0 <MX_TIM2_Init+0xa0>
    Error_Handler();
 80053bc:	f7ff feb8 	bl	8005130 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80053c0:	4802      	ldr	r0, [pc, #8]	; (80053cc <MX_TIM2_Init+0xac>)
 80053c2:	f7ff ff89 	bl	80052d8 <HAL_TIM_MspPostInit>
}
 80053c6:	b00e      	add	sp, #56	; 0x38
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	20000558 	.word	0x20000558

080053d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053d0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 80053d2:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 80053d6:	480a      	ldr	r0, [pc, #40]	; (8005400 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053da:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 80053dc:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053e0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053e2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053e8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ea:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053ec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053ee:	f7fc fffb 	bl	80023e8 <HAL_UART_Init>
 80053f2:	b118      	cbz	r0, 80053fc <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80053f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80053f8:	f7ff be9a 	b.w	8005130 <Error_Handler>
 80053fc:	bd08      	pop	{r3, pc}
 80053fe:	bf00      	nop
 8005400:	200005d8 	.word	0x200005d8
 8005404:	40013800 	.word	0x40013800

08005408 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005408:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 800540a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 800540e:	480a      	ldr	r0, [pc, #40]	; (8005438 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005412:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8005414:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005418:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800541a:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800541c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800541e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005420:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005422:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005424:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005426:	f7fc ffdf 	bl	80023e8 <HAL_UART_Init>
 800542a:	b118      	cbz	r0, 8005434 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800542c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005430:	f7ff be7e 	b.w	8005130 <Error_Handler>
 8005434:	bd08      	pop	{r3, pc}
 8005436:	bf00      	nop
 8005438:	20000598 	.word	0x20000598
 800543c:	40004800 	.word	0x40004800

08005440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	2210      	movs	r2, #16
{
 8005442:	b510      	push	{r4, lr}
 8005444:	4604      	mov	r4, r0
 8005446:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	eb0d 0002 	add.w	r0, sp, r2
 800544c:	2100      	movs	r1, #0
 800544e:	f000 f8c8 	bl	80055e2 <memset>
  if(uartHandle->Instance==USART1)
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <HAL_UART_MspInit+0xe4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d131      	bne.n	80054be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <HAL_UART_MspInit+0xe8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800545e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005460:	4832      	ldr	r0, [pc, #200]	; (800552c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005466:	619a      	str	r2, [r3, #24]
 8005468:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800546a:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800546c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005470:	9200      	str	r2, [sp, #0]
 8005472:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	f042 0204 	orr.w	r2, r2, #4
 800547a:	619a      	str	r2, [r3, #24]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800548a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548c:	2302      	movs	r3, #2
 800548e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005490:	2303      	movs	r3, #3
 8005492:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005494:	f7fa ff6a 	bl	800036c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005498:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549c:	a904      	add	r1, sp, #16
 800549e:	4823      	ldr	r0, [pc, #140]	; (800552c <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054a2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a6:	f7fa ff61 	bl	800036c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054aa:	2025      	movs	r0, #37	; 0x25
 80054ac:	4622      	mov	r2, r4
 80054ae:	4621      	mov	r1, r4
 80054b0:	f7fa feb8 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054b4:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054b6:	f7fa fee9 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80054ba:	b008      	add	sp, #32
 80054bc:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_UART_MspInit+0xf0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d1fa      	bne.n	80054ba <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054c4:	4b18      	ldr	r3, [pc, #96]	; (8005528 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80054c8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ca:	481a      	ldr	r0, [pc, #104]	; (8005534 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80054cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80054d0:	61da      	str	r2, [r3, #28]
 80054d2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d4:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80054d6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80054da:	9202      	str	r2, [sp, #8]
 80054dc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	619a      	str	r2, [r3, #24]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	9303      	str	r3, [sp, #12]
 80054ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054fa:	2303      	movs	r3, #3
 80054fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fe:	f7fa ff35 	bl	800036c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005502:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005506:	a904      	add	r1, sp, #16
 8005508:	480a      	ldr	r0, [pc, #40]	; (8005534 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800550a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800550c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005510:	f7fa ff2c 	bl	800036c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005514:	2027      	movs	r0, #39	; 0x27
 8005516:	4622      	mov	r2, r4
 8005518:	4621      	mov	r1, r4
 800551a:	f7fa fe83 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800551e:	2027      	movs	r0, #39	; 0x27
 8005520:	e7c9      	b.n	80054b6 <HAL_UART_MspInit+0x76>
 8005522:	bf00      	nop
 8005524:	40013800 	.word	0x40013800
 8005528:	40021000 	.word	0x40021000
 800552c:	40010800 	.word	0x40010800
 8005530:	40004800 	.word	0x40004800
 8005534:	40010c00 	.word	0x40010c00

08005538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005538:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800553a:	e003      	b.n	8005544 <LoopCopyDataInit>

0800553c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800553e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005540:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005542:	3104      	adds	r1, #4

08005544 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005544:	480a      	ldr	r0, [pc, #40]	; (8005570 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005548:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800554a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800554c:	d3f6      	bcc.n	800553c <CopyDataInit>
  ldr r2, =_sbss
 800554e:	4a0a      	ldr	r2, [pc, #40]	; (8005578 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005550:	e002      	b.n	8005558 <LoopFillZerobss>

08005552 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005552:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005554:	f842 3b04 	str.w	r3, [r2], #4

08005558 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800555a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800555c:	d3f9      	bcc.n	8005552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800555e:	f7ff fe33 	bl	80051c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005562:	f000 f80f 	bl	8005584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005566:	f7ff fd8d 	bl	8005084 <main>
  bx lr
 800556a:	4770      	bx	lr
  ldr r3, =_sidata
 800556c:	08005674 	.word	0x08005674
  ldr r0, =_sdata
 8005570:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005574:	2000043c 	.word	0x2000043c
  ldr r2, =_sbss
 8005578:	2000043c 	.word	0x2000043c
  ldr r3, = _ebss
 800557c:	20000618 	.word	0x20000618

08005580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005580:	e7fe      	b.n	8005580 <ADC1_2_IRQHandler>
	...

08005584 <__libc_init_array>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	2500      	movs	r5, #0
 8005588:	4e0c      	ldr	r6, [pc, #48]	; (80055bc <__libc_init_array+0x38>)
 800558a:	4c0d      	ldr	r4, [pc, #52]	; (80055c0 <__libc_init_array+0x3c>)
 800558c:	1ba4      	subs	r4, r4, r6
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	42a5      	cmp	r5, r4
 8005592:	d109      	bne.n	80055a8 <__libc_init_array+0x24>
 8005594:	f000 f836 	bl	8005604 <_init>
 8005598:	2500      	movs	r5, #0
 800559a:	4e0a      	ldr	r6, [pc, #40]	; (80055c4 <__libc_init_array+0x40>)
 800559c:	4c0a      	ldr	r4, [pc, #40]	; (80055c8 <__libc_init_array+0x44>)
 800559e:	1ba4      	subs	r4, r4, r6
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	42a5      	cmp	r5, r4
 80055a4:	d105      	bne.n	80055b2 <__libc_init_array+0x2e>
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ac:	4798      	blx	r3
 80055ae:	3501      	adds	r5, #1
 80055b0:	e7ee      	b.n	8005590 <__libc_init_array+0xc>
 80055b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b6:	4798      	blx	r3
 80055b8:	3501      	adds	r5, #1
 80055ba:	e7f2      	b.n	80055a2 <__libc_init_array+0x1e>
 80055bc:	0800566c 	.word	0x0800566c
 80055c0:	0800566c 	.word	0x0800566c
 80055c4:	0800566c 	.word	0x0800566c
 80055c8:	08005670 	.word	0x08005670

080055cc <memcpy>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	1e43      	subs	r3, r0, #1
 80055d0:	440a      	add	r2, r1
 80055d2:	4291      	cmp	r1, r2
 80055d4:	d100      	bne.n	80055d8 <memcpy+0xc>
 80055d6:	bd10      	pop	{r4, pc}
 80055d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e0:	e7f7      	b.n	80055d2 <memcpy+0x6>

080055e2 <memset>:
 80055e2:	4603      	mov	r3, r0
 80055e4:	4402      	add	r2, r0
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d100      	bne.n	80055ec <memset+0xa>
 80055ea:	4770      	bx	lr
 80055ec:	f803 1b01 	strb.w	r1, [r3], #1
 80055f0:	e7f9      	b.n	80055e6 <memset+0x4>

080055f2 <strcpy>:
 80055f2:	4603      	mov	r3, r0
 80055f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f8:	f803 2b01 	strb.w	r2, [r3], #1
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	d1f9      	bne.n	80055f4 <strcpy+0x2>
 8005600:	4770      	bx	lr
	...

08005604 <_init>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr

08005610 <_fini>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr
